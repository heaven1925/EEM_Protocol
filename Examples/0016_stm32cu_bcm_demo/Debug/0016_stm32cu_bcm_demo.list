
0016_stm32cu_bcm_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e40  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08005014  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005014  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002626  00000000  00000000  0003161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00033c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001881b  00000000  00000000  00035730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106fe  00000000  00000000  0004df4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a30e  00000000  00000000  0005e649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  000f89a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fbc 	.word	0x08004fbc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004fbc 	.word	0x08004fbc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <TIM1_UP_TIM10_IRQHandler>:
extern YSB_Module_st	YSB_MSG;


/* 10 MS TICK IRQ Handlers */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* increase tick parameters */
  tickParameter++;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80004e4:	6013      	str	r3, [r2, #0]

  /* Check Can FIFO's */
  EEM_PERIODIC(&protocol.obj.canPacket);
 80004e6:	4815      	ldr	r0, [pc, #84]	; (800053c <TIM1_UP_TIM10_IRQHandler+0x64>)
 80004e8:	f000 fefc 	bl	80012e4 <EEM_PERIODIC>

  /* Send 100ms periodic Data */
  if( ( tickParameter % 10 ) == 0 )
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <TIM1_UP_TIM10_IRQHandler+0x68>)
 80004f2:	fba3 2301 	umull	r2, r3, r3, r1
 80004f6:	08da      	lsrs	r2, r3, #3
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	1aca      	subs	r2, r1, r3
 8000502:	2a00      	cmp	r2, #0
 8000504:	d112      	bne.n	800052c <TIM1_UP_TIM10_IRQHandler+0x54>
  {
	  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message07.payload[0] , 8);
 8000506:	2208      	movs	r2, #8
 8000508:	490e      	ldr	r1, [pc, #56]	; (8000544 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 800050a:	480f      	ldr	r0, [pc, #60]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x70>)
 800050c:	f004 fd40 	bl	8004f90 <memcpy>
	  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message07_ID;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <TIM1_UP_TIM10_IRQHandler+0x74>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8000516:	61d3      	str	r3, [r2, #28]

	  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <TIM1_UP_TIM10_IRQHandler+0x78>)
 800051a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800051e:	2100      	movs	r1, #0
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <TIM1_UP_TIM10_IRQHandler+0x64>)
 8000522:	4798      	blx	r3

	  /* Toogle Pin every 100ms */
	  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000524:	2104      	movs	r1, #4
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8000528:	f002 ff2d 	bl	8003386 <HAL_GPIO_TogglePin>
  }

  HAL_TIM_IRQHandler(&htim1);
 800052c:	480a      	ldr	r0, [pc, #40]	; (8000558 <TIM1_UP_TIM10_IRQHandler+0x80>)
 800052e:	f004 f96e 	bl	800480e <HAL_TIM_IRQHandler>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	20000048 	.word	0x20000048
 8000540:	cccccccd 	.word	0xcccccccd
 8000544:	20000270 	.word	0x20000270
 8000548:	2000004c 	.word	0x2000004c
 800054c:	20000250 	.word	0x20000250
 8000550:	2000002c 	.word	0x2000002c
 8000554:	40020400 	.word	0x40020400
 8000558:	20000200 	.word	0x20000200

0800055c <getADCValue>:



uint16_t 	getADCValue(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	uint16_t adcValHandle = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <getADCValue+0x34>)
 8000568:	f002 f8c0 	bl	80026ec <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100);
 800056c:	2164      	movs	r1, #100	; 0x64
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <getADCValue+0x34>)
 8000570:	f002 f9a3 	bl	80028ba <HAL_ADC_PollForConversion>

	adcValHandle = HAL_ADC_GetValue(&hadc1);
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <getADCValue+0x34>)
 8000576:	f002 fa2b 	bl	80029d0 <HAL_ADC_GetValue>
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1);
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <getADCValue+0x34>)
 8000580:	f002 f968 	bl	8002854 <HAL_ADC_Stop>

	return adcValHandle;
 8000584:	88fb      	ldrh	r3, [r7, #6]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000160 	.word	0x20000160

08000594 <applicationInit>:



void		applicationInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	protocol.ops = ops;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <applicationInit+0x40>)
 800059a:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <applicationInit+0x44>)
 800059c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80005a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    protocol.ops.EEM_INIT(&protocol.obj);
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <applicationInit+0x40>)
 80005a8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <applicationInit+0x40>)
 80005ae:	4798      	blx	r3

    /* Send Test Data */
    memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 80005b0:	2208      	movs	r2, #8
 80005b2:	490a      	ldr	r1, [pc, #40]	; (80005dc <applicationInit+0x48>)
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <applicationInit+0x4c>)
 80005b6:	f004 fceb 	bl	8004f90 <memcpy>
    protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <applicationInit+0x40>)
 80005bc:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 80005c0:	61da      	str	r2, [r3, #28]
    protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <applicationInit+0x40>)
 80005c4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <applicationInit+0x50>)
 80005cc:	4798      	blx	r3

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	08004fec 	.word	0x08004fec
 80005dc:	08004fd4 	.word	0x08004fd4
 80005e0:	2000004c 	.word	0x2000004c
 80005e4:	20000048 	.word	0x20000048

080005e8 <applicationMAIN>:



void applicationMAIN(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	applicationInit();
 80005ec:	f7ff ffd2 	bl	8000594 <applicationInit>

	while(1)
	{
		BCM_MSG.Message08.SPN.MS1_Speed = (uint32_t)getADCValue();
 80005f0:	f7ff ffb4 	bl	800055c <getADCValue>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <applicationMAIN+0x18>)
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
 80005fc:	e7f8      	b.n	80005f0 <applicationMAIN+0x8>
 80005fe:	bf00      	nop
 8000600:	20000250 	.word	0x20000250

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f001 ffba 	bl	8002580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f94c 	bl	80008ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000614:	f000 f872 	bl	80006fc <MX_ADC1_Init>
  MX_SPI1_Init();
 8000618:	f000 f8c2 	bl	80007a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800061c:	f000 f8f6 	bl	800080c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  applicationMAIN();
 8000620:	f7ff ffe2 	bl	80005e8 <applicationMAIN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x20>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fcb8 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemClock_Config+0xd0>)
 8000676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a0:	2354      	movs	r3, #84	; 0x54
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe83 	bl	80033bc <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006bc:	f000 f95c 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f8e5 	bl	80038ac <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f000 f946 	bl	8000978 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0x98>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_ADC1_Init+0x98>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC1_Init+0xa0>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ADC1_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC1_Init+0x98>)
 800075e:	f001 ff81 	bl	8002664 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f906 	bl	8000978 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0x98>)
 800077e:	f002 f935 	bl	80029ec <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 f8f6 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000160 	.word	0x20000160
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f003 fa07 	bl	8003c04 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f8bc 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001a8 	.word	0x200001a8
 8000808:	40013000 	.word	0x40013000

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM1_Init+0x98>)
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <MX_TIM1_Init+0x9c>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000830:	f242 720f 	movw	r2, #9999	; 0x270f
 8000834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM1_Init+0x98>)
 800083e:	2209      	movs	r2, #9
 8000840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_TIM1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000856:	f003 ff8b 	bl	8004770 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 f88a 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_TIM1_Init+0x98>)
 8000872:	f004 f8d4 	bl	8004a1e <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800087c:	f000 f87c 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM1_Init+0x98>)
 800088e:	f004 fad9 	bl	8004e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000898:	f000 f86e 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000200 	.word	0x20000200
 80008a8:	40010000 	.word	0x40010000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0xc0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0xc0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_GPIO_Init+0xc0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_GPIO_Init+0xc0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <MX_GPIO_Init+0xc0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_GPIO_Init+0xc0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_GPIO_Init+0xc0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1a      	ldr	r2, [pc, #104]	; (800096c <MX_GPIO_Init+0xc0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_GPIO_Init+0xc0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2110      	movs	r1, #16
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_GPIO_Init+0xc4>)
 800091c:	f002 fd1a 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0xc8>)
 8000926:	f002 fd15 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800092a:	2310      	movs	r3, #16
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0xc4>)
 8000942:	f002 fb83 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 8000946:	2304      	movs	r3, #4
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0xc8>)
 800095e:	f002 fb75 	bl	800304c <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40020400 	.word	0x40020400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_ADC_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d127      	bne.n	8000a46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 8000a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_ADC_MspInit+0x80>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_ADC_MspInit+0x84>)
 8000a42:	f002 fb03 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012000 	.word	0x40012000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_SPI_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23e0      	movs	r3, #224	; 0xe0
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	f002 fabb 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013000 	.word	0x40013000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_TIM_Base_MspInit+0x48>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d115      	bne.n	8000b2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_Base_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2019      	movs	r0, #25
 8000b20:	f002 fa5d 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b24:	2019      	movs	r0, #25
 8000b26:	f002 fa76 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010000 	.word	0x40010000
 8000b38:	40023800 	.word	0x40023800

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f001 fd4c 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f004 f9b1 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fd0d 	bl	8000604 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	20000304 	.word	0x20000304

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>

08000c06 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b088      	sub	sp, #32
 8000c0a:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000c10:	2300      	movs	r3, #0
 8000c12:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000c30:	2300      	movs	r3, #0
 8000c32:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000c40:	2308      	movs	r3, #8
 8000c42:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000c44:	2300      	movs	r3, #0
 8000c46:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000c64:	2300      	movs	r3, #0
 8000c66:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000c80:	2308      	movs	r3, #8
 8000c82:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000c84:	2300      	movs	r3, #0
 8000c86:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000c8c:	f001 fac2 	bl	8002214 <MCP2515_Initialize>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <CANSPI_Initialize+0x9c>
    return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e060      	b.n	8000d64 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000ca2:	f001 fad9 	bl	8002258 <MCP2515_SetConfigMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <CANSPI_Initialize+0xb2>
    return -2;
 8000cb2:	f06f 0301 	mvn.w	r3, #1
 8000cb6:	e055      	b.n	8000d64 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2123      	movs	r1, #35	; 0x23
 8000cbe:	2020      	movs	r0, #32
 8000cc0:	f001 fb6e 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2127      	movs	r1, #39	; 0x27
 8000cca:	2024      	movs	r0, #36	; 0x24
 8000ccc:	f001 fb68 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f001 fb61 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f001 fb5a 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	210b      	movs	r1, #11
 8000cf4:	2008      	movs	r0, #8
 8000cf6:	f001 fb53 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	461a      	mov	r2, r3
 8000d00:	2113      	movs	r1, #19
 8000d02:	2010      	movs	r0, #16
 8000d04:	f001 fb4c 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2117      	movs	r1, #23
 8000d10:	2014      	movs	r0, #20
 8000d12:	f001 fb45 	bl	80023a0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	211b      	movs	r1, #27
 8000d1e:	2018      	movs	r0, #24
 8000d20:	f001 fb3e 	bl	80023a0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000d24:	2104      	movs	r1, #4
 8000d26:	2060      	movs	r0, #96	; 0x60
 8000d28:	f001 fb16 	bl	8002358 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2070      	movs	r0, #112	; 0x70
 8000d30:	f001 fb12 	bl	8002358 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000d34:	2100      	movs	r1, #0
 8000d36:	202a      	movs	r0, #42	; 0x2a
 8000d38:	f001 fb0e 	bl	8002358 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000d3c:	21e5      	movs	r1, #229	; 0xe5
 8000d3e:	2029      	movs	r0, #41	; 0x29
 8000d40:	f001 fb0a 	bl	8002358 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000d44:	2183      	movs	r1, #131	; 0x83
 8000d46:	2028      	movs	r0, #40	; 0x28
 8000d48:	f001 fb06 	bl	8002358 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000d4c:	f001 faa2 	bl	8002294 <MCP2515_SetNormalMode>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f083 0301 	eor.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <CANSPI_Initialize+0x15c>
    return -3;
 8000d5c:	f06f 0302 	mvn.w	r3, #2
 8000d60:	e000      	b.n	8000d64 <CANSPI_Initialize+0x15e>

  return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000d8a:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000d90:	f001 fb74 	bl	800247c <MCP2515_ReadStatus>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <CANSPI_Transmit+0xf0>)
 8000d9a:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <CANSPI_Transmit+0xf0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d116      	bne.n	8000dd8 <CANSPI_Transmit+0x6c>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000db6:	4619      	mov	r1, r3
 8000db8:	f000 f92b 	bl	8001012 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795a      	ldrb	r2, [r3, #5]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3306      	adds	r3, #6
 8000dc4:	4924      	ldr	r1, [pc, #144]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000dc6:	2040      	movs	r0, #64	; 0x40
 8000dc8:	f001 fb14 	bl	80023f4 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000dcc:	2081      	movs	r0, #129	; 0x81
 8000dce:	f001 fb3b 	bl	8002448 <MCP2515_RequestToSend>

    returnValue = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e03a      	b.n	8000e4e <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <CANSPI_Transmit+0xf0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d116      	bne.n	8000e14 <CANSPI_Transmit+0xa8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000df2:	4619      	mov	r1, r3
 8000df4:	f000 f90d 	bl	8001012 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	795a      	ldrb	r2, [r3, #5]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3306      	adds	r3, #6
 8000e00:	4915      	ldr	r1, [pc, #84]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000e02:	2042      	movs	r0, #66	; 0x42
 8000e04:	f001 faf6 	bl	80023f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000e08:	2082      	movs	r0, #130	; 0x82
 8000e0a:	f001 fb1d 	bl	8002448 <MCP2515_RequestToSend>

    returnValue = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e01c      	b.n	8000e4e <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <CANSPI_Transmit+0xf0>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d115      	bne.n	8000e4e <CANSPI_Transmit+0xe2>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f000 f8ef 	bl	8001012 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	795a      	ldrb	r2, [r3, #5]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3306      	adds	r3, #6
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <CANSPI_Transmit+0xec>)
 8000e3e:	2044      	movs	r0, #68	; 0x44
 8000e40:	f001 fad8 	bl	80023f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000e44:	2084      	movs	r0, #132	; 0x84
 8000e46:	f001 faff 	bl	8002448 <MCP2515_RequestToSend>

    returnValue = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000024c 	.word	0x2000024c
 8000e5c:	20000248 	.word	0x20000248

08000e60 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000e6c:	f001 fb22 	bl	80024b4 <MCP2515_GetRxStatus>
 8000e70:	4603      	mov	r3, r0
 8000e72:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000e74:	7b3b      	ldrb	r3, [r7, #12]
 8000e76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d068      	beq.n	8000f52 <CANSPI_Receive+0xf2>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
 8000e82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b40      	cmp	r3, #64	; 0x40
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	7b3b      	ldrb	r3, [r7, #12]
 8000e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2090      	movs	r0, #144	; 0x90
 8000eb6:	f001 fa2d 	bl	8002314 <MCP2515_ReadRxSequence>
 8000eba:	e00c      	b.n	8000ed6 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000ebc:	7b3b      	ldrb	r3, [r7, #12]
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b80      	cmp	r3, #128	; 0x80
 8000ec6:	d106      	bne.n	8000ed6 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	220d      	movs	r2, #13
 8000ece:	4619      	mov	r1, r3
 8000ed0:	2094      	movs	r0, #148	; 0x94
 8000ed2:	f001 fa1f 	bl	8002314 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	f003 0318 	and.w	r3, r3, #24
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d10d      	bne.n	8000efe <CANSPI_Receive+0x9e>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000ee8:	7cb8      	ldrb	r0, [r7, #18]
 8000eea:	7cf9      	ldrb	r1, [r7, #19]
 8000eec:	7c3a      	ldrb	r2, [r7, #16]
 8000eee:	7c7b      	ldrb	r3, [r7, #17]
 8000ef0:	f000 f834 	bl	8000f5c <convertReg2ExtendedCANid>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8c3 2001 	str.w	r2, [r3, #1]
 8000efc:	e00c      	b.n	8000f18 <CANSPI_Receive+0xb8>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000f04:	7c3b      	ldrb	r3, [r7, #16]
 8000f06:	7c7a      	ldrb	r2, [r7, #17]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f864 	bl	8000fd8 <convertReg2StandardCANid>
 8000f10:	4602      	mov	r2, r0
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f8c3 2001 	str.w	r2, [r3, #1]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000f18:	7d3a      	ldrb	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	715a      	strb	r2, [r3, #5]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000f1e:	7d7a      	ldrb	r2, [r7, #21]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	719a      	strb	r2, [r3, #6]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000f24:	7dba      	ldrb	r2, [r7, #22]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	71da      	strb	r2, [r3, #7]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000f2a:	7dfa      	ldrb	r2, [r7, #23]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000f30:	7e3a      	ldrb	r2, [r7, #24]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000f36:	7e7a      	ldrb	r2, [r7, #25]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000f3c:	7eba      	ldrb	r2, [r7, #26]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000f42:	7efa      	ldrb	r2, [r7, #27]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000f48:	7f3a      	ldrb	r2, [r7, #28]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	735a      	strb	r2, [r3, #13]

    returnValue = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000f5c:	b490      	push	{r4, r7}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	460b      	mov	r3, r1
 8000f74:	717b      	strb	r3, [r7, #5]
 8000f76:	4613      	mov	r3, r2
 8000f78:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000f82:	793b      	ldrb	r3, [r7, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000f8a:	793b      	ldrb	r3, [r7, #4]
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4413      	add	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000fcc:	697b      	ldr	r3, [r7, #20]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc90      	pop	{r4, r7}
 8000fd6:	4770      	bx	lr

08000fd8 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	095b      	lsrs	r3, r3, #5
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001004:	68fb      	ldr	r3, [r7, #12]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8001012:	b480      	push	{r7}
 8001014:	b087      	sub	sp, #28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	460b      	mov	r3, r1
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d12e      	bne.n	8001088 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f023 031f 	bic.w	r3, r3, #31
 800105e:	b2da      	uxtb	r2, r3
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	4413      	add	r3, r2
 8001064:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	3308      	adds	r3, #8
 800106a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	f023 0314 	bic.w	r3, r3, #20
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8001086:	e013      	b.n	80010b0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	param->ringBuffer.tail = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	param->ringBuffer.full = EEM_FALSE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

#if defined(SPI2CAN_Protocol)

	EEM_U8 ret;

	ret = CANSPI_Initialize();
 80010e0:	f7ff fd91 	bl	8000c06 <CANSPI_Initialize>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73bb      	strb	r3, [r7, #14]
#endif

#endif

#if defined(BCM_MODULE)
	if( EEM_FILTER_BCM( param ) != EEM_EOK ) return EEM_ERROR;
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 ffa7 	bl	800203c <EEM_FILTER_BCM>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <EEM_INIT+0x3c>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <EEM_INIT+0x3e>

#endif

#endif

	return result;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001104:	b490      	push	{r4, r7}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e011      	b.n	800113c <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001120:	461c      	mov	r4, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	6839      	ldr	r1, [r7, #0]
 8001126:	440a      	add	r2, r1
 8001128:	7910      	ldrb	r0, [r2, #4]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	00e2      	lsls	r2, r4, #3
 800112e:	440a      	add	r2, r1
 8001130:	4413      	add	r3, r2
 8001132:	4602      	mov	r2, r0
 8001134:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b07      	cmp	r3, #7
 8001140:	d9ea      	bls.n	8001118 <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001148:	461a      	mov	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3228      	adds	r2, #40	; 0x28
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <EEM_PUSH+0xa8>)
 800116e:	fb83 1302 	smull	r1, r3, r3, r2
 8001172:	10d9      	asrs	r1, r3, #3
 8001174:	17d3      	asrs	r3, r2, #31
 8001176:	1ac9      	subs	r1, r1, r3
 8001178:	460b      	mov	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	1ad1      	subs	r1, r2, r3
 8001182:	b2ca      	uxtb	r2, r1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001196:	429a      	cmp	r2, r3
 8001198:	d103      	bne.n	80011a2 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc90      	pop	{r4, r7}
 80011aa:	4770      	bx	lr
 80011ac:	66666667 	.word	0x66666667

080011b0 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e011      	b.n	80011e8 <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80011ca:	4619      	mov	r1, r3
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	00c9      	lsls	r1, r1, #3
 80011d4:	4401      	add	r1, r0
 80011d6:	440a      	add	r2, r1
 80011d8:	7811      	ldrb	r1, [r2, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d9ea      	bls.n	80011c4 <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3228      	adds	r2, #40	; 0x28
 80011fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <EEM_POP+0x9c>)
 800121a:	fb83 1302 	smull	r1, r3, r3, r2
 800121e:	10d9      	asrs	r1, r3, #3
 8001220:	17d3      	asrs	r3, r2, #31
 8001222:	1ac9      	subs	r1, r1, r3
 8001224:	460b      	mov	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	1ad1      	subs	r1, r2, r3
 800122e:	b2ca      	uxtb	r2, r1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	66666667 	.word	0x66666667

08001250 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	uCAN_MSG txPacked;
	txPacked.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B ;
 800125e:	2302      	movs	r3, #2
 8001260:	723b      	strb	r3, [r7, #8]
	txPacked.frame.dlc	  = EEM_MAX_SIZE;
 8001262:	2308      	movs	r3, #8
 8001264:	737b      	strb	r3, [r7, #13]
	txPacked.frame.id	  = param->EXTENDED_ID.identifier;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8c7 3009 	str.w	r3, [r7, #9]

	memcpy(&txPacked.frame.data0 , &param->DATA[0] , EEM_MAX_SIZE );
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1d19      	adds	r1, r3, #4
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	3306      	adds	r3, #6
 8001278:	2208      	movs	r2, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fe88 	bl	8004f90 <memcpy>

	CANSPI_Transmit(&txPacked);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd71 	bl	8000d6c <CANSPI_Transmit>
	
	



	return result;
 800128a:	7dfb      	ldrb	r3, [r7, #23]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	//@That library used polling method
	if( CANSPI_Receive(rxPacked) )
 80012a4:	68b8      	ldr	r0, [r7, #8]
 80012a6:	f7ff fddb 	bl	8000e60 <CANSPI_Receive>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d012      	beq.n	80012d6 <EEM_RX+0x42>
	{
		memcpy(&param->DATA[0] , &rxPacked->frame.data0 , EEM_MAX_SIZE  );
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1d18      	adds	r0, r3, #4
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3306      	adds	r3, #6
 80012b8:	2208      	movs	r2, #8
 80012ba:	4619      	mov	r1, r3
 80012bc:	f003 fe68 	bl	8004f90 <memcpy>
		param->EXTENDED_ID.identifier = rxPacked->frame.id ;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <EEM_RX+0x4c>)
 80012ce:	f7ff ff19 	bl	8001104 <EEM_PUSH>

	return result;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	e000      	b.n	80012d8 <EEM_RX+0x44>
		return EEM_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000005c 	.word	0x2000005c

080012e4 <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	EEM_ERR_T 	   result 	= EEM_EOK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol)) || (defined(STM32H750xx) && defined(FDCAN_Protocol))
	//bxCAN ve FDCAN IRQ Handler'da recv yapmaktadir.
#else

	uCAN_MSG rxHandle = {0};
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	819a      	strh	r2, [r3, #12]

	result = EEM_RX(param, &rxHandle, NULL);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffc4 	bl	8001294 <EEM_RX>
 800130c:	4603      	mov	r3, r0
 800130e:	75fb      	strb	r3, [r7, #23]
	if( result != EEM_EOK ) return result;
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <EEM_PERIODIC+0x40>
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	f000 be6b 	b.w	8001ff2 <EEM_PERIODIC+0xd0e>

#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	48a4      	ldr	r0, [pc, #656]	; (80015b0 <EEM_PERIODIC+0x2cc>)
 8001320:	f7ff ff46 	bl	80011b0 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 8001324:	48a2      	ldr	r0, [pc, #648]	; (80015b0 <EEM_PERIODIC+0x2cc>)
 8001326:	f000 fe6d 	bl	8002004 <EEM_IS_EMPTY>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f5      	beq.n	800131c <EEM_PERIODIC+0x38>
		                                              param->DATA[0] );
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	3b01      	subs	r3, #1
 8001336:	2b24      	cmp	r3, #36	; 0x24
 8001338:	f200 865a 	bhi.w	8001ff0 <EEM_PERIODIC+0xd0c>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <EEM_PERIODIC+0x60>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	080013d9 	.word	0x080013d9
 8001348:	080015b9 	.word	0x080015b9
 800134c:	08001ff1 	.word	0x08001ff1
 8001350:	08001ff1 	.word	0x08001ff1
 8001354:	08001ff1 	.word	0x08001ff1
 8001358:	08001ff1 	.word	0x08001ff1
 800135c:	08001727 	.word	0x08001727
 8001360:	08001779 	.word	0x08001779
 8001364:	080017c1 	.word	0x080017c1
 8001368:	08001ff1 	.word	0x08001ff1
 800136c:	08001ff1 	.word	0x08001ff1
 8001370:	08001ff1 	.word	0x08001ff1
 8001374:	08001ff1 	.word	0x08001ff1
 8001378:	08001ff1 	.word	0x08001ff1
 800137c:	08001ff1 	.word	0x08001ff1
 8001380:	08001813 	.word	0x08001813
 8001384:	08001ff1 	.word	0x08001ff1
 8001388:	08001ff1 	.word	0x08001ff1
 800138c:	08001ff1 	.word	0x08001ff1
 8001390:	08001ff1 	.word	0x08001ff1
 8001394:	08001ff1 	.word	0x08001ff1
 8001398:	08001ff1 	.word	0x08001ff1
 800139c:	08001ff1 	.word	0x08001ff1
 80013a0:	0800185d 	.word	0x0800185d
 80013a4:	08001b05 	.word	0x08001b05
 80013a8:	08001ff1 	.word	0x08001ff1
 80013ac:	08001ff1 	.word	0x08001ff1
 80013b0:	08001ff1 	.word	0x08001ff1
 80013b4:	08001ff1 	.word	0x08001ff1
 80013b8:	08001ff1 	.word	0x08001ff1
 80013bc:	08001ff1 	.word	0x08001ff1
 80013c0:	08001dad 	.word	0x08001dad
 80013c4:	08001e89 	.word	0x08001e89
 80013c8:	08001ecf 	.word	0x08001ecf
 80013cc:	08001fab 	.word	0x08001fab
 80013d0:	08001ff1 	.word	0x08001ff1
 80013d4:	08001ff1 	.word	0x08001ff1
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		BCM_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4a74      	ldr	r2, [pc, #464]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80013e4:	7913      	ldrb	r3, [r2, #4]
 80013e6:	f361 0300 	bfi	r3, r1, #0, #1
 80013ea:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	105b      	asrs	r3, r3, #1
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2d9      	uxtb	r1, r3
 80013f8:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80013fa:	7913      	ldrb	r3, [r2, #4]
 80013fc:	f361 0341 	bfi	r3, r1, #1, #1
 8001400:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	791b      	ldrb	r3, [r3, #4]
 8001406:	109b      	asrs	r3, r3, #2
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001410:	7913      	ldrb	r3, [r2, #4]
 8001412:	f361 0382 	bfi	r3, r1, #2, #1
 8001416:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	10db      	asrs	r3, r3, #3
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b2d9      	uxtb	r1, r3
 8001424:	4a63      	ldr	r2, [pc, #396]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001426:	7913      	ldrb	r3, [r2, #4]
 8001428:	f361 03c3 	bfi	r3, r1, #3, #1
 800142c:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	b2d9      	uxtb	r1, r3
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 800143c:	7913      	ldrb	r3, [r2, #4]
 800143e:	f361 1304 	bfi	r3, r1, #4, #1
 8001442:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	115b      	asrs	r3, r3, #5
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001452:	7913      	ldrb	r3, [r2, #4]
 8001454:	f361 1345 	bfi	r3, r1, #5, #1
 8001458:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	119b      	asrs	r3, r3, #6
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	b2d9      	uxtb	r1, r3
 8001466:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001468:	7913      	ldrb	r3, [r2, #4]
 800146a:	f361 1386 	bfi	r3, r1, #6, #1
 800146e:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	09db      	lsrs	r3, r3, #7
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	b2d9      	uxtb	r1, r3
 800147e:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001480:	7913      	ldrb	r3, [r2, #4]
 8001482:	f361 13c7 	bfi	r3, r1, #7, #1
 8001486:	7113      	strb	r3, [r2, #4]
		BCM_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	795b      	ldrb	r3, [r3, #5]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	b2d9      	uxtb	r1, r3
 8001492:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001494:	7953      	ldrb	r3, [r2, #5]
 8001496:	f361 0300 	bfi	r3, r1, #0, #1
 800149a:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	795b      	ldrb	r3, [r3, #5]
 80014a0:	105b      	asrs	r3, r3, #1
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80014aa:	7953      	ldrb	r3, [r2, #5]
 80014ac:	f361 0341 	bfi	r3, r1, #1, #1
 80014b0:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80014c0:	7953      	ldrb	r3, [r2, #5]
 80014c2:	f361 0382 	bfi	r3, r1, #2, #1
 80014c6:	7153      	strb	r3, [r2, #5]
		BCM_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	10db      	asrs	r3, r3, #3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2d9      	uxtb	r1, r3
 80014d4:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80014d6:	7953      	ldrb	r3, [r2, #5]
 80014d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80014dc:	7153      	strb	r3, [r2, #5]

		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	795b      	ldrb	r3, [r3, #5]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	b2da      	uxtb	r2, r3
												   	    		(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	799b      	ldrb	r3, [r3, #6]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_pressureVal_u8 	= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80014f4:	719a      	strb	r2, [r3, #6]

		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	799b      	ldrb	r3, [r3, #6]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	b2da      	uxtb	r2, r3
													 			(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	79db      	ldrb	r3, [r3, #7]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorTempVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001506:	4313      	orrs	r3, r2
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 800150c:	71da      	strb	r2, [r3, #7]

		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	79db      	ldrb	r3, [r3, #7]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  		(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7a1b      	ldrb	r3, [r3, #8]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
		BCM_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 = (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 800151e:	4313      	orrs	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001524:	721a      	strb	r2, [r3, #8]

		BCM_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a1b      	ldrb	r3, [r3, #8]
 800152a:	111b      	asrs	r3, r3, #4
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001534:	7a53      	ldrb	r3, [r2, #9]
 8001536:	f361 0300 	bfi	r3, r1, #0, #1
 800153a:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7a1b      	ldrb	r3, [r3, #8]
 8001540:	115b      	asrs	r3, r3, #5
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2d9      	uxtb	r1, r3
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 800154a:	7a53      	ldrb	r3, [r2, #9]
 800154c:	f361 0341 	bfi	r3, r1, #1, #1
 8001550:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 	= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7a1b      	ldrb	r3, [r3, #8]
 8001556:	119b      	asrs	r3, r3, #6
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b2d9      	uxtb	r1, r3
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001560:	7a53      	ldrb	r3, [r2, #9]
 8001562:	f361 0382 	bfi	r3, r1, #2, #1
 8001566:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewHour_u8 		= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7a1b      	ldrb	r3, [r3, #8]
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	b2d9      	uxtb	r1, r3
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 8001578:	7a53      	ldrb	r3, [r2, #9]
 800157a:	f361 03c3 	bfi	r3, r1, #3, #1
 800157e:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewDay_u8 		= (EEM_U8)(   param->DATA[5] & 0x01 );
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7a5b      	ldrb	r3, [r3, #9]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 800158c:	7a53      	ldrb	r3, [r2, #9]
 800158e:	f361 1304 	bfi	r3, r1, #4, #1
 8001592:	7253      	strb	r3, [r2, #9]
		BCM_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 		= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7a5b      	ldrb	r3, [r3, #9]
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	b2d9      	uxtb	r1, r3
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <EEM_PERIODIC+0x2d0>)
 80015a2:	7a53      	ldrb	r3, [r2, #9]
 80015a4:	f361 1345 	bfi	r3, r1, #5, #1
 80015a8:	7253      	strb	r3, [r2, #9]


	break;
 80015aa:	f000 bd21 	b.w	8001ff0 <EEM_PERIODIC+0xd0c>
 80015ae:	bf00      	nop
 80015b0:	2000005c 	.word	0x2000005c
 80015b4:	20000250 	.word	0x20000250

	case MESSAGE02 :


		BCM_MSG.Message02.SPN.HVAC_fireVal				= (EEM_U8)( param->DATA[0] & 0x0F );
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4aa5      	ldr	r2, [pc, #660]	; (8001858 <EEM_PERIODIC+0x574>)
 80015c4:	7d13      	ldrb	r3, [r2, #20]
 80015c6:	f361 0303 	bfi	r3, r1, #0, #4
 80015ca:	7513      	strb	r3, [r2, #20]
		BCM_MSG.Message02.SPN.HVAC_smokeVal 			= (EEM_U8)(( param->DATA[0] & 0xF0 ) >> 4 );
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	791b      	ldrb	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	b2d9      	uxtb	r1, r3
 80015da:	4a9f      	ldr	r2, [pc, #636]	; (8001858 <EEM_PERIODIC+0x574>)
 80015dc:	7d13      	ldrb	r3, [r2, #20]
 80015de:	f361 1307 	bfi	r3, r1, #4, #4
 80015e2:	7513      	strb	r3, [r2, #20]

		BCM_MSG.Message02.SPN.HVAC_windPressure1 		= ( param->DATA[0] );
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	791a      	ldrb	r2, [r3, #4]
 80015e8:	4b9b      	ldr	r3, [pc, #620]	; (8001858 <EEM_PERIODIC+0x574>)
 80015ea:	755a      	strb	r2, [r3, #21]
		BCM_MSG.Message02.SPN.HVAC_windPressure2 		= ( param->DATA[1] );
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	795a      	ldrb	r2, [r3, #5]
 80015f0:	4b99      	ldr	r3, [pc, #612]	; (8001858 <EEM_PERIODIC+0x574>)
 80015f2:	759a      	strb	r2, [r3, #22]
		BCM_MSG.Message02.SPN.HVAC_leftFrontWheel_xy 	= ( param->DATA[2] );
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	799a      	ldrb	r2, [r3, #6]
 80015f8:	4b97      	ldr	r3, [pc, #604]	; (8001858 <EEM_PERIODIC+0x574>)
 80015fa:	75da      	strb	r2, [r3, #23]
		BCM_MSG.Message02.SPN.HVAC_rightFrontWheel_xy 	= ( param->DATA[3] );
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	79da      	ldrb	r2, [r3, #7]
 8001600:	4b95      	ldr	r3, [pc, #596]	; (8001858 <EEM_PERIODIC+0x574>)
 8001602:	761a      	strb	r2, [r3, #24]
		BCM_MSG.Message02.SPN.HVAC_status00_u1 	        = ( param->DATA[4] & 0x01 );
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	b2d9      	uxtb	r1, r3
 800160e:	4a92      	ldr	r2, [pc, #584]	; (8001858 <EEM_PERIODIC+0x574>)
 8001610:	7e53      	ldrb	r3, [r2, #25]
 8001612:	f361 0300 	bfi	r3, r1, #0, #1
 8001616:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status01_u1 	        = (( param->DATA[4] & 0x02 ) >> 1 );
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	105b      	asrs	r3, r3, #1
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	b2d9      	uxtb	r1, r3
 8001624:	4a8c      	ldr	r2, [pc, #560]	; (8001858 <EEM_PERIODIC+0x574>)
 8001626:	7e53      	ldrb	r3, [r2, #25]
 8001628:	f361 0341 	bfi	r3, r1, #1, #1
 800162c:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status02_u1 	        = (( param->DATA[4] & 0x04 ) >> 2 );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7a1b      	ldrb	r3, [r3, #8]
 8001632:	109b      	asrs	r3, r3, #2
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	b2d9      	uxtb	r1, r3
 800163a:	4a87      	ldr	r2, [pc, #540]	; (8001858 <EEM_PERIODIC+0x574>)
 800163c:	7e53      	ldrb	r3, [r2, #25]
 800163e:	f361 0382 	bfi	r3, r1, #2, #1
 8001642:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status03_u1 	        = (( param->DATA[4] & 0x08 ) >> 3 );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7a1b      	ldrb	r3, [r3, #8]
 8001648:	10db      	asrs	r3, r3, #3
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	4a81      	ldr	r2, [pc, #516]	; (8001858 <EEM_PERIODIC+0x574>)
 8001652:	7e53      	ldrb	r3, [r2, #25]
 8001654:	f361 03c3 	bfi	r3, r1, #3, #1
 8001658:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status04_u1 	        = (( param->DATA[4] & 0x10 ) >> 4 );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7a1b      	ldrb	r3, [r3, #8]
 800165e:	111b      	asrs	r3, r3, #4
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <EEM_PERIODIC+0x574>)
 8001668:	7e53      	ldrb	r3, [r2, #25]
 800166a:	f361 1304 	bfi	r3, r1, #4, #1
 800166e:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status05_u1 	        = (( param->DATA[4] & 0x20 ) >> 5 );
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7a1b      	ldrb	r3, [r3, #8]
 8001674:	115b      	asrs	r3, r3, #5
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2d9      	uxtb	r1, r3
 800167c:	4a76      	ldr	r2, [pc, #472]	; (8001858 <EEM_PERIODIC+0x574>)
 800167e:	7e53      	ldrb	r3, [r2, #25]
 8001680:	f361 1345 	bfi	r3, r1, #5, #1
 8001684:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status06_u1 	        = (( param->DATA[4] & 0x40 ) >> 6 );
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7a1b      	ldrb	r3, [r3, #8]
 800168a:	119b      	asrs	r3, r3, #6
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a71      	ldr	r2, [pc, #452]	; (8001858 <EEM_PERIODIC+0x574>)
 8001694:	7e53      	ldrb	r3, [r2, #25]
 8001696:	f361 1386 	bfi	r3, r1, #6, #1
 800169a:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_status07_u1 	        = (( param->DATA[4] & 0x80 ) >> 7 );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7a1b      	ldrb	r3, [r3, #8]
 80016a0:	09db      	lsrs	r3, r3, #7
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	4a6b      	ldr	r2, [pc, #428]	; (8001858 <EEM_PERIODIC+0x574>)
 80016ac:	7e53      	ldrb	r3, [r2, #25]
 80016ae:	f361 13c7 	bfi	r3, r1, #7, #1
 80016b2:	7653      	strb	r3, [r2, #25]
		BCM_MSG.Message02.SPN.HVAC_Hgear_cmd 		    = (  param->DATA[5] & 0x07 );
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7a5b      	ldrb	r3, [r3, #9]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a66      	ldr	r2, [pc, #408]	; (8001858 <EEM_PERIODIC+0x574>)
 80016c0:	7e93      	ldrb	r3, [r2, #26]
 80016c2:	f361 0302 	bfi	r3, r1, #0, #3
 80016c6:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_Gear_cmd 		    = (( param->DATA[5] & 0x18 ) >> 3 );
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7a5b      	ldrb	r3, [r3, #9]
 80016cc:	10db      	asrs	r3, r3, #3
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	4a60      	ldr	r2, [pc, #384]	; (8001858 <EEM_PERIODIC+0x574>)
 80016d6:	7e93      	ldrb	r3, [r2, #26]
 80016d8:	f361 03c4 	bfi	r3, r1, #3, #2
 80016dc:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit05_u1 	        = (( param->DATA[5] & 0x20 ) >> 5 );
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7a5b      	ldrb	r3, [r3, #9]
 80016e2:	115b      	asrs	r3, r3, #5
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	b2d9      	uxtb	r1, r3
 80016ea:	4a5b      	ldr	r2, [pc, #364]	; (8001858 <EEM_PERIODIC+0x574>)
 80016ec:	7e93      	ldrb	r3, [r2, #26]
 80016ee:	f361 1345 	bfi	r3, r1, #5, #1
 80016f2:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit06_u1 	        = (( param->DATA[5] & 0x40 ) >> 6 );
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7a5b      	ldrb	r3, [r3, #9]
 80016f8:	119b      	asrs	r3, r3, #6
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	b2d9      	uxtb	r1, r3
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <EEM_PERIODIC+0x574>)
 8001702:	7e93      	ldrb	r3, [r2, #26]
 8001704:	f361 1386 	bfi	r3, r1, #6, #1
 8001708:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message02.SPN.HVAC_cmdbit07_u1 	        = (( param->DATA[5] & 0x80 ) >> 7 );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7a5b      	ldrb	r3, [r3, #9]
 800170e:	09db      	lsrs	r3, r3, #7
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	b2d9      	uxtb	r1, r3
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <EEM_PERIODIC+0x574>)
 800171a:	7e93      	ldrb	r3, [r2, #26]
 800171c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001720:	7693      	strb	r3, [r2, #26]



	break;
 8001722:	f000 bc65 	b.w	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE07 :

		BCM_MSG.Message07.SPN.MS1_rpm 		= param->DATA[0] ;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	791a      	ldrb	r2, [r3, #4]
 800172a:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <EEM_PERIODIC+0x574>)
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	795b      	ldrb	r3, [r3, #5]
 8001734:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	799b      	ldrb	r3, [r3, #6]
 800173a:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 800173c:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	79d2      	ldrb	r2, [r2, #7]
 8001742:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 8001744:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	7a12      	ldrb	r2, [r2, #8]
 800174a:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message07.SPN.MS1_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 800174c:	4313      	orrs	r3, r2
 800174e:	4a42      	ldr	r2, [pc, #264]	; (8001858 <EEM_PERIODIC+0x574>)
 8001750:	6253      	str	r3, [r2, #36]	; 0x24


		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7a5b      	ldrb	r3, [r3, #9]
 8001756:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7a9b      	ldrb	r3, [r3, #10]
 800175c:	b29b      	uxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
		BCM_MSG.Message07.SPN.MS1_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 8001762:	4313      	orrs	r3, r2
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <EEM_PERIODIC+0x574>)
 8001768:	851a      	strh	r2, [r3, #40]	; 0x28

		BCM_MSG.Message07.SPN.MS1_temp 		= param->DATA[7] ;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7ada      	ldrb	r2, [r3, #11]
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <EEM_PERIODIC+0x574>)
 8001770:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	break;
 8001774:	f000 bc3c 	b.w	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE08 :

		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	461a      	mov	r2, r3
													 (EEM_U32)( param->DATA[1] << 8  )   |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 8001784:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[2] << 16 )   |
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7992      	ldrb	r2, [r2, #6]
 800178a:	0412      	lsls	r2, r2, #16
													 (EEM_U32)( param->DATA[1] << 8  )   |
 800178c:	4313      	orrs	r3, r2
			                                         (EEM_U32)( param->DATA[3] << 24 )   );
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	79d2      	ldrb	r2, [r2, #7]
 8001792:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Speed  = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	 |
 8001794:	4313      	orrs	r3, r2
 8001796:	4a30      	ldr	r2, [pc, #192]	; (8001858 <EEM_PERIODIC+0x574>)
 8001798:	6313      	str	r3, [r2, #48]	; 0x30

		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a1b      	ldrb	r3, [r3, #8]
 800179e:	461a      	mov	r2, r3
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7a5b      	ldrb	r3, [r3, #9]
 80017a4:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 80017a6:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[6] << 16 )   |
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	7a92      	ldrb	r2, [r2, #10]
 80017ac:	0412      	lsls	r2, r2, #16
													 	 (EEM_U32)( param->DATA[5] << 8  )   |
 80017ae:	4313      	orrs	r3, r2
														 (EEM_U32)( param->DATA[7] << 24 )   );
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	7ad2      	ldrb	r2, [r2, #11]
 80017b4:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message08.SPN.MS1_Direction = (EEM_U32)( (EEM_U32)( param->DATA[4]	     )	 |
 80017b6:	4313      	orrs	r3, r2
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <EEM_PERIODIC+0x574>)
 80017ba:	6353      	str	r3, [r2, #52]	; 0x34

	break;
 80017bc:	f000 bc18 	b.w	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE09 :

		BCM_MSG.Message09.SPN.MS2_rpm 		= param->DATA[0] ;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	791a      	ldrb	r2, [r3, #4]
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <EEM_PERIODIC+0x574>)
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	795b      	ldrb	r3, [r3, #5]
 80017ce:	461a      	mov	r2, r3
														(EEM_U32)( param->DATA[2] << 8  )   |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	799b      	ldrb	r3, [r3, #6]
 80017d4:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80017d6:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[3] << 16 )   |
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	79d2      	ldrb	r2, [r2, #7]
 80017dc:	0412      	lsls	r2, r2, #16
														(EEM_U32)( param->DATA[2] << 8  )   |
 80017de:	4313      	orrs	r3, r2
														(EEM_U32)( param->DATA[4] << 24 )   );
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	7a12      	ldrb	r2, [r2, #8]
 80017e4:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message09.SPN.MS2_voltage 	= (EEM_U32)((EEM_U32)( param->DATA[1]	    )	|
 80017e6:	4313      	orrs	r3, r2
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <EEM_PERIODIC+0x574>)
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40


		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7a5b      	ldrb	r3, [r3, #9]
 80017f0:	b29a      	uxth	r2, r3
														(EEM_U16)( param->DATA[6] << 8  )   );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7a9b      	ldrb	r3, [r3, #10]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
		BCM_MSG.Message09.SPN.MS2_current 	= (EEM_U16)((EEM_U16)( param->DATA[5]	    )	|
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <EEM_PERIODIC+0x574>)
 8001802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		BCM_MSG.Message09.SPN.MS2_temp 		= param->DATA[7] ;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7ada      	ldrb	r2, [r3, #11]
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <EEM_PERIODIC+0x574>)
 800180c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	break;
 8001810:	e3ee      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE10 :

		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	461a      	mov	r2, r3
													  (EEM_U32)( param->DATA[1] << 8  )   |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800181e:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[2] << 16 )   |
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	7992      	ldrb	r2, [r2, #6]
 8001824:	0412      	lsls	r2, r2, #16
													  (EEM_U32)( param->DATA[1] << 8  )   |
 8001826:	4313      	orrs	r3, r2
			                                          (EEM_U32)( param->DATA[3] << 24 )   );
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	79d2      	ldrb	r2, [r2, #7]
 800182c:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	     )	  |
 800182e:	4313      	orrs	r3, r2
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <EEM_PERIODIC+0x574>)
 8001832:	64d3      	str	r3, [r2, #76]	; 0x4c

		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7a1b      	ldrb	r3, [r3, #8]
 8001838:	461a      	mov	r2, r3
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7a5b      	ldrb	r3, [r3, #9]
 800183e:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 8001840:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[6] << 16 )   |
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	7a92      	ldrb	r2, [r2, #10]
 8001846:	0412      	lsls	r2, r2, #16
													 	  (EEM_U32)( param->DATA[5] << 8  )   |
 8001848:	4313      	orrs	r3, r2
														  (EEM_U32)( param->DATA[7] << 24 )   );
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	7ad2      	ldrb	r2, [r2, #11]
 800184e:	0612      	lsls	r2, r2, #24
		BCM_MSG.Message10.SPN.MS2_Direction  = (EEM_U32)( (EEM_U32)( param->DATA[4]	      )	  |
 8001850:	4313      	orrs	r3, r2
 8001852:	4a01      	ldr	r2, [pc, #4]	; (8001858 <EEM_PERIODIC+0x574>)
 8001854:	6513      	str	r3, [r2, #80]	; 0x50

	break;
 8001856:	e3cb      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>
 8001858:	20000250 	.word	0x20000250

	case MESSAGE18 :

		BCM_MSG.Message18.SPN.MS1_warningFlag01 =  ( param->DATA[0] & 0x01 );
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	b2d9      	uxtb	r1, r3
 8001866:	4aa6      	ldr	r2, [pc, #664]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001868:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 800186c:	f361 0300 	bfi	r3, r1, #0, #1
 8001870:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	105b      	asrs	r3, r3, #1
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	b2d9      	uxtb	r1, r3
 8001880:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001882:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001886:	f361 0341 	bfi	r3, r1, #1, #1
 800188a:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	109b      	asrs	r3, r3, #2
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	b2d9      	uxtb	r1, r3
 800189a:	4a99      	ldr	r2, [pc, #612]	; (8001b00 <EEM_PERIODIC+0x81c>)
 800189c:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80018a0:	f361 0382 	bfi	r3, r1, #2, #1
 80018a4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	b2d9      	uxtb	r1, r3
 80018b4:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80018b6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80018ba:	f361 03c3 	bfi	r3, r1, #3, #1
 80018be:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	111b      	asrs	r3, r3, #4
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2d9      	uxtb	r1, r3
 80018ce:	4a8c      	ldr	r2, [pc, #560]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80018d0:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80018d4:	f361 1304 	bfi	r3, r1, #4, #1
 80018d8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	115b      	asrs	r3, r3, #5
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	b2d9      	uxtb	r1, r3
 80018e8:	4a85      	ldr	r2, [pc, #532]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80018ea:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80018ee:	f361 1345 	bfi	r3, r1, #5, #1
 80018f2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	119b      	asrs	r3, r3, #6
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	b2d9      	uxtb	r1, r3
 8001902:	4a7f      	ldr	r2, [pc, #508]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001904:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001908:	f361 1386 	bfi	r3, r1, #6, #1
 800190c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		BCM_MSG.Message18.SPN.MS1_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	09db      	lsrs	r3, r3, #7
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	4a78      	ldr	r2, [pc, #480]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001920:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8001924:	f361 13c7 	bfi	r3, r1, #7, #1
 8001928:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

		BCM_MSG.Message18.SPN.MS1_errorFlag01 =  ( param->DATA[1] & 0x01 );
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	795b      	ldrb	r3, [r3, #5]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001938:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 800193c:	f361 0300 	bfi	r3, r1, #0, #1
 8001940:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	795b      	ldrb	r3, [r3, #5]
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	b2d9      	uxtb	r1, r3
 8001950:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001952:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001956:	f361 0341 	bfi	r3, r1, #1, #1
 800195a:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	109b      	asrs	r3, r3, #2
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <EEM_PERIODIC+0x81c>)
 800196c:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 8001970:	f361 0382 	bfi	r3, r1, #2, #1
 8001974:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	795b      	ldrb	r3, [r3, #5]
 800197c:	10db      	asrs	r3, r3, #3
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	b2d9      	uxtb	r1, r3
 8001984:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001986:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 800198a:	f361 03c3 	bfi	r3, r1, #3, #1
 800198e:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	111b      	asrs	r3, r3, #4
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	b2d9      	uxtb	r1, r3
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80019a0:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80019a4:	f361 1304 	bfi	r3, r1, #4, #1
 80019a8:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	795b      	ldrb	r3, [r3, #5]
 80019b0:	115b      	asrs	r3, r3, #5
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80019ba:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80019be:	f361 1345 	bfi	r3, r1, #5, #1
 80019c2:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	119b      	asrs	r3, r3, #6
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	4a4b      	ldr	r2, [pc, #300]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80019d4:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80019d8:	f361 1386 	bfi	r3, r1, #6, #1
 80019dc:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
		BCM_MSG.Message18.SPN.MS1_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	795b      	ldrb	r3, [r3, #5]
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <EEM_PERIODIC+0x81c>)
 80019f0:	f892 3059 	ldrb.w	r3, [r2, #89]	; 0x59
 80019f4:	f361 13c7 	bfi	r3, r1, #7, #1
 80019f8:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59

		BCM_MSG.Message18.SPN.MS1_statusBit01 =  ( param->DATA[2] & 0x01 );
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	799b      	ldrb	r3, [r3, #6]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	4a3e      	ldr	r2, [pc, #248]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a08:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a0c:	f361 0300 	bfi	r3, r1, #0, #1
 8001a10:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	105b      	asrs	r3, r3, #1
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	b2d9      	uxtb	r1, r3
 8001a20:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a22:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a26:	f361 0341 	bfi	r3, r1, #1, #1
 8001a2a:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	799b      	ldrb	r3, [r3, #6]
 8001a32:	109b      	asrs	r3, r3, #2
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	b2d9      	uxtb	r1, r3
 8001a3a:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a3c:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a40:	f361 0382 	bfi	r3, r1, #2, #1
 8001a44:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	799b      	ldrb	r3, [r3, #6]
 8001a4c:	10db      	asrs	r3, r3, #3
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	b2d9      	uxtb	r1, r3
 8001a54:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a56:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a5a:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a5e:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	799b      	ldrb	r3, [r3, #6]
 8001a66:	111b      	asrs	r3, r3, #4
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	b2d9      	uxtb	r1, r3
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a70:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a74:	f361 1304 	bfi	r3, r1, #4, #1
 8001a78:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	799b      	ldrb	r3, [r3, #6]
 8001a80:	115b      	asrs	r3, r3, #5
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	b2d9      	uxtb	r1, r3
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001a8a:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001a8e:	f361 1345 	bfi	r3, r1, #5, #1
 8001a92:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	799b      	ldrb	r3, [r3, #6]
 8001a9a:	119b      	asrs	r3, r3, #6
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2d9      	uxtb	r1, r3
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001aa4:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001aa8:	f361 1386 	bfi	r3, r1, #6, #1
 8001aac:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
		BCM_MSG.Message18.SPN.MS1_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	799b      	ldrb	r3, [r3, #6]
 8001ab4:	09db      	lsrs	r3, r3, #7
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	b2d9      	uxtb	r1, r3
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001ac0:	f892 305a 	ldrb.w	r3, [r2, #90]	; 0x5a
 8001ac4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ac8:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a

		BCM_MSG.Message18.SPN.MS1_dummyByte01 = param->DATA[3];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	79da      	ldrb	r2, [r3, #7]
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001ad2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		BCM_MSG.Message18.SPN.MS1_dummyByte02 = param->DATA[4];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7a1a      	ldrb	r2, [r3, #8]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		BCM_MSG.Message18.SPN.MS1_dummyByte03 = param->DATA[5];
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7a5a      	ldrb	r2, [r3, #9]
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[6];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7a9a      	ldrb	r2, [r3, #10]
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001af0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		BCM_MSG.Message18.SPN.MS1_dummyByte04 = param->DATA[7];
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7ada      	ldrb	r2, [r3, #11]
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <EEM_PERIODIC+0x81c>)
 8001afa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	break;
 8001afe:	e277      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>
 8001b00:	20000250 	.word	0x20000250


	case MESSAGE19 :

		BCM_MSG.Message19.SPN.MS2_warningFlag01 =  ( param->DATA[0] & 0x01 );
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	b2d9      	uxtb	r1, r3
 8001b0e:	4aa6      	ldr	r2, [pc, #664]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b10:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b14:	f361 0300 	bfi	r3, r1, #0, #1
 8001b18:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag02 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	791b      	ldrb	r3, [r3, #4]
 8001b20:	105b      	asrs	r3, r3, #1
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	b2d9      	uxtb	r1, r3
 8001b28:	4a9f      	ldr	r2, [pc, #636]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b2a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b2e:	f361 0341 	bfi	r3, r1, #1, #1
 8001b32:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag03 = (( param->DATA[0] & 0x04 ) >> 2 );
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	109b      	asrs	r3, r3, #2
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b2d9      	uxtb	r1, r3
 8001b42:	4a99      	ldr	r2, [pc, #612]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b44:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b48:	f361 0382 	bfi	r3, r1, #2, #1
 8001b4c:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag04 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	10db      	asrs	r3, r3, #3
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	b2d9      	uxtb	r1, r3
 8001b5c:	4a92      	ldr	r2, [pc, #584]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b5e:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b62:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b66:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag05 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	111b      	asrs	r3, r3, #4
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	4a8c      	ldr	r2, [pc, #560]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b78:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b7c:	f361 1304 	bfi	r3, r1, #4, #1
 8001b80:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag06 = (( param->DATA[0] & 0x20 ) >> 5 );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	115b      	asrs	r3, r3, #5
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	b2d9      	uxtb	r1, r3
 8001b90:	4a85      	ldr	r2, [pc, #532]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001b92:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001b96:	f361 1345 	bfi	r3, r1, #5, #1
 8001b9a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag07 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	791b      	ldrb	r3, [r3, #4]
 8001ba2:	119b      	asrs	r3, r3, #6
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	b2d9      	uxtb	r1, r3
 8001baa:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001bac:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001bb0:	f361 1386 	bfi	r3, r1, #6, #1
 8001bb4:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
		BCM_MSG.Message19.SPN.MS2_warningFlag08 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	791b      	ldrb	r3, [r3, #4]
 8001bbc:	09db      	lsrs	r3, r3, #7
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	b2d9      	uxtb	r1, r3
 8001bc6:	4a78      	ldr	r2, [pc, #480]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001bc8:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
 8001bcc:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bd0:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

		BCM_MSG.Message19.SPN.MS2_errorFlag01 =  ( param->DATA[1] & 0x01 );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	795b      	ldrb	r3, [r3, #5]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	b2d9      	uxtb	r1, r3
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001be0:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001be4:	f361 0300 	bfi	r3, r1, #0, #1
 8001be8:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag02 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001bfa:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001bfe:	f361 0341 	bfi	r3, r1, #1, #1
 8001c02:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag03 = (( param->DATA[1] & 0x04 ) >> 2 );
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	795b      	ldrb	r3, [r3, #5]
 8001c0a:	109b      	asrs	r3, r3, #2
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c14:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c18:	f361 0382 	bfi	r3, r1, #2, #1
 8001c1c:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag04 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	795b      	ldrb	r3, [r3, #5]
 8001c24:	10db      	asrs	r3, r3, #3
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	b2d9      	uxtb	r1, r3
 8001c2c:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c2e:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c32:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c36:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag05 = (( param->DATA[1] & 0x10 ) >> 4 );
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	795b      	ldrb	r3, [r3, #5]
 8001c3e:	111b      	asrs	r3, r3, #4
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c48:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c4c:	f361 1304 	bfi	r3, r1, #4, #1
 8001c50:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag06 = (( param->DATA[1] & 0x20 ) >> 5 );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	795b      	ldrb	r3, [r3, #5]
 8001c58:	115b      	asrs	r3, r3, #5
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	b2d9      	uxtb	r1, r3
 8001c60:	4a51      	ldr	r2, [pc, #324]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c62:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c66:	f361 1345 	bfi	r3, r1, #5, #1
 8001c6a:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag07 = (( param->DATA[1] & 0x40 ) >> 6 );
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	119b      	asrs	r3, r3, #6
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	b2d9      	uxtb	r1, r3
 8001c7a:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c7c:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c80:	f361 1386 	bfi	r3, r1, #6, #1
 8001c84:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
		BCM_MSG.Message19.SPN.MS2_errorFlag08 = (( param->DATA[1] & 0x80 ) >> 7 );
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	09db      	lsrs	r3, r3, #7
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	4a44      	ldr	r2, [pc, #272]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001c98:	f892 3065 	ldrb.w	r3, [r2, #101]	; 0x65
 8001c9c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ca0:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65

		BCM_MSG.Message19.SPN.MS2_statusBit01 =  ( param->DATA[2] & 0x01 );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001cb0:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cb4:	f361 0300 	bfi	r3, r1, #0, #1
 8001cb8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit02 = (( param->DATA[2] & 0x02 ) >> 1 );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	799b      	ldrb	r3, [r3, #6]
 8001cc0:	105b      	asrs	r3, r3, #1
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	b2d9      	uxtb	r1, r3
 8001cc8:	4a37      	ldr	r2, [pc, #220]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001cca:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cce:	f361 0341 	bfi	r3, r1, #1, #1
 8001cd2:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit03 = (( param->DATA[2] & 0x04 ) >> 2 );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	799b      	ldrb	r3, [r3, #6]
 8001cda:	109b      	asrs	r3, r3, #2
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	b2d9      	uxtb	r1, r3
 8001ce2:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001ce4:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001ce8:	f361 0382 	bfi	r3, r1, #2, #1
 8001cec:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit04 = (( param->DATA[2] & 0x08 ) >> 3 );
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	799b      	ldrb	r3, [r3, #6]
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001cfe:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d02:	f361 03c3 	bfi	r3, r1, #3, #1
 8001d06:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit05 = (( param->DATA[2] & 0x10 ) >> 4 );
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	799b      	ldrb	r3, [r3, #6]
 8001d0e:	111b      	asrs	r3, r3, #4
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	b2d9      	uxtb	r1, r3
 8001d16:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d18:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d1c:	f361 1304 	bfi	r3, r1, #4, #1
 8001d20:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit06 = (( param->DATA[2] & 0x20 ) >> 5 );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	799b      	ldrb	r3, [r3, #6]
 8001d28:	115b      	asrs	r3, r3, #5
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	b2d9      	uxtb	r1, r3
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d32:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d36:	f361 1345 	bfi	r3, r1, #5, #1
 8001d3a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit07 = (( param->DATA[2] & 0x40 ) >> 6 );
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	799b      	ldrb	r3, [r3, #6]
 8001d42:	119b      	asrs	r3, r3, #6
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d4c:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d50:	f361 1386 	bfi	r3, r1, #6, #1
 8001d54:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
		BCM_MSG.Message19.SPN.MS2_statusBit08 = (( param->DATA[2] & 0x80 ) >> 7 );
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	799b      	ldrb	r3, [r3, #6]
 8001d5c:	09db      	lsrs	r3, r3, #7
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d68:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001d6c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d70:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

		BCM_MSG.Message19.SPN.MS2_dummyByte01 = param->DATA[3];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	79da      	ldrb	r2, [r3, #7]
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d7a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		BCM_MSG.Message19.SPN.MS2_dummyByte02 = param->DATA[4];
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7a1a      	ldrb	r2, [r3, #8]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d84:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		BCM_MSG.Message19.SPN.MS2_dummyByte03 = param->DATA[5];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7a5a      	ldrb	r2, [r3, #9]
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[6];
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7a9a      	ldrb	r2, [r3, #10]
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001d98:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		BCM_MSG.Message19.SPN.MS2_dummyByte04 = param->DATA[7];
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7ada      	ldrb	r2, [r3, #11]
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <EEM_PERIODIC+0xac4>)
 8001da2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a


	break;
 8001da6:	e123      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>
 8001da8:	20000250 	.word	0x20000250

//#elif defined(MS1_MODULE)

	case MESSAGE20 :

		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	795b      	ldrb	r3, [r3, #5]
 8001db6:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001db8:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	7992      	ldrb	r2, [r2, #6]
 8001dbe:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001dc0:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	79d2      	ldrb	r2, [r2, #7]
 8001dc6:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message20.SPN.MS1_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	4a8c      	ldr	r2, [pc, #560]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001dcc:	6053      	str	r3, [r2, #4]
		MS1_MSG.Message20.SPN.MS1_Mode	  = param->DATA[4];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7a1a      	ldrb	r2, [r3, #8]
 8001dd2:	4b8a      	ldr	r3, [pc, #552]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001dd4:	721a      	strb	r2, [r3, #8]
		MS1_MSG.Message20.SPN.MS1_SuddenBrake = (param->DATA[5] & 0x01 );
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7a5b      	ldrb	r3, [r3, #9]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001de2:	7a53      	ldrb	r3, [r2, #9]
 8001de4:	f361 0300 	bfi	r3, r1, #0, #1
 8001de8:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS1_MSG.Message20.SPN.MS1_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a5b      	ldrb	r3, [r3, #9]
 8001dee:	105b      	asrs	r3, r3, #1
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	b2d9      	uxtb	r1, r3
 8001df6:	4a81      	ldr	r2, [pc, #516]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001df8:	7a53      	ldrb	r3, [r2, #9]
 8001dfa:	f361 0341 	bfi	r3, r1, #1, #1
 8001dfe:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7a5b      	ldrb	r3, [r3, #9]
 8001e04:	109b      	asrs	r3, r3, #2
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e0e:	7a53      	ldrb	r3, [r2, #9]
 8001e10:	f361 0382 	bfi	r3, r1, #2, #1
 8001e14:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7a5b      	ldrb	r3, [r3, #9]
 8001e1a:	10db      	asrs	r3, r3, #3
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	4a76      	ldr	r2, [pc, #472]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e24:	7a53      	ldrb	r3, [r2, #9]
 8001e26:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e2a:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7a5b      	ldrb	r3, [r3, #9]
 8001e30:	111b      	asrs	r3, r3, #4
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	4a70      	ldr	r2, [pc, #448]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e3a:	7a53      	ldrb	r3, [r2, #9]
 8001e3c:	f361 1304 	bfi	r3, r1, #4, #1
 8001e40:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a5b      	ldrb	r3, [r3, #9]
 8001e46:	115b      	asrs	r3, r3, #5
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e50:	7a53      	ldrb	r3, [r2, #9]
 8001e52:	f361 1345 	bfi	r3, r1, #5, #1
 8001e56:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7a5b      	ldrb	r3, [r3, #9]
 8001e5c:	119b      	asrs	r3, r3, #6
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	b2d9      	uxtb	r1, r3
 8001e64:	4a65      	ldr	r2, [pc, #404]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e66:	7a53      	ldrb	r3, [r2, #9]
 8001e68:	f361 1386 	bfi	r3, r1, #6, #1
 8001e6c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message20.SPN.MS1_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7a5b      	ldrb	r3, [r3, #9]
 8001e72:	09db      	lsrs	r3, r3, #7
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	b2d9      	uxtb	r1, r3
 8001e7c:	4a5f      	ldr	r2, [pc, #380]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001e7e:	7a53      	ldrb	r3, [r2, #9]
 8001e80:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e84:	7253      	strb	r3, [r2, #9]

	break;
 8001e86:	e0b3      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE21 :

		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	795b      	ldrb	r3, [r3, #5]
 8001e92:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001e94:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	7992      	ldrb	r2, [r2, #6]
 8001e9a:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001e9c:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	79d2      	ldrb	r2, [r2, #7]
 8001ea2:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001ea8:	6113      	str	r3, [r2, #16]

		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	795b      	ldrb	r3, [r3, #5]
 8001eb4:	021b      	lsls	r3, r3, #8
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001eb6:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	7992      	ldrb	r2, [r2, #6]
 8001ebc:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001ebe:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	79d2      	ldrb	r2, [r2, #7]
 8001ec4:	0612      	lsls	r2, r2, #24
		MS1_MSG.Message21.SPN.MS1_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <EEM_PERIODIC+0xd18>)
 8001eca:	6153      	str	r3, [r2, #20]

	break;
 8001ecc:	e090      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>

//#elif defined(MS2_MODULE)
	case MESSAGE22 :

		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	461a      	mov	r2, r3
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	795b      	ldrb	r3, [r3, #5]
 8001ed8:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001eda:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[2] << 16 )   |
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7992      	ldrb	r2, [r2, #6]
 8001ee0:	0412      	lsls	r2, r2, #16
				 	 	 	 	 	 	 	 	 	  (EEM_U32)( param->DATA[1] << 8  )   |
 8001ee2:	4313      	orrs	r3, r2
													  (EEM_U32)( param->DATA[3] << 24 )   );
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	79d2      	ldrb	r2, [r2, #7]
 8001ee8:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message22.SPN.MS2_Speed   = (EEM_U32)((EEM_U32)( param->DATA[0]	      )	  |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4a44      	ldr	r2, [pc, #272]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001eee:	6053      	str	r3, [r2, #4]
		MS2_MSG.Message22.SPN.MS2_Mode	  = param->DATA[4];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7a1a      	ldrb	r2, [r3, #8]
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001ef6:	721a      	strb	r2, [r3, #8]
		MS2_MSG.Message22.SPN.MS2_SuddenBrake = (param->DATA[5] & 0x01 );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7a5b      	ldrb	r3, [r3, #9]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	b2d9      	uxtb	r1, r3
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f04:	7a53      	ldrb	r3, [r2, #9]
 8001f06:	f361 0300 	bfi	r3, r1, #0, #1
 8001f0a:	7253      	strb	r3, [r2, #9]
		//@INFO: RFU Bits
		MS2_MSG.Message22.SPN.MS2_otherflag02 = ( (param->DATA[5] & 0x02 ) >> 1 );
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7a5b      	ldrb	r3, [r3, #9]
 8001f10:	105b      	asrs	r3, r3, #1
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	b2d9      	uxtb	r1, r3
 8001f18:	4a39      	ldr	r2, [pc, #228]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f1a:	7a53      	ldrb	r3, [r2, #9]
 8001f1c:	f361 0341 	bfi	r3, r1, #1, #1
 8001f20:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag03 = ( (param->DATA[5] & 0x04 ) >> 2 );
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7a5b      	ldrb	r3, [r3, #9]
 8001f26:	109b      	asrs	r3, r3, #2
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	b2d9      	uxtb	r1, r3
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f30:	7a53      	ldrb	r3, [r2, #9]
 8001f32:	f361 0382 	bfi	r3, r1, #2, #1
 8001f36:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag04 = ( (param->DATA[5] & 0x08 ) >> 3 );
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7a5b      	ldrb	r3, [r3, #9]
 8001f3c:	10db      	asrs	r3, r3, #3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f46:	7a53      	ldrb	r3, [r2, #9]
 8001f48:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f4c:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag05 = ( (param->DATA[5] & 0x10 ) >> 4 );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7a5b      	ldrb	r3, [r3, #9]
 8001f52:	111b      	asrs	r3, r3, #4
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	4a29      	ldr	r2, [pc, #164]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f5c:	7a53      	ldrb	r3, [r2, #9]
 8001f5e:	f361 1304 	bfi	r3, r1, #4, #1
 8001f62:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag06 = ( (param->DATA[5] & 0x20 ) >> 5 );
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7a5b      	ldrb	r3, [r3, #9]
 8001f68:	115b      	asrs	r3, r3, #5
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	b2d9      	uxtb	r1, r3
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f72:	7a53      	ldrb	r3, [r2, #9]
 8001f74:	f361 1345 	bfi	r3, r1, #5, #1
 8001f78:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag07 = ( (param->DATA[5] & 0x40 ) >> 6 );
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7a5b      	ldrb	r3, [r3, #9]
 8001f7e:	119b      	asrs	r3, r3, #6
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001f88:	7a53      	ldrb	r3, [r2, #9]
 8001f8a:	f361 1386 	bfi	r3, r1, #6, #1
 8001f8e:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message22.SPN.MS2_otherflag08 = ( (param->DATA[5] & 0x80 ) >> 7 );
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7a5b      	ldrb	r3, [r3, #9]
 8001f94:	09db      	lsrs	r3, r3, #7
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	b2d9      	uxtb	r1, r3
 8001f9e:	4a18      	ldr	r2, [pc, #96]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001fa0:	7a53      	ldrb	r3, [r2, #9]
 8001fa2:	f361 13c7 	bfi	r3, r1, #7, #1
 8001fa6:	7253      	strb	r3, [r2, #9]

	break;
 8001fa8:	e022      	b.n	8001ff0 <EEM_PERIODIC+0xd0c>

	case MESSAGE23 :

		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	795b      	ldrb	r3, [r3, #5]
 8001fb4:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001fb6:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	7992      	ldrb	r2, [r2, #6]
 8001fbc:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001fbe:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	79d2      	ldrb	r2, [r2, #7]
 8001fc4:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy01  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001fca:	6113      	str	r3, [r2, #16]

		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	461a      	mov	r2, r3
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	795b      	ldrb	r3, [r3, #5]
 8001fd6:	021b      	lsls	r3, r3, #8
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001fd8:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[2] << 16 )   |
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	7992      	ldrb	r2, [r2, #6]
 8001fde:	0412      	lsls	r2, r2, #16
						 	 	 	 	 	 	 	   (EEM_U32)( param->DATA[1] << 8  )   |
 8001fe0:	4313      	orrs	r3, r2
													   (EEM_U32)( param->DATA[3] << 24 )   );
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	79d2      	ldrb	r2, [r2, #7]
 8001fe6:	0612      	lsls	r2, r2, #24
		MS2_MSG.Message23.SPN.MS2_dummy02  = (EEM_U32)((EEM_U32)( param->DATA[0]	   )   |
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <EEM_PERIODIC+0xd1c>)
 8001fec:	6153      	str	r3, [r2, #20]

	break;
 8001fee:	bf00      	nop

//#endif
	}

	
	return result;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002c8 	.word	0x200002c8
 8002000:	200002e8 	.word	0x200002e8

08002004 <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <EEM_IS_EMPTY+0x26>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <EEM_IS_EMPTY+0x26>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <EEM_IS_EMPTY+0x28>
 800202a:	2300      	movs	r3, #0
 800202c:	b2db      	uxtb	r3, r3
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <EEM_FILTER_BCM>:
	 @return  : EEM_ERR_T
	 @date	  : 7.02.2023
	 @INFO	  :	BCM Specific CANBUS Filtering Function
********************************************************************************/
EEM_ERR_T EEM_FILTER_BCM( EEM_Protocol_obj_st* param )
{
 800203c:	b480      	push	{r7}
 800203e:	b08d      	sub	sp, #52	; 0x34
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	EEM_CAN_ID_st MessageID_01   = {0}			 ;	/* 29 Bit Extended ID Frame */
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
	MessageID_01.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 800204e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002052:	2201      	movs	r2, #1
 8002054:	f362 0384 	bfi	r3, r2, #2, #3
 8002058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 800205c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002060:	f36f 0341 	bfc	r3, #1, #1
 8002064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8002068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800206c:	f36f 0300 	bfc	r3, #0, #1
 8002070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MessageID_01.Pages.messageID = MESSAGE01 	 ;  /* 8 Bit Message Soft ID 	*/
 8002074:	2301      	movs	r3, #1
 8002076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	MessageID_01.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 800207a:	2311      	movs	r3, #17
 800207c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	MessageID_01.Pages.SA		  = HVAC_NODE	 ;	/* 8 Bit Source Addr		*/
 8002080:	2322      	movs	r3, #34	; 0x22
 8002082:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BCM_MSG.Message01_ID		  = MessageID_01.identifier ;
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	4a61      	ldr	r2, [pc, #388]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 800208a:	6013      	str	r3, [r2, #0]

	EEM_CAN_ID_st MessageID_02   = {0}			 ;	/* 29 Bit Extended ID Frame */
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    MessageID_02.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8002090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002094:	2201      	movs	r2, #1
 8002096:	f362 0384 	bfi	r3, r2, #2, #3
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 800209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a2:	f36f 0341 	bfc	r3, #1, #1
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ae:	f36f 0300 	bfc	r3, #0, #1
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MessageID_02.Pages.messageID = MESSAGE02 	 ;  /* 8 Bit Message Soft ID 	*/
 80020b6:	2302      	movs	r3, #2
 80020b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MessageID_02.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 80020bc:	2311      	movs	r3, #17
 80020be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    MessageID_02.Pages.SA		  = HVAC_NODE	 ;	/* 8 Bit Source Addr		*/
 80020c2:	2322      	movs	r3, #34	; 0x22
 80020c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    BCM_MSG.Message02_ID		  = MessageID_02.identifier ;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	4a51      	ldr	r2, [pc, #324]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 80020cc:	6113      	str	r3, [r2, #16]

    EEM_CAN_ID_st MessageID_07   = {0}			 ;	/* 29 Bit Extended ID Frame */
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
    MessageID_07.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 80020d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020d6:	2201      	movs	r2, #1
 80020d8:	f362 0384 	bfi	r3, r2, #2, #3
 80020dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 80020e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020e4:	f36f 0341 	bfc	r3, #1, #1
 80020e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 80020ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020f0:	f36f 0300 	bfc	r3, #0, #1
 80020f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MessageID_07.Pages.messageID = MESSAGE07 	 ;  /* 8 Bit Message Soft ID 	*/
 80020f8:	2307      	movs	r3, #7
 80020fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    MessageID_07.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 80020fe:	2311      	movs	r3, #17
 8002100:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    MessageID_07.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 8002104:	2355      	movs	r3, #85	; 0x55
 8002106:	f887 3020 	strb.w	r3, [r7, #32]
    BCM_MSG.Message07_ID		  = MessageID_07.identifier ;
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	4a40      	ldr	r2, [pc, #256]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 800210e:	61d3      	str	r3, [r2, #28]

	 EEM_CAN_ID_st MessageID_08   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
	 MessageID_08.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8002114:	7ffb      	ldrb	r3, [r7, #31]
 8002116:	2201      	movs	r2, #1
 8002118:	f362 0384 	bfi	r3, r2, #2, #3
 800211c:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	f36f 0341 	bfc	r3, #1, #1
 8002124:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	f36f 0300 	bfc	r3, #0, #1
 800212c:	77fb      	strb	r3, [r7, #31]
	 MessageID_08.Pages.messageID = MESSAGE08 	 ;  /* 8 Bit Message Soft ID 	*/
 800212e:	2308      	movs	r3, #8
 8002130:	77bb      	strb	r3, [r7, #30]
	 MessageID_08.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8002132:	2311      	movs	r3, #17
 8002134:	777b      	strb	r3, [r7, #29]
	 MessageID_08.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 8002136:	2355      	movs	r3, #85	; 0x55
 8002138:	773b      	strb	r3, [r7, #28]
	 BCM_MSG.Message08_ID		  = MessageID_08.identifier ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4a34      	ldr	r2, [pc, #208]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 800213e:	62d3      	str	r3, [r2, #44]	; 0x2c

	 EEM_CAN_ID_st MessageID_09   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
	 MessageID_09.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8002144:	7efb      	ldrb	r3, [r7, #27]
 8002146:	2201      	movs	r2, #1
 8002148:	f362 0384 	bfi	r3, r2, #2, #3
 800214c:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 800214e:	7efb      	ldrb	r3, [r7, #27]
 8002150:	f36f 0341 	bfc	r3, #1, #1
 8002154:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8002156:	7efb      	ldrb	r3, [r7, #27]
 8002158:	f36f 0300 	bfc	r3, #0, #1
 800215c:	76fb      	strb	r3, [r7, #27]
	 MessageID_09.Pages.messageID = MESSAGE09 	 ;  /* 8 Bit Message Soft ID 	*/
 800215e:	2309      	movs	r3, #9
 8002160:	76bb      	strb	r3, [r7, #26]
	 MessageID_09.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8002162:	2311      	movs	r3, #17
 8002164:	767b      	strb	r3, [r7, #25]
	 MessageID_09.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 8002166:	2366      	movs	r3, #102	; 0x66
 8002168:	763b      	strb	r3, [r7, #24]
	 BCM_MSG.Message09_ID		  = MessageID_09.identifier ;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 800216e:	6393      	str	r3, [r2, #56]	; 0x38

	 EEM_CAN_ID_st MessageID_10   = {0}			 ;	/* 29 Bit Extended ID Frame */
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
	 MessageID_10.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2201      	movs	r2, #1
 8002178:	f362 0384 	bfi	r3, r2, #2, #3
 800217c:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	f36f 0341 	bfc	r3, #1, #1
 8002184:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	f36f 0300 	bfc	r3, #0, #1
 800218c:	75fb      	strb	r3, [r7, #23]
	 MessageID_10.Pages.messageID = MESSAGE10 	 ;  /* 8 Bit Message Soft ID 	*/
 800218e:	2310      	movs	r3, #16
 8002190:	75bb      	strb	r3, [r7, #22]
	 MessageID_10.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 8002192:	2311      	movs	r3, #17
 8002194:	757b      	strb	r3, [r7, #21]
	 MessageID_10.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 8002196:	2366      	movs	r3, #102	; 0x66
 8002198:	753b      	strb	r3, [r7, #20]
	 BCM_MSG.Message10_ID		  = MessageID_10.identifier ;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 800219e:	6493      	str	r3, [r2, #72]	; 0x48

	 EEM_CAN_ID_st MessageID_18   = {0}			 ;	/* 29 Bit Extended ID Frame */
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
	 MessageID_18.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f362 0384 	bfi	r3, r2, #2, #3
 80021ac:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	f36f 0341 	bfc	r3, #1, #1
 80021b4:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	f36f 0300 	bfc	r3, #0, #1
 80021bc:	74fb      	strb	r3, [r7, #19]
	 MessageID_18.Pages.messageID = MESSAGE09 	 ;  /* 8 Bit Message Soft ID 	*/
 80021be:	2309      	movs	r3, #9
 80021c0:	74bb      	strb	r3, [r7, #18]
	 MessageID_18.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 80021c2:	2311      	movs	r3, #17
 80021c4:	747b      	strb	r3, [r7, #17]
	 MessageID_18.Pages.SA		  = MS1_NODE	 ;	/* 8 Bit Source Addr		*/
 80021c6:	2355      	movs	r3, #85	; 0x55
 80021c8:	743b      	strb	r3, [r7, #16]
	 BCM_MSG.Message18_ID		  = MessageID_18.identifier ;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 80021ce:	6553      	str	r3, [r2, #84]	; 0x54

	 EEM_CAN_ID_st MessageID_19   = {0}			 ;	/* 29 Bit Extended ID Frame */
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
	 MessageID_19.Pages.priority  = PRIORITY_001 ;  /* 3 Bit Priortiy 			*/
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f362 0384 	bfi	r3, r2, #2, #3
 80021dc:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.reserved  = NOT_RESERVED ;	/* 1 Bit Reserved 			*/
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	f36f 0341 	bfc	r3, #1, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.dataPoint = DATAPAGE_0	 ;	/* 1 Bit Data Page 			*/
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	f36f 0300 	bfc	r3, #0, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
	 MessageID_19.Pages.messageID = MESSAGE10 	 ;  /* 8 Bit Message Soft ID 	*/
 80021ee:	2310      	movs	r3, #16
 80021f0:	73bb      	strb	r3, [r7, #14]
	 MessageID_19.Pages.DA		  = BCM_NODE	 ;	/* 8 Bit Destination Addr	*/
 80021f2:	2311      	movs	r3, #17
 80021f4:	737b      	strb	r3, [r7, #13]
	 MessageID_19.Pages.SA		  = MS2_NODE	 ;	/* 8 Bit Source Addr		*/
 80021f6:	2366      	movs	r3, #102	; 0x66
 80021f8:	733b      	strb	r3, [r7, #12]
	 BCM_MSG.Message19_ID		  = MessageID_19.identifier ;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <EEM_FILTER_BCM+0x1d4>)
 80021fe:	6613      	str	r3, [r2, #96]	; 0x60
//ERROR
#endif


#endif
	return result;
 8002200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002204:	4618      	mov	r0, r3
 8002206:	3734      	adds	r7, #52	; 0x34
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20000250 	.word	0x20000250

08002214 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800221a:	2201      	movs	r2, #1
 800221c:	2110      	movs	r1, #16
 800221e:	480c      	ldr	r0, [pc, #48]	; (8002250 <MCP2515_Initialize+0x3c>)
 8002220:	f001 f898 	bl	8003354 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8002224:	230a      	movs	r3, #10
 8002226:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8002228:	480a      	ldr	r0, [pc, #40]	; (8002254 <MCP2515_Initialize+0x40>)
 800222a:	f002 f963 	bl	80044f4 <HAL_SPI_GetState>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <MCP2515_Initialize+0x24>
      return true;
 8002234:	2301      	movs	r3, #1
 8002236:	e006      	b.n	8002246 <MCP2515_Initialize+0x32>

    loop--;
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	3b01      	subs	r3, #1
 800223c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f1      	bne.n	8002228 <MCP2515_Initialize+0x14>

  return false;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40020000 	.word	0x40020000
 8002254:	200001a8 	.word	0x200001a8

08002258 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	200f      	movs	r0, #15
 8002262:	f000 f879 	bl	8002358 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8002266:	230a      	movs	r3, #10
 8002268:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800226a:	200e      	movs	r0, #14
 800226c:	f000 f830 	bl	80022d0 <MCP2515_ReadByte>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d101      	bne.n	800227e <MCP2515_SetConfigMode+0x26>
      return true;
 800227a:	2301      	movs	r3, #1
 800227c:	e006      	b.n	800228c <MCP2515_SetConfigMode+0x34>

    loop--;
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	3b01      	subs	r3, #1
 8002282:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ef      	bne.n	800226a <MCP2515_SetConfigMode+0x12>

  return false;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800229a:	2100      	movs	r1, #0
 800229c:	200f      	movs	r0, #15
 800229e:	f000 f85b 	bl	8002358 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80022a2:	230a      	movs	r3, #10
 80022a4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80022a6:	200e      	movs	r0, #14
 80022a8:	f000 f812 	bl	80022d0 <MCP2515_ReadByte>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <MCP2515_SetNormalMode+0x26>
      return true;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e006      	b.n	80022c8 <MCP2515_SetNormalMode+0x34>

    loop--;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	3b01      	subs	r3, #1
 80022be:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ef      	bne.n	80022a6 <MCP2515_SetNormalMode+0x12>

  return false;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80022da:	2200      	movs	r2, #0
 80022dc:	2110      	movs	r1, #16
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <MCP2515_ReadByte+0x40>)
 80022e0:	f001 f838 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f901 	bl	80024ec <SPI_Tx>
  SPI_Tx(address);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f8fd 	bl	80024ec <SPI_Tx>
  retVal = SPI_Rx();
 80022f2:	f000 f921 	bl	8002538 <SPI_Rx>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80022fa:	2201      	movs	r2, #1
 80022fc:	2110      	movs	r1, #16
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <MCP2515_ReadByte+0x40>)
 8002300:	f001 f828 	bl	8003354 <HAL_GPIO_WritePin>

  return retVal;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020000 	.word	0x40020000

08002314 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	4613      	mov	r3, r2
 8002322:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002324:	2200      	movs	r2, #0
 8002326:	2110      	movs	r1, #16
 8002328:	480a      	ldr	r0, [pc, #40]	; (8002354 <MCP2515_ReadRxSequence+0x40>)
 800232a:	f001 f813 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f8db 	bl	80024ec <SPI_Tx>
  SPI_RxBuffer(data, length);
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	4619      	mov	r1, r3
 800233a:	6838      	ldr	r0, [r7, #0]
 800233c:	f000 f90c 	bl	8002558 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8002340:	2201      	movs	r2, #1
 8002342:	2110      	movs	r1, #16
 8002344:	4803      	ldr	r0, [pc, #12]	; (8002354 <MCP2515_ReadRxSequence+0x40>)
 8002346:	f001 f805 	bl	8003354 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40020000 	.word	0x40020000

08002358 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002368:	2200      	movs	r2, #0
 800236a:	2110      	movs	r1, #16
 800236c:	480b      	ldr	r0, [pc, #44]	; (800239c <MCP2515_WriteByte+0x44>)
 800236e:	f000 fff1 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8002372:	2002      	movs	r0, #2
 8002374:	f000 f8ba 	bl	80024ec <SPI_Tx>
  SPI_Tx(address);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f8b6 	bl	80024ec <SPI_Tx>
  SPI_Tx(data);
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f8b2 	bl	80024ec <SPI_Tx>

  MCP2515_CS_HIGH();
 8002388:	2201      	movs	r2, #1
 800238a:	2110      	movs	r1, #16
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <MCP2515_WriteByte+0x44>)
 800238e:	f000 ffe1 	bl	8003354 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40020000 	.word	0x40020000

080023a0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	603a      	str	r2, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	460b      	mov	r3, r1
 80023ae:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80023b0:	2200      	movs	r2, #0
 80023b2:	2110      	movs	r1, #16
 80023b4:	480e      	ldr	r0, [pc, #56]	; (80023f0 <MCP2515_WriteByteSequence+0x50>)
 80023b6:	f000 ffcd 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80023ba:	2002      	movs	r0, #2
 80023bc:	f000 f896 	bl	80024ec <SPI_Tx>
  SPI_Tx(startAddress);
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f892 	bl	80024ec <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80023c8:	79ba      	ldrb	r2, [r7, #6]
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f000 f89a 	bl	8002510 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80023dc:	2201      	movs	r2, #1
 80023de:	2110      	movs	r1, #16
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <MCP2515_WriteByteSequence+0x50>)
 80023e2:	f000 ffb7 	bl	8003354 <HAL_GPIO_WritePin>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40020000 	.word	0x40020000

080023f4 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4603      	mov	r3, r0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	4613      	mov	r3, r2
 8002404:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8002406:	2200      	movs	r2, #0
 8002408:	2110      	movs	r1, #16
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <MCP2515_LoadTxSequence+0x50>)
 800240c:	f000 ffa2 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f86a 	bl	80024ec <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8002418:	2104      	movs	r1, #4
 800241a:	68b8      	ldr	r0, [r7, #8]
 800241c:	f000 f878 	bl	8002510 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f862 	bl	80024ec <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f86f 	bl	8002510 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002432:	2201      	movs	r2, #1
 8002434:	2110      	movs	r1, #16
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <MCP2515_LoadTxSequence+0x50>)
 8002438:	f000 ff8c 	bl	8003354 <HAL_GPIO_WritePin>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40020000 	.word	0x40020000

08002448 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8002452:	2200      	movs	r2, #0
 8002454:	2110      	movs	r1, #16
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <MCP2515_RequestToSend+0x30>)
 8002458:	f000 ff7c 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f844 	bl	80024ec <SPI_Tx>

  MCP2515_CS_HIGH();
 8002464:	2201      	movs	r2, #1
 8002466:	2110      	movs	r1, #16
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <MCP2515_RequestToSend+0x30>)
 800246a:	f000 ff73 	bl	8003354 <HAL_GPIO_WritePin>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40020000 	.word	0x40020000

0800247c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002482:	2200      	movs	r2, #0
 8002484:	2110      	movs	r1, #16
 8002486:	480a      	ldr	r0, [pc, #40]	; (80024b0 <MCP2515_ReadStatus+0x34>)
 8002488:	f000 ff64 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 800248c:	20a0      	movs	r0, #160	; 0xa0
 800248e:	f000 f82d 	bl	80024ec <SPI_Tx>
  retVal = SPI_Rx();
 8002492:	f000 f851 	bl	8002538 <SPI_Rx>
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800249a:	2201      	movs	r2, #1
 800249c:	2110      	movs	r1, #16
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MCP2515_ReadStatus+0x34>)
 80024a0:	f000 ff58 	bl	8003354 <HAL_GPIO_WritePin>

  return retVal;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40020000 	.word	0x40020000

080024b4 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80024ba:	2200      	movs	r2, #0
 80024bc:	2110      	movs	r1, #16
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <MCP2515_GetRxStatus+0x34>)
 80024c0:	f000 ff48 	bl	8003354 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80024c4:	20b0      	movs	r0, #176	; 0xb0
 80024c6:	f000 f811 	bl	80024ec <SPI_Tx>
  retVal = SPI_Rx();
 80024ca:	f000 f835 	bl	8002538 <SPI_Rx>
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80024d2:	2201      	movs	r2, #1
 80024d4:	2110      	movs	r1, #16
 80024d6:	4804      	ldr	r0, [pc, #16]	; (80024e8 <MCP2515_GetRxStatus+0x34>)
 80024d8:	f000 ff3c 	bl	8003354 <HAL_GPIO_WritePin>

  return retVal;
 80024dc:	79fb      	ldrb	r3, [r7, #7]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020000 	.word	0x40020000

080024ec <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80024f6:	1df9      	adds	r1, r7, #7
 80024f8:	230a      	movs	r3, #10
 80024fa:	2201      	movs	r2, #1
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <SPI_Tx+0x20>)
 80024fe:	f001 fc0a 	bl	8003d16 <HAL_SPI_Transmit>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200001a8 	.word	0x200001a8

08002510 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	b29a      	uxth	r2, r3
 8002520:	230a      	movs	r3, #10
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <SPI_TxBuffer+0x24>)
 8002526:	f001 fbf6 	bl	8003d16 <HAL_SPI_Transmit>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200001a8 	.word	0x200001a8

08002538 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800253e:	1df9      	adds	r1, r7, #7
 8002540:	230a      	movs	r3, #10
 8002542:	2201      	movs	r2, #1
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <SPI_Rx+0x1c>)
 8002546:	f001 fd22 	bl	8003f8e <HAL_SPI_Receive>
  return retVal;
 800254a:	79fb      	ldrb	r3, [r7, #7]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200001a8 	.word	0x200001a8

08002558 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	b29a      	uxth	r2, r3
 8002568:	230a      	movs	r3, #10
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <SPI_RxBuffer+0x24>)
 800256e:	f001 fd0e 	bl	8003f8e <HAL_SPI_Receive>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200001a8 	.word	0x200001a8

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <HAL_Init+0x40>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_Init+0x40>)
 8002596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_Init+0x40>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a8:	2003      	movs	r0, #3
 80025aa:	f000 fd0d 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ae:	200f      	movs	r0, #15
 80025b0:	f000 f808 	bl	80025c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b4:	f7fe f9e6 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_InitTick+0x54>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x58>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025da:	fbb3 f3f1 	udiv	r3, r3, r1
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fd25 	bl	8003032 <HAL_SYSTICK_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00e      	b.n	8002610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d80a      	bhi.n	800260e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f8:	2200      	movs	r2, #0
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f000 fced 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <HAL_InitTick+0x5c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000000 	.word	0x20000000
 800261c:	20000008 	.word	0x20000008
 8002620:	20000004 	.word	0x20000004

08002624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_IncTick+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x24>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_IncTick+0x24>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000008 	.word	0x20000008
 8002648:	20000300 	.word	0x20000300

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000300 	.word	0x20000300

08002664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e033      	b.n	80026e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe f9a6 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026aa:	f023 0302 	bic.w	r3, r3, #2
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 faba 	bl	8002c30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
 80026d2:	e001      	b.n	80026d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e097      	b.n	8002836 <HAL_ADC_Start+0x14a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d018      	beq.n	800274e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800272c:	4b45      	ldr	r3, [pc, #276]	; (8002844 <HAL_ADC_Start+0x158>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a45      	ldr	r2, [pc, #276]	; (8002848 <HAL_ADC_Start+0x15c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9a      	lsrs	r2, r3, #18
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002740:	e002      	b.n	8002748 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d15f      	bne.n	800281c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002786:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	d106      	bne.n	80027aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f023 0206 	bic.w	r2, r3, #6
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_ADC_Start+0x160>)
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d129      	bne.n	8002834 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e020      	b.n	8002834 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_ADC_Start+0x164>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d11b      	bne.n	8002834 <HAL_ADC_Start+0x148>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d114      	bne.n	8002834 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	e00b      	b.n	8002834 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f043 0210 	orr.w	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000
 8002848:	431bde83 	.word	0x431bde83
 800284c:	40012300 	.word	0x40012300
 8002850:	40012000 	.word	0x40012000

08002854 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADC_Stop+0x16>
 8002866:	2302      	movs	r3, #2
 8002868:	e021      	b.n	80028ae <HAL_ADC_Stop+0x5a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d113      	bne.n	8002900 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d10b      	bne.n	8002900 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e063      	b.n	80029c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002900:	f7ff fea4 	bl	800264c <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002906:	e021      	b.n	800294c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d01d      	beq.n	800294c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_ADC_PollForConversion+0x6c>
 8002916:	f7ff fe99 	bl	800264c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d212      	bcs.n	800294c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d00b      	beq.n	800294c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e03d      	b.n	80029c8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d1d6      	bne.n	8002908 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0212 	mvn.w	r2, #18
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d123      	bne.n	80029c6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d111      	bne.n	80029c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e105      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x228>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d925      	bls.n	8002a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68d9      	ldr	r1, [r3, #12]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b1e      	subs	r3, #30
 8002a2e:	2207      	movs	r2, #7
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43da      	mvns	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4403      	add	r3, r0
 8002a56:	3b1e      	subs	r3, #30
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	e022      	b.n	8002aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	2207      	movs	r2, #7
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6919      	ldr	r1, [r3, #16]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4403      	add	r3, r0
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d824      	bhi.n	8002afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b05      	subs	r3, #5
 8002ac4:	221f      	movs	r2, #31
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b05      	subs	r3, #5
 8002aee:	fa00 f203 	lsl.w	r2, r0, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
 8002afa:	e04c      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d824      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	3b23      	subs	r3, #35	; 0x23
 8002b16:	221f      	movs	r2, #31
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b23      	subs	r3, #35	; 0x23
 8002b40:	fa00 f203 	lsl.w	r2, r0, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4c:	e023      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b41      	subs	r3, #65	; 0x41
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	; 0x41
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_ADC_ConfigChannel+0x234>)
 8002b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_ADC_ConfigChannel+0x238>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_ADC_ConfigChannel+0x238>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d123      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d003      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b11      	cmp	r3, #17
 8002bd0:	d11b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d111      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_ADC_ConfigChannel+0x23c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_ADC_ConfigChannel+0x240>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0c9a      	lsrs	r2, r3, #18
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	40012000 	.word	0x40012000
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c38:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <ADC_Init+0x1f0>)
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <ADC_Init+0x1f4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e00f      	b.n	8002d2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0202 	bic.w	r2, r2, #2
 8002d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
 8002d48:	005a      	lsls	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	3b01      	subs	r3, #1
 8002d88:	035a      	lsls	r2, r3, #13
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e007      	b.n	8002da4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	051a      	lsls	r2, r3, #20
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de6:	025a      	lsls	r2, r3, #9
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6899      	ldr	r1, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	029a      	lsls	r2, r3, #10
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012300 	.word	0x40012300
 8002e24:	0f000001 	.word	0x0f000001

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e159      	b.n	800331c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8148 	bne.w	8003316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a2 	beq.w	8003316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x202>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1fe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1fa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x300>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1f2>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800323e:	2307      	movs	r3, #7
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x304>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f aea2 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40013c00 	.word	0x40013c00

08003354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
 8003360:	4613      	mov	r3, r2
 8003362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003364:	787b      	ldrb	r3, [r7, #1]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003370:	e003      	b.n	800337a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	041a      	lsls	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	619a      	str	r2, [r3, #24]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	041a      	lsls	r2, r3, #16
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e267      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d075      	beq.n	80034c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00c      	beq.n	8003400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d112      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f2:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fe:	d10b      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e242      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x74>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6c      	ldr	r2, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003454:	4b69      	ldr	r3, [pc, #420]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a68      	ldr	r2, [pc, #416]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff f8ea 	bl	800264c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7ff f8e6 	bl	800264c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e207      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xc0>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7ff f8d6 	bl	800264c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff f8d2 	bl	800264c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1f3      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1c7      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x244>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7ff f88b 	bl	800264c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353a:	f7ff f887 	bl	800264c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1a8      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4925      	ldr	r1, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x244>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7ff f86a 	bl	800264c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357c:	f7ff f866 	bl	800264c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e187      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x248>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7ff f84a 	bl	800264c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035bc:	f7ff f846 	bl	800264c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e167      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x240>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x200>
 80035da:	e01b      	b.n	8003614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x248>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7ff f833 	bl	800264c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	e00e      	b.n	8003608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ea:	f7ff f82f 	bl	800264c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d907      	bls.n	8003608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e150      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ea      	bne.n	80035ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b7d      	ldr	r3, [pc, #500]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a7c      	ldr	r2, [pc, #496]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b7a      	ldr	r3, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b77      	ldr	r3, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b74      	ldr	r3, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a73      	ldr	r2, [pc, #460]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe ffef 	bl	800264c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe ffeb 	bl	800264c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e10c      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCC_OscConfig+0x474>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
 8003698:	4b64      	ldr	r3, [pc, #400]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x324>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x30c>
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a5e      	ldr	r2, [pc, #376]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a5b      	ldr	r2, [pc, #364]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x324>
 80036c8:	4b58      	ldr	r3, [pc, #352]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a54      	ldr	r2, [pc, #336]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe ffb0 	bl	800264c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fe ffac 	bl	800264c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0cb      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x334>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003714:	f7fe ff9a 	bl	800264c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe ff96 	bl	800264c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0b5      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a38      	ldr	r2, [pc, #224]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a1 	beq.w	800389c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_OscConfig+0x470>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d05c      	beq.n	8003820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d141      	bne.n	80037f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe ff6a 	bl	800264c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe ff66 	bl	800264c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e087      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	491b      	ldr	r1, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe ff3f 	bl	800264c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe ff3b 	bl	800264c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e05c      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_RCC_OscConfig+0x470>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x416>
 80037f0:	e054      	b.n	800389c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_RCC_OscConfig+0x478>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe ff28 	bl	800264c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe ff24 	bl	800264c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e045      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_OscConfig+0x470>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x444>
 800381e:	e03d      	b.n	800389c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e038      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
 800382c:	40023800 	.word	0x40023800
 8003830:	40007000 	.word	0x40007000
 8003834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x4ec>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d028      	beq.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d121      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11a      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800386e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	3b01      	subs	r3, #1
 8003882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0cc      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d90c      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0b8      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800390a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a52      	ldr	r2, [pc, #328]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	494d      	ldr	r1, [pc, #308]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d044      	beq.n	80039cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d119      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e067      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4934      	ldr	r1, [pc, #208]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fe fe56 	bl	800264c <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe fe52 	bl	800264c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e04f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d20c      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e032      	b.n	8003a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4916      	ldr	r1, [pc, #88]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490e      	ldr	r1, [pc, #56]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a32:	f000 f821 	bl	8003a78 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490a      	ldr	r1, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fdb6 	bl	80025c4 <HAL_InitTick>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08004fdc 	.word	0x08004fdc
 8003a70:	20000000 	.word	0x20000000
 8003a74:	20000004 	.word	0x20000004

08003a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a7c:	b090      	sub	sp, #64	; 0x40
 8003a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	2300      	movs	r3, #0
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	f200 80a1 	bhi.w	8003be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x34>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aaa:	e09b      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ab0:	e09b      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ab2:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ab6:	e098      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae4:	fb03 f201 	mul.w	r2, r3, r1
 8003ae8:	2300      	movs	r3, #0
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	4a43      	ldr	r2, [pc, #268]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af2:	fba0 1202 	umull	r1, r2, r0, r2
 8003af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af8:	460a      	mov	r2, r1
 8003afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afe:	4413      	add	r3, r2
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	2200      	movs	r2, #0
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	61fa      	str	r2, [r7, #28]
 8003b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b12:	f7fc fb5f 	bl	80001d4 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1e:	e053      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b20:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	2200      	movs	r2, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	617a      	str	r2, [r7, #20]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b32:	f04f 0b00 	mov.w	fp, #0
 8003b36:	4652      	mov	r2, sl
 8003b38:	465b      	mov	r3, fp
 8003b3a:	f04f 0000 	mov.w	r0, #0
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	0159      	lsls	r1, r3, #5
 8003b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b48:	0150      	lsls	r0, r2, #5
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b52:	eb63 090b 	sbc.w	r9, r3, fp
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	00eb      	lsls	r3, r5, #3
 8003b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b80:	00e2      	lsls	r2, r4, #3
 8003b82:	4614      	mov	r4, r2
 8003b84:	461d      	mov	r5, r3
 8003b86:	eb14 030a 	adds.w	r3, r4, sl
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	eb45 030b 	adc.w	r3, r5, fp
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	028b      	lsls	r3, r1, #10
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba8:	4621      	mov	r1, r4
 8003baa:	028a      	lsls	r2, r1, #10
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	60fa      	str	r2, [r7, #12]
 8003bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bbc:	f7fc fb0a 	bl	80001d4 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003be2:	e002      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3740      	adds	r7, #64	; 0x40
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	017d7840 	.word	0x017d7840

08003c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e07b      	b.n	8003d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c26:	d009      	beq.n	8003c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
 8003c2e:	e005      	b.n	8003c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc ff00 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	ea42 0103 	orr.w	r1, r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	f003 0104 	and.w	r1, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0210 	and.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_SPI_Transmit+0x22>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e126      	b.n	8003f86 <HAL_SPI_Transmit+0x270>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d40:	f7fe fc84 	bl	800264c <HAL_GetTick>
 8003d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d5a:	e10b      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Transmit+0x52>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6c:	e102      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d10f      	bne.n	8003dd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d007      	beq.n	8003df4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d14b      	bne.n	8003e96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0xf6>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d13e      	bne.n	8003e8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e30:	e02b      	b.n	8003e8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d112      	bne.n	8003e66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e64:	e011      	b.n	8003e8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fe fbf1 	bl	800264c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d803      	bhi.n	8003e7e <HAL_SPI_Transmit+0x168>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Transmit+0x16e>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e88:	e074      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ce      	bne.n	8003e32 <HAL_SPI_Transmit+0x11c>
 8003e94:	e04c      	b.n	8003f30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0x18e>
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d140      	bne.n	8003f26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003eca:	e02c      	b.n	8003f26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d113      	bne.n	8003f02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f00:	e011      	b.n	8003f26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f02:	f7fe fba3 	bl	800264c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_Transmit+0x204>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Transmit+0x20a>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f24:	e026      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1cd      	bne.n	8003ecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fbd9 	bl	80046ec <SPI_EndRxTxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e000      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003faa:	d112      	bne.n	8003fd2 <HAL_SPI_Receive+0x44>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8f1 	bl	80041b0 <HAL_SPI_TransmitReceive>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e0ea      	b.n	80041a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_SPI_Receive+0x52>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0e3      	b.n	80041a8 <HAL_SPI_Receive+0x21a>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe8:	f7fe fb30 	bl	800264c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ffe:	e0ca      	b.n	8004196 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Receive+0x7e>
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004010:	e0c1      	b.n	8004196 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2204      	movs	r2, #4
 8004016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	88fa      	ldrh	r2, [r7, #6]
 800402a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004058:	d10f      	bne.n	800407a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d007      	beq.n	8004098 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d162      	bne.n	8004166 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040a0:	e02e      	b.n	8004100 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d115      	bne.n	80040dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f103 020c 	add.w	r2, r3, #12
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040da:	e011      	b.n	8004100 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040dc:	f7fe fab6 	bl	800264c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d803      	bhi.n	80040f4 <HAL_SPI_Receive+0x166>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <HAL_SPI_Receive+0x16c>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040fe:	e04a      	b.n	8004196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1cb      	bne.n	80040a2 <HAL_SPI_Receive+0x114>
 800410a:	e031      	b.n	8004170 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b01      	cmp	r3, #1
 8004118:	d113      	bne.n	8004142 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	b292      	uxth	r2, r2
 8004126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004140:	e011      	b.n	8004166 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004142:	f7fe fa83 	bl	800264c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d803      	bhi.n	800415a <HAL_SPI_Receive+0x1cc>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d102      	bne.n	8004160 <HAL_SPI_Receive+0x1d2>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004164:	e017      	b.n	8004196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1cd      	bne.n	800410c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fa53 	bl	8004620 <SPI_EndRxTransaction>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
 8004192:	e000      	b.n	8004196 <HAL_SPI_Receive+0x208>
  }

error :
 8004194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x26>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e18a      	b.n	80044ec <HAL_SPI_TransmitReceive+0x33c>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041de:	f7fe fa35 	bl	800264c <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d00f      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x70>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004206:	d107      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x68>
 8004210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004214:	2b04      	cmp	r3, #4
 8004216:	d003      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004218:	2302      	movs	r3, #2
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800421e:	e15b      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x82>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x82>
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004238:	e14e      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b04      	cmp	r3, #4
 8004244:	d003      	beq.n	800424e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2205      	movs	r2, #5
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	887a      	ldrh	r2, [r7, #2]
 800425e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	887a      	ldrh	r2, [r7, #2]
 8004276:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d007      	beq.n	80042a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	d178      	bne.n	800439e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x10a>
 80042b4:	8b7b      	ldrh	r3, [r7, #26]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d166      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	1c9a      	adds	r2, r3, #2
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042de:	e053      	b.n	8004388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d11b      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x176>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x176>
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d113      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	881a      	ldrh	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b01      	cmp	r3, #1
 8004332:	d119      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x1b8>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d014      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	b292      	uxth	r2, r2
 800434a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004364:	2301      	movs	r3, #1
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004368:	f7fe f970 	bl	800264c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004374:	429a      	cmp	r2, r3
 8004376:	d807      	bhi.n	8004388 <HAL_SPI_TransmitReceive+0x1d8>
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d003      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004386:	e0a7      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1a6      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x130>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1a1      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x130>
 800439c:	e07c      	b.n	8004498 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_SPI_TransmitReceive+0x1fc>
 80043a6:	8b7b      	ldrh	r3, [r7, #26]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d16b      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	7812      	ldrb	r2, [r2, #0]
 80043b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d2:	e057      	b.n	8004484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d11c      	bne.n	800441c <HAL_SPI_TransmitReceive+0x26c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <HAL_SPI_TransmitReceive+0x26c>
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d114      	bne.n	800441c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d119      	bne.n	800445e <HAL_SPI_TransmitReceive+0x2ae>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d014      	beq.n	800445e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800445a:	2301      	movs	r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800445e:	f7fe f8f5 	bl	800264c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446a:	429a      	cmp	r2, r3
 800446c:	d803      	bhi.n	8004476 <HAL_SPI_TransmitReceive+0x2c6>
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d102      	bne.n	800447c <HAL_SPI_TransmitReceive+0x2cc>
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004482:	e029      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1a2      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x224>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d19d      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f925 	bl	80046ec <SPI_EndRxTxTransaction>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80044b4:	e010      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	e000      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004502:	b2db      	uxtb	r3, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004520:	f7fe f894 	bl	800264c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004530:	f7fe f88c 	bl	800264c <HAL_GetTick>
 8004534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	0d1b      	lsrs	r3, r3, #20
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004546:	e054      	b.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d050      	beq.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004550:	f7fe f87c 	bl	800264c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	d902      	bls.n	8004566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d13d      	bne.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457e:	d111      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d004      	beq.n	8004594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004592:	d107      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	d10f      	bne.n	80045ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e017      	b.n	8004612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	d19b      	bne.n	8004548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000000 	.word	0x20000000

08004620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004634:	d111      	bne.n	800465a <SPI_EndRxTransaction+0x3a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463e:	d004      	beq.n	800464a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	d107      	bne.n	800465a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004658:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004662:	d12a      	bne.n	80046ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d012      	beq.n	8004694 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff49 	bl	8004510 <SPI_WaitFlagStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02d      	beq.n	80046e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e026      	b.n	80046e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	2101      	movs	r1, #1
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff ff36 	bl	8004510 <SPI_WaitFlagStateUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01a      	beq.n	80046e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e013      	b.n	80046e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2101      	movs	r1, #1
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f7ff ff23 	bl	8004510 <SPI_WaitFlagStateUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e000      	b.n	80046e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <SPI_EndRxTxTransaction+0x7c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <SPI_EndRxTxTransaction+0x80>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0d5b      	lsrs	r3, r3, #21
 8004704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004716:	d112      	bne.n	800473e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fef4 	bl	8004510 <SPI_WaitFlagStateUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e00f      	b.n	800475e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	3b01      	subs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b80      	cmp	r3, #128	; 0x80
 8004756:	d0f2      	beq.n	800473e <SPI_EndRxTxTransaction+0x52>
 8004758:	e000      	b.n	800475c <SPI_EndRxTxTransaction+0x70>
        break;
 800475a:	bf00      	nop
  }

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000000 	.word	0x20000000
 800476c:	165e9f81 	.word	0x165e9f81

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e041      	b.n	8004806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc f9a8 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fa2e 	bl	8004c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d122      	bne.n	800486a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d11b      	bne.n	800486a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f06f 0202 	mvn.w	r2, #2
 800483a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f9bf 	bl	8004bd4 <HAL_TIM_IC_CaptureCallback>
 8004856:	e005      	b.n	8004864 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f9b1 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9c2 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d122      	bne.n	80048be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b04      	cmp	r3, #4
 8004884:	d11b      	bne.n	80048be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0204 	mvn.w	r2, #4
 800488e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f995 	bl	8004bd4 <HAL_TIM_IC_CaptureCallback>
 80048aa:	e005      	b.n	80048b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f987 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f998 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d122      	bne.n	8004912 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d11b      	bne.n	8004912 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0208 	mvn.w	r2, #8
 80048e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2204      	movs	r2, #4
 80048e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f96b 	bl	8004bd4 <HAL_TIM_IC_CaptureCallback>
 80048fe:	e005      	b.n	800490c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f95d 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f96e 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d122      	bne.n	8004966 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b10      	cmp	r3, #16
 800492c:	d11b      	bne.n	8004966 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0210 	mvn.w	r2, #16
 8004936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2208      	movs	r2, #8
 800493c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f941 	bl	8004bd4 <HAL_TIM_IC_CaptureCallback>
 8004952:	e005      	b.n	8004960 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f933 	bl	8004bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f944 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d10e      	bne.n	8004992 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0201 	mvn.w	r2, #1
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f90d 	bl	8004bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d10e      	bne.n	80049be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d107      	bne.n	80049be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fabb 	bl	8004f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d10e      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f909 	bl	8004bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0220 	mvn.w	r2, #32
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa85 	bl	8004f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_ConfigClockSource+0x1c>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e0b4      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x186>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	d03e      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xd4>
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a78:	f200 8087 	bhi.w	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	f000 8086 	beq.w	8004b90 <HAL_TIM_ConfigClockSource+0x172>
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d87f      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004a8a:	2b70      	cmp	r3, #112	; 0x70
 8004a8c:	d01a      	beq.n	8004ac4 <HAL_TIM_ConfigClockSource+0xa6>
 8004a8e:	2b70      	cmp	r3, #112	; 0x70
 8004a90:	d87b      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004a92:	2b60      	cmp	r3, #96	; 0x60
 8004a94:	d050      	beq.n	8004b38 <HAL_TIM_ConfigClockSource+0x11a>
 8004a96:	2b60      	cmp	r3, #96	; 0x60
 8004a98:	d877      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004a9a:	2b50      	cmp	r3, #80	; 0x50
 8004a9c:	d03c      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0xfa>
 8004a9e:	2b50      	cmp	r3, #80	; 0x50
 8004aa0:	d873      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d058      	beq.n	8004b58 <HAL_TIM_ConfigClockSource+0x13a>
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d86f      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004aaa:	2b30      	cmp	r3, #48	; 0x30
 8004aac:	d064      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0x15a>
 8004aae:	2b30      	cmp	r3, #48	; 0x30
 8004ab0:	d86b      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d060      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0x15a>
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d867      	bhi.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d05c      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0x15a>
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d05a      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac2:	e062      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6899      	ldr	r1, [r3, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f000 f996 	bl	8004e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
      break;
 8004af0:	e04f      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 f97f 	bl	8004e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b14:	609a      	str	r2, [r3, #8]
      break;
 8004b16:	e03c      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f000 f8f3 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2150      	movs	r1, #80	; 0x50
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f94c 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b36:	e02c      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	461a      	mov	r2, r3
 8004b46:	f000 f912 	bl	8004d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2160      	movs	r1, #96	; 0x60
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f93c 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b56:	e01c      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	461a      	mov	r2, r3
 8004b66:	f000 f8d3 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2140      	movs	r1, #64	; 0x40
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f92c 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b76:	e00c      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f000 f923 	bl	8004dce <TIM_ITRx_SetConfig>
      break;
 8004b88:	e003      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8e:	e000      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a34      	ldr	r2, [pc, #208]	; (8004cf4 <TIM_Base_SetConfig+0xe4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x38>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x38>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <TIM_Base_SetConfig+0xe8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x38>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a30      	ldr	r2, [pc, #192]	; (8004cfc <TIM_Base_SetConfig+0xec>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x38>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0xf0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <TIM_Base_SetConfig+0xe4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01b      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d017      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <TIM_Base_SetConfig+0xe8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <TIM_Base_SetConfig+0xec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00f      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <TIM_Base_SetConfig+0xf0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1f      	ldr	r2, [pc, #124]	; (8004d04 <TIM_Base_SetConfig+0xf4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d007      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <TIM_Base_SetConfig+0xf8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <TIM_Base_SetConfig+0xfc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <TIM_Base_SetConfig+0xe4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d103      	bne.n	8004ce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	615a      	str	r2, [r3, #20]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800

08004d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0210 	bic.w	r2, r3, #16
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f043 0307 	orr.w	r3, r3, #7
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e050      	b.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d013      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10c      	bne.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000

08004f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 f82e 	bl	8004fbc <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	08005000 	.word	0x08005000
 8004f84:	08005000 	.word	0x08005000
 8004f88:	08005000 	.word	0x08005000
 8004f8c:	08005004 	.word	0x08005004

08004f90 <memcpy>:
 8004f90:	440a      	add	r2, r1
 8004f92:	4291      	cmp	r1, r2
 8004f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f98:	d100      	bne.n	8004f9c <memcpy+0xc>
 8004f9a:	4770      	bx	lr
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	d1f9      	bne.n	8004f9e <memcpy+0xe>
 8004faa:	bd10      	pop	{r4, pc}

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
