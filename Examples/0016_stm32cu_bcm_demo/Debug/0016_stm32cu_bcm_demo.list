
0016_stm32cu_bcm_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cac  08005cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb4  08005cb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00015cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000010  08005cc8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005cc8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011338  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  00031374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00033928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001880a  00000000  00000000  00035410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfa  00000000  00000000  0004dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aac0  00000000  00000000  0005e814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f92d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  000f9324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005c70 	.word	0x08005c70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005c70 	.word	0x08005c70

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <TIM1_UP_TIM10_IRQHandler>:
extern YSB_Module_st	YSB_MSG;


/* 10 MS TICK IRQ Handlers */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* increase tick parameters */
  tickParameter++;
 80004dc:	4b5a      	ldr	r3, [pc, #360]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x170>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a59      	ldr	r2, [pc, #356]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x170>)
 80004e4:	6013      	str	r3, [r2, #0]

  /* send sequance parameter */
  static uint8_t sendSequance = 0 ;
  sendSequance = tickParameter % 6 ; /* mod size of sended message count */
 80004e6:	4b58      	ldr	r3, [pc, #352]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x170>)
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	4b58      	ldr	r3, [pc, #352]	; (800064c <TIM1_UP_TIM10_IRQHandler+0x174>)
 80004ec:	fba3 2301 	umull	r2, r3, r3, r1
 80004f0:	089a      	lsrs	r2, r3, #2
 80004f2:	4613      	mov	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	4b54      	ldr	r3, [pc, #336]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000500:	701a      	strb	r2, [r3, #0]

  /* Check Can FIFO's */
  EEM_PERIODIC(&protocol.obj.canPacket);
 8000502:	4854      	ldr	r0, [pc, #336]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000504:	f001 fa46 	bl	8001994 <EEM_PERIODIC>


  /* Send 100ms periodic Data */
  if( ( tickParameter % 10 ) == 0 )
 8000508:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x170>)
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	4b52      	ldr	r3, [pc, #328]	; (8000658 <TIM1_UP_TIM10_IRQHandler+0x180>)
 800050e:	fba3 2301 	umull	r2, r3, r3, r1
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1aca      	subs	r2, r1, r3
 800051e:	2a00      	cmp	r2, #0
 8000520:	f040 808d 	bne.w	800063e <TIM1_UP_TIM10_IRQHandler+0x166>
  {
	  switch( sendSequance )
 8000524:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b06      	cmp	r3, #6
 800052a:	f200 8083 	bhi.w	8000634 <TIM1_UP_TIM10_IRQHandler+0x15c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000551 	.word	0x08000551
 8000538:	08000571 	.word	0x08000571
 800053c:	08000591 	.word	0x08000591
 8000540:	080005b1 	.word	0x080005b1
 8000544:	080005d1 	.word	0x080005d1
 8000548:	080005f1 	.word	0x080005f1
 800054c:	08000613 	.word	0x08000613
	  {
	  case 0 :
		  /* Send MSG03 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 8000550:	2208      	movs	r2, #8
 8000552:	4942      	ldr	r1, [pc, #264]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000554:	4842      	ldr	r0, [pc, #264]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8000556:	f005 fb75 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 800055a:	4b42      	ldr	r3, [pc, #264]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a42      	ldr	r2, [pc, #264]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000560:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000562:	4b41      	ldr	r3, [pc, #260]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000564:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000568:	2100      	movs	r1, #0
 800056a:	483a      	ldr	r0, [pc, #232]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 800056c:	4798      	blx	r3
	  break ;
 800056e:	e062      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 1:
		  /* Send MSG04 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message04.payload[0] , 8);
 8000570:	2208      	movs	r2, #8
 8000572:	493e      	ldr	r1, [pc, #248]	; (800066c <TIM1_UP_TIM10_IRQHandler+0x194>)
 8000574:	483a      	ldr	r0, [pc, #232]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8000576:	f005 fb65 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message04_ID;
 800057a:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	4a3a      	ldr	r2, [pc, #232]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000580:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000582:	4b39      	ldr	r3, [pc, #228]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000584:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000588:	2100      	movs	r1, #0
 800058a:	4832      	ldr	r0, [pc, #200]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 800058c:	4798      	blx	r3
		  break;
 800058e:	e052      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 2:
		  /* Send MSG05 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message05.payload[0] , 8);
 8000590:	2208      	movs	r2, #8
 8000592:	4937      	ldr	r1, [pc, #220]	; (8000670 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8000594:	4832      	ldr	r0, [pc, #200]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8000596:	f005 fb55 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message05_ID;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a32      	ldr	r2, [pc, #200]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005a0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005a4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005a8:	2100      	movs	r1, #0
 80005aa:	482a      	ldr	r0, [pc, #168]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 80005ac:	4798      	blx	r3
	  	  break;
 80005ae:	e042      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 3:
		  /* Send MSG11 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message11.payload[0] , 8);
 80005b0:	2208      	movs	r2, #8
 80005b2:	4930      	ldr	r1, [pc, #192]	; (8000674 <TIM1_UP_TIM10_IRQHandler+0x19c>)
 80005b4:	482a      	ldr	r0, [pc, #168]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005b6:	f005 fb45 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message11_ID;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80005be:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005c0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005c4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4822      	ldr	r0, [pc, #136]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 80005cc:	4798      	blx	r3
	  	  break;
 80005ce:	e032      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 4:
		  /* Send MSG12 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message12.payload[0] , 8);
 80005d0:	2208      	movs	r2, #8
 80005d2:	4929      	ldr	r1, [pc, #164]	; (8000678 <TIM1_UP_TIM10_IRQHandler+0x1a0>)
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005d6:	f005 fb35 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message12_ID;
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80005de:	4a22      	ldr	r2, [pc, #136]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005e0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 80005e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005e8:	2100      	movs	r1, #0
 80005ea:	481a      	ldr	r0, [pc, #104]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 80005ec:	4798      	blx	r3
	  	  break;
 80005ee:	e022      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 5:
		  /* Send MSG19 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message19.payload[0] , 8);
 80005f0:	2208      	movs	r2, #8
 80005f2:	4922      	ldr	r1, [pc, #136]	; (800067c <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005f6:	f005 fb25 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message19_ID;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000602:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000606:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800060a:	2100      	movs	r1, #0
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 800060e:	4798      	blx	r3
	  	  break;
 8000610:	e011      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  case 6:
		  /* Send MSG20 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 8000612:	2208      	movs	r2, #8
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8000618:	f005 fb14 	bl	8005c44 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message20_ID;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000624:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000628:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800062c:	2100      	movs	r1, #0
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000630:	4798      	blx	r3
		  break;
 8000632:	e000      	b.n	8000636 <TIM1_UP_TIM10_IRQHandler+0x15e>

	  default: break;
 8000634:	bf00      	nop

	  }

	  /* Toogle Pin every 100ms */
	  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000636:	2104      	movs	r1, #4
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 800063a:	f003 fcfe 	bl	800403a <HAL_GPIO_TogglePin>
  }

  HAL_TIM_IRQHandler(&htim1);
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8000640:	f004 ff3f 	bl	80054c2 <HAL_TIM_IRQHandler>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000002c 	.word	0x2000002c
 800064c:	aaaaaaab 	.word	0xaaaaaaab
 8000650:	20000164 	.word	0x20000164
 8000654:	2000004c 	.word	0x2000004c
 8000658:	cccccccd 	.word	0xcccccccd
 800065c:	2000025c 	.word	0x2000025c
 8000660:	20000050 	.word	0x20000050
 8000664:	20000258 	.word	0x20000258
 8000668:	20000030 	.word	0x20000030
 800066c:	20000268 	.word	0x20000268
 8000670:	20000278 	.word	0x20000278
 8000674:	200002c0 	.word	0x200002c0
 8000678:	200002d0 	.word	0x200002d0
 800067c:	200002e0 	.word	0x200002e0
 8000680:	40020400 	.word	0x40020400
 8000684:	20000208 	.word	0x20000208

08000688 <getADCValue>:



uint16_t 	getADCValue(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	uint16_t adcValHandle = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <getADCValue+0x34>)
 8000694:	f002 fe84 	bl	80033a0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100);
 8000698:	2164      	movs	r1, #100	; 0x64
 800069a:	4808      	ldr	r0, [pc, #32]	; (80006bc <getADCValue+0x34>)
 800069c:	f002 ff67 	bl	800356e <HAL_ADC_PollForConversion>

	adcValHandle = HAL_ADC_GetValue(&hadc1);
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <getADCValue+0x34>)
 80006a2:	f002 ffef 	bl	8003684 <HAL_ADC_GetValue>
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1);
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <getADCValue+0x34>)
 80006ac:	f002 ff2c 	bl	8003508 <HAL_ADC_Stop>

	return adcValHandle;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000168 	.word	0x20000168

080006c0 <applicationInit>:



void		applicationInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	protocol.ops = ops;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <applicationInit+0x40>)
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <applicationInit+0x44>)
 80006c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80006cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    protocol.ops.EEM_INIT(&protocol.obj);
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <applicationInit+0x40>)
 80006d4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <applicationInit+0x40>)
 80006da:	4798      	blx	r3

    /* Send Test Data */
    memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 80006dc:	2208      	movs	r2, #8
 80006de:	490a      	ldr	r1, [pc, #40]	; (8000708 <applicationInit+0x48>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <applicationInit+0x4c>)
 80006e2:	f005 faaf 	bl	8005c44 <memcpy>
    protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <applicationInit+0x40>)
 80006e8:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 80006ec:	61da      	str	r2, [r3, #28]
    protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <applicationInit+0x40>)
 80006f0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <applicationInit+0x50>)
 80006f8:	4798      	blx	r3

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000030 	.word	0x20000030
 8000704:	08005ca0 	.word	0x08005ca0
 8000708:	08005c88 	.word	0x08005c88
 800070c:	20000050 	.word	0x20000050
 8000710:	2000004c 	.word	0x2000004c

08000714 <applicationMAIN>:



void applicationMAIN(void)
{
 8000714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000718:	af00      	add	r7, sp, #0
	applicationInit();
 800071a:	f7ff ffd1 	bl	80006c0 <applicationInit>

	while(1)
	{
		BCM_MSG.Message11.SPN.BCM_MS1_Speed = (uint64_t)getADCValue();
 800071e:	f7ff ffb3 	bl	8000688 <getADCValue>
 8000722:	4603      	mov	r3, r0
 8000724:	b29b      	uxth	r3, r3
 8000726:	2200      	movs	r2, #0
 8000728:	469a      	mov	sl, r3
 800072a:	4693      	mov	fp, r2
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <applicationMAIN+0x3c>)
 800072e:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	; 0x68
		BCM_MSG.Message12.SPN.BCM_MS2_Speed = ~(uint64_t)getADCValue();
 8000732:	f7ff ffa9 	bl	8000688 <getADCValue>
 8000736:	4603      	mov	r3, r0
 8000738:	b29b      	uxth	r3, r3
 800073a:	2200      	movs	r2, #0
 800073c:	461c      	mov	r4, r3
 800073e:	4615      	mov	r5, r2
 8000740:	ea6f 0804 	mvn.w	r8, r4
 8000744:	ea6f 0905 	mvn.w	r9, r5
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <applicationMAIN+0x3c>)
 800074a:	e9c3 891e 	strd	r8, r9, [r3, #120]	; 0x78
		BCM_MSG.Message11.SPN.BCM_MS1_Speed = (uint64_t)getADCValue();
 800074e:	e7e6      	b.n	800071e <applicationMAIN+0xa>
 8000750:	20000258 	.word	0x20000258

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f002 fd6c 	bl	8003234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f80c 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f94c 	bl	80009fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000764:	f000 f872 	bl	800084c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000768:	f000 f8c2 	bl	80008f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800076c:	f000 f8f6 	bl	800095c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  applicationMAIN();
 8000770:	f7ff ffd0 	bl	8000714 <applicationMAIN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x20>
	...

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 fa6a 	bl	8005c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <SystemClock_Config+0xd0>)
 80007c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007f0:	2354      	movs	r3, #84	; 0x54
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fc35 	bl	8004070 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 f95c 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fe97 	bl	8004560 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000838:	f000 f946 	bl	8000ac8 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3750      	adds	r7, #80	; 0x50
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <MX_ADC1_Init+0x9c>)
 8000862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000866:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800086a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_ADC1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_ADC1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_ADC1_Init+0x98>)
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_ADC1_Init+0xa0>)
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_ADC1_Init+0x98>)
 800089a:	2201      	movs	r2, #1
 800089c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008ae:	f002 fd33 	bl	8003318 <HAL_ADC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 f906 	bl	8000ac8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_ADC1_Init+0x98>)
 80008ce:	f002 fee7 	bl	80036a0 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 f8f6 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000168 	.word	0x20000168
 80008e8:	40012000 	.word	0x40012000
 80008ec:	0f000001 	.word	0x0f000001

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI1_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI1_Init+0x64>)
 8000942:	f003 ffb9 	bl	80048b8 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 f8bc 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001b0 	.word	0x200001b0
 8000958:	40013000 	.word	0x40013000

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM1_Init+0x98>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_TIM1_Init+0x9c>)
 800097c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM1_Init+0x98>)
 8000980:	f242 720f 	movw	r2, #9999	; 0x270f
 8000984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_TIM1_Init+0x98>)
 800098e:	2209      	movs	r2, #9
 8000990:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_TIM1_Init+0x98>)
 80009a6:	f004 fd3d 	bl	8005424 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f88a 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM1_Init+0x98>)
 80009c2:	f004 fe86 	bl	80056d2 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009cc:	f000 f87c 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM1_Init+0x98>)
 80009de:	f005 f88b 	bl	8005af8 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009e8:	f000 f86e 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000208 	.word	0x20000208
 80009f8:	40010000 	.word	0x40010000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_GPIO_Init+0xc0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0xc4>)
 8000a6c:	f003 facc 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a76:	f003 fac7 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <MX_GPIO_Init+0xc4>)
 8000a92:	f003 f935 	bl	8003d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 8000a96:	2304      	movs	r3, #4
 8000a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000aae:	f003 f927 	bl	8003d00 <HAL_GPIO_Init>

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_ADC_MspInit+0x7c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d127      	bne.n	8000b96 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_ADC_MspInit+0x80>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_ADC_MspInit+0x84>)
 8000b92:	f003 f8b5 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_SPI_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c06:	23e0      	movs	r3, #224	; 0xe0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c16:	2305      	movs	r3, #5
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_SPI_MspInit+0x8c>)
 8000c22:	f003 f86d 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d115      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2019      	movs	r0, #25
 8000c70:	f003 f80f 	bl	8003c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f003 f828 	bl	8003cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40023800 	.word	0x40023800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f002 fafe 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f004 ff63 	bl	8005bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fd0d 	bl	8000754 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d48:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8000d4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d50:	200003cc 	.word	0x200003cc

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b088      	sub	sp, #32
 8000d5a:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000d74:	2300      	movs	r3, #0
 8000d76:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000d80:	2300      	movs	r3, #0
 8000d82:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000d90:	2308      	movs	r3, #8
 8000d92:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000da4:	2300      	movs	r3, #0
 8000da6:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000db0:	2300      	movs	r3, #0
 8000db2:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000db4:	2300      	movs	r3, #0
 8000db6:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000ddc:	f002 f874 	bl	8002ec8 <MCP2515_Initialize>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <CANSPI_Initialize+0x9c>
    return -1;
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	e060      	b.n	8000eb4 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000df2:	f002 f88b 	bl	8002f0c <MCP2515_SetConfigMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f083 0301 	eor.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <CANSPI_Initialize+0xb2>
    return -2;
 8000e02:	f06f 0301 	mvn.w	r3, #1
 8000e06:	e055      	b.n	8000eb4 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2123      	movs	r1, #35	; 0x23
 8000e0e:	2020      	movs	r0, #32
 8000e10:	f002 f920 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000e14:	463b      	mov	r3, r7
 8000e16:	461a      	mov	r2, r3
 8000e18:	2127      	movs	r1, #39	; 0x27
 8000e1a:	2024      	movs	r0, #36	; 0x24
 8000e1c:	f002 f91a 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	461a      	mov	r2, r3
 8000e26:	2103      	movs	r1, #3
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f002 f913 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	461a      	mov	r2, r3
 8000e34:	2107      	movs	r1, #7
 8000e36:	2004      	movs	r0, #4
 8000e38:	f002 f90c 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	461a      	mov	r2, r3
 8000e42:	210b      	movs	r1, #11
 8000e44:	2008      	movs	r0, #8
 8000e46:	f002 f905 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2113      	movs	r1, #19
 8000e52:	2010      	movs	r0, #16
 8000e54:	f002 f8fe 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2117      	movs	r1, #23
 8000e60:	2014      	movs	r0, #20
 8000e62:	f002 f8f7 	bl	8003054 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	211b      	movs	r1, #27
 8000e6e:	2018      	movs	r0, #24
 8000e70:	f002 f8f0 	bl	8003054 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000e74:	2104      	movs	r1, #4
 8000e76:	2060      	movs	r0, #96	; 0x60
 8000e78:	f002 f8c8 	bl	800300c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	2070      	movs	r0, #112	; 0x70
 8000e80:	f002 f8c4 	bl	800300c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000e84:	2100      	movs	r1, #0
 8000e86:	202a      	movs	r0, #42	; 0x2a
 8000e88:	f002 f8c0 	bl	800300c <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000e8c:	21e5      	movs	r1, #229	; 0xe5
 8000e8e:	2029      	movs	r0, #41	; 0x29
 8000e90:	f002 f8bc 	bl	800300c <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000e94:	2183      	movs	r1, #131	; 0x83
 8000e96:	2028      	movs	r0, #40	; 0x28
 8000e98:	f002 f8b8 	bl	800300c <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000e9c:	f002 f854 	bl	8002f48 <MCP2515_SetNormalMode>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f083 0301 	eor.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <CANSPI_Initialize+0x15c>
    return -3;
 8000eac:	f06f 0302 	mvn.w	r3, #2
 8000eb0:	e000      	b.n	8000eb4 <CANSPI_Initialize+0x15e>

  return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000ee0:	f002 f926 	bl	8003130 <MCP2515_ReadStatus>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <CANSPI_Transmit+0xf0>)
 8000eea:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <CANSPI_Transmit+0xf0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <CANSPI_Transmit+0x6c>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f06:	4619      	mov	r1, r3
 8000f08:	f000 f92b 	bl	8001162 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	795a      	ldrb	r2, [r3, #5]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3306      	adds	r3, #6
 8000f14:	4924      	ldr	r1, [pc, #144]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f16:	2040      	movs	r0, #64	; 0x40
 8000f18:	f002 f8c6 	bl	80030a8 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000f1c:	2081      	movs	r0, #129	; 0x81
 8000f1e:	f002 f8ed 	bl	80030fc <MCP2515_RequestToSend>

    returnValue = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e03a      	b.n	8000f9e <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <CANSPI_Transmit+0xf0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d116      	bne.n	8000f64 <CANSPI_Transmit+0xa8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f42:	4619      	mov	r1, r3
 8000f44:	f000 f90d 	bl	8001162 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	795a      	ldrb	r2, [r3, #5]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3306      	adds	r3, #6
 8000f50:	4915      	ldr	r1, [pc, #84]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f52:	2042      	movs	r0, #66	; 0x42
 8000f54:	f002 f8a8 	bl	80030a8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000f58:	2082      	movs	r0, #130	; 0x82
 8000f5a:	f002 f8cf 	bl	80030fc <MCP2515_RequestToSend>

    returnValue = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e01c      	b.n	8000f9e <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <CANSPI_Transmit+0xf0>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d115      	bne.n	8000f9e <CANSPI_Transmit+0xe2>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f000 f8ef 	bl	8001162 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	795a      	ldrb	r2, [r3, #5]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3306      	adds	r3, #6
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <CANSPI_Transmit+0xec>)
 8000f8e:	2044      	movs	r0, #68	; 0x44
 8000f90:	f002 f88a 	bl	80030a8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000f94:	2084      	movs	r0, #132	; 0x84
 8000f96:	f002 f8b1 	bl	80030fc <MCP2515_RequestToSend>

    returnValue = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000254 	.word	0x20000254
 8000fac:	20000250 	.word	0x20000250

08000fb0 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000fbc:	f002 f8d4 	bl	8003168 <MCP2515_GetRxStatus>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d068      	beq.n	80010a2 <CANSPI_Receive+0xf2>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b40      	cmp	r3, #64	; 0x40
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2bc0      	cmp	r3, #192	; 0xc0
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	220d      	movs	r2, #13
 8001002:	4619      	mov	r1, r3
 8001004:	2090      	movs	r0, #144	; 0x90
 8001006:	f001 ffdf 	bl	8002fc8 <MCP2515_ReadRxSequence>
 800100a:	e00c      	b.n	8001026 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800100c:	7b3b      	ldrb	r3, [r7, #12]
 800100e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b80      	cmp	r3, #128	; 0x80
 8001016:	d106      	bne.n	8001026 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	220d      	movs	r2, #13
 800101e:	4619      	mov	r1, r3
 8001020:	2094      	movs	r0, #148	; 0x94
 8001022:	f001 ffd1 	bl	8002fc8 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	f003 0318 	and.w	r3, r3, #24
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b10      	cmp	r3, #16
 8001030:	d10d      	bne.n	800104e <CANSPI_Receive+0x9e>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2202      	movs	r2, #2
 8001036:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001038:	7cb8      	ldrb	r0, [r7, #18]
 800103a:	7cf9      	ldrb	r1, [r7, #19]
 800103c:	7c3a      	ldrb	r2, [r7, #16]
 800103e:	7c7b      	ldrb	r3, [r7, #17]
 8001040:	f000 f834 	bl	80010ac <convertReg2ExtendedCANid>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8c3 2001 	str.w	r2, [r3, #1]
 800104c:	e00c      	b.n	8001068 <CANSPI_Receive+0xb8>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001054:	7c3b      	ldrb	r3, [r7, #16]
 8001056:	7c7a      	ldrb	r2, [r7, #17]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f864 	bl	8001128 <convertReg2StandardCANid>
 8001060:	4602      	mov	r2, r0
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8c3 2001 	str.w	r2, [r3, #1]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001068:	7d3a      	ldrb	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	715a      	strb	r2, [r3, #5]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800106e:	7d7a      	ldrb	r2, [r7, #21]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	719a      	strb	r2, [r3, #6]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001074:	7dba      	ldrb	r2, [r7, #22]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	71da      	strb	r2, [r3, #7]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800107a:	7dfa      	ldrb	r2, [r7, #23]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001080:	7e3a      	ldrb	r2, [r7, #24]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001086:	7e7a      	ldrb	r2, [r7, #25]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800108c:	7eba      	ldrb	r2, [r7, #26]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001092:	7efa      	ldrb	r2, [r7, #27]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001098:	7f3a      	ldrb	r2, [r7, #28]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	735a      	strb	r2, [r3, #13]

    returnValue = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80010ac:	b490      	push	{r4, r7}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4623      	mov	r3, r4
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	4603      	mov	r3, r0
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	460b      	mov	r3, r1
 80010c4:	717b      	strb	r3, [r7, #5]
 80010c6:	4613      	mov	r3, r2
 80010c8:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80010d2:	793b      	ldrb	r3, [r7, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4413      	add	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4413      	add	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4413      	add	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800111c:	697b      	ldr	r3, [r7, #20]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bc90      	pop	{r4, r7}
 8001126:	4770      	bx	lr

08001128 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	460b      	mov	r3, r1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d12e      	bne.n	80011d8 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f023 031f 	bic.w	r3, r3, #31
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	4413      	add	r3, r2
 80011b4:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	3308      	adds	r3, #8
 80011ba:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	f023 0314 	bic.w	r3, r3, #20
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80011d6:	e013      	b.n	8001200 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09c      	sub	sp, #112	; 0x70
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8001214:	2301      	movs	r3, #1
 8001216:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	param->ringBuffer.tail = 0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	param->ringBuffer.full = EEM_FALSE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

#if defined(SPI2CAN_Protocol)

	EEM_U8 ret;

	ret = CANSPI_Initialize();
 8001232:	f7ff fd90 	bl	8000d56 <CANSPI_Initialize>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#endif

#endif

	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2264      	movs	r2, #100	; 0x64
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fd0b 	bl	8005c60 <memset>

	ID[MSG01_INDEX].Pages.priority 		= PRIORITY_010 ;
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	2202      	movs	r2, #2
 800124e:	f362 0384 	bfi	r3, r2, #2, #3
 8001252:	72fb      	strb	r3, [r7, #11]
	ID[MSG01_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	f36f 0341 	bfc	r3, #1, #1
 800125a:	72fb      	strb	r3, [r7, #11]
	ID[MSG01_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f36f 0300 	bfc	r3, #0, #1
 8001262:	72fb      	strb	r3, [r7, #11]
	ID[MSG01_INDEX].Pages.messageID 	= MESSAGE01 ;
 8001264:	2301      	movs	r3, #1
 8001266:	72bb      	strb	r3, [r7, #10]
	ID[MSG01_INDEX].Pages.DA 			= BCM_NODE;
 8001268:	2311      	movs	r3, #17
 800126a:	727b      	strb	r3, [r7, #9]
	ID[MSG01_INDEX].Pages.SA 			= HVAC_NODE ;
 800126c:	2322      	movs	r3, #34	; 0x22
 800126e:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message01_ID = ID[MSG01_INDEX].identifier ;
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4ae5      	ldr	r2, [pc, #916]	; (8001608 <EEM_INIT+0x3fc>)
 8001274:	6013      	str	r3, [r2, #0]

	ID[MSG02_INDEX].Pages.priority 		= PRIORITY_010 ;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2202      	movs	r2, #2
 800127a:	f362 0384 	bfi	r3, r2, #2, #3
 800127e:	73fb      	strb	r3, [r7, #15]
	ID[MSG02_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f36f 0341 	bfc	r3, #1, #1
 8001286:	73fb      	strb	r3, [r7, #15]
	ID[MSG02_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f36f 0300 	bfc	r3, #0, #1
 800128e:	73fb      	strb	r3, [r7, #15]
	ID[MSG02_INDEX].Pages.messageID 	= MESSAGE02 ;
 8001290:	2302      	movs	r3, #2
 8001292:	73bb      	strb	r3, [r7, #14]
	ID[MSG02_INDEX].Pages.DA 			= BCM_NODE;
 8001294:	2311      	movs	r3, #17
 8001296:	737b      	strb	r3, [r7, #13]
	ID[MSG02_INDEX].Pages.SA 			= HVAC_NODE ;
 8001298:	2322      	movs	r3, #34	; 0x22
 800129a:	733b      	strb	r3, [r7, #12]
	HVAC_MSG.Message02_ID = ID[MSG02_INDEX].identifier ;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4ada      	ldr	r2, [pc, #872]	; (8001608 <EEM_INIT+0x3fc>)
 80012a0:	6113      	str	r3, [r2, #16]

	ID[MSG03_INDEX].Pages.priority 		= PRIORITY_100 ;
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	2204      	movs	r2, #4
 80012a6:	f362 0384 	bfi	r3, r2, #2, #3
 80012aa:	74fb      	strb	r3, [r7, #19]
	ID[MSG03_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80012ac:	7cfb      	ldrb	r3, [r7, #19]
 80012ae:	f36f 0341 	bfc	r3, #1, #1
 80012b2:	74fb      	strb	r3, [r7, #19]
	ID[MSG03_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80012b4:	7cfb      	ldrb	r3, [r7, #19]
 80012b6:	f36f 0300 	bfc	r3, #0, #1
 80012ba:	74fb      	strb	r3, [r7, #19]
	ID[MSG03_INDEX].Pages.messageID 	= MESSAGE03 ;
 80012bc:	2303      	movs	r3, #3
 80012be:	74bb      	strb	r3, [r7, #18]
	ID[MSG03_INDEX].Pages.DA 			= TLM_NODE;
 80012c0:	2388      	movs	r3, #136	; 0x88
 80012c2:	747b      	strb	r3, [r7, #17]
	ID[MSG03_INDEX].Pages.SA 			= BCM_NODE;
 80012c4:	2311      	movs	r3, #17
 80012c6:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message03_ID = ID[MSG03_INDEX].identifier ;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4ad0      	ldr	r2, [pc, #832]	; (800160c <EEM_INIT+0x400>)
 80012cc:	6013      	str	r3, [r2, #0]

	ID[MSG04_INDEX].Pages.priority 		= PRIORITY_100 ;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2204      	movs	r2, #4
 80012d2:	f362 0384 	bfi	r3, r2, #2, #3
 80012d6:	75fb      	strb	r3, [r7, #23]
	ID[MSG04_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	f36f 0341 	bfc	r3, #1, #1
 80012de:	75fb      	strb	r3, [r7, #23]
	ID[MSG04_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	f36f 0300 	bfc	r3, #0, #1
 80012e6:	75fb      	strb	r3, [r7, #23]
	ID[MSG04_INDEX].Pages.messageID 	= MESSAGE04 ;
 80012e8:	2304      	movs	r3, #4
 80012ea:	75bb      	strb	r3, [r7, #22]
	ID[MSG04_INDEX].Pages.DA 			= SCB_NODE;
 80012ec:	2333      	movs	r3, #51	; 0x33
 80012ee:	757b      	strb	r3, [r7, #21]
	ID[MSG04_INDEX].Pages.SA 			= BCM_NODE;
 80012f0:	2311      	movs	r3, #17
 80012f2:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message04_ID = ID[MSG04_INDEX].identifier ;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	4ac5      	ldr	r2, [pc, #788]	; (800160c <EEM_INIT+0x400>)
 80012f8:	60d3      	str	r3, [r2, #12]

	ID[MSG05_INDEX].Pages.priority 		= PRIORITY_100 ;
 80012fa:	7efb      	ldrb	r3, [r7, #27]
 80012fc:	2204      	movs	r2, #4
 80012fe:	f362 0384 	bfi	r3, r2, #2, #3
 8001302:	76fb      	strb	r3, [r7, #27]
	ID[MSG05_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001304:	7efb      	ldrb	r3, [r7, #27]
 8001306:	f36f 0341 	bfc	r3, #1, #1
 800130a:	76fb      	strb	r3, [r7, #27]
	ID[MSG05_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800130c:	7efb      	ldrb	r3, [r7, #27]
 800130e:	f36f 0300 	bfc	r3, #0, #1
 8001312:	76fb      	strb	r3, [r7, #27]
	ID[MSG05_INDEX].Pages.messageID 	= MESSAGE05 ;
 8001314:	2305      	movs	r3, #5
 8001316:	76bb      	strb	r3, [r7, #26]
	ID[MSG05_INDEX].Pages.DA 			= SCB_NODE;
 8001318:	2333      	movs	r3, #51	; 0x33
 800131a:	767b      	strb	r3, [r7, #25]
	ID[MSG05_INDEX].Pages.SA 			= BCM_NODE;
 800131c:	2311      	movs	r3, #17
 800131e:	763b      	strb	r3, [r7, #24]
	BCM_MSG.Message05_ID = ID[MSG05_INDEX].identifier ;
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4aba      	ldr	r2, [pc, #744]	; (800160c <EEM_INIT+0x400>)
 8001324:	61d3      	str	r3, [r2, #28]

	ID[MSG06_INDEX].Pages.priority 		= PRIORITY_100 ;
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2204      	movs	r2, #4
 800132a:	f362 0384 	bfi	r3, r2, #2, #3
 800132e:	77fb      	strb	r3, [r7, #31]
	ID[MSG06_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	f36f 0341 	bfc	r3, #1, #1
 8001336:	77fb      	strb	r3, [r7, #31]
	ID[MSG06_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	f36f 0300 	bfc	r3, #0, #1
 800133e:	77fb      	strb	r3, [r7, #31]
	ID[MSG06_INDEX].Pages.messageID 	= MESSAGE06 ;
 8001340:	2306      	movs	r3, #6
 8001342:	77bb      	strb	r3, [r7, #30]
	ID[MSG06_INDEX].Pages.DA 			= SCB_NODE;
 8001344:	2333      	movs	r3, #51	; 0x33
 8001346:	777b      	strb	r3, [r7, #29]
	ID[MSG06_INDEX].Pages.SA 			= BMS_NODE;
 8001348:	2344      	movs	r3, #68	; 0x44
 800134a:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message06_ID = ID[MSG06_INDEX].identifier ;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4ab0      	ldr	r2, [pc, #704]	; (8001610 <EEM_INIT+0x404>)
 8001350:	6013      	str	r3, [r2, #0]

	ID[MSG07_INDEX].Pages.priority 		= PRIORITY_100 ;
 8001352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001356:	2204      	movs	r2, #4
 8001358:	f362 0384 	bfi	r3, r2, #2, #3
 800135c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG07_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001364:	f36f 0341 	bfc	r3, #1, #1
 8001368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG07_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800136c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001370:	f36f 0300 	bfc	r3, #0, #1
 8001374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[MSG07_INDEX].Pages.messageID 	= MESSAGE07 ;
 8001378:	2307      	movs	r3, #7
 800137a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[MSG07_INDEX].Pages.DA 			= SCB_NODE;
 800137e:	2333      	movs	r3, #51	; 0x33
 8001380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[MSG07_INDEX].Pages.SA 			= BMS_NODE;
 8001384:	2344      	movs	r3, #68	; 0x44
 8001386:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message07_ID = ID[MSG07_INDEX].identifier ;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	4aa0      	ldr	r2, [pc, #640]	; (8001610 <EEM_INIT+0x404>)
 800138e:	60d3      	str	r3, [r2, #12]

	ID[MSG08_INDEX].Pages.priority 		= PRIORITY_100 ;
 8001390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001394:	2204      	movs	r2, #4
 8001396:	f362 0384 	bfi	r3, r2, #2, #3
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG08_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800139e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a2:	f36f 0341 	bfc	r3, #1, #1
 80013a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG08_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80013aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ae:	f36f 0300 	bfc	r3, #0, #1
 80013b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[MSG08_INDEX].Pages.messageID 	= MESSAGE08 ;
 80013b6:	2308      	movs	r3, #8
 80013b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[MSG08_INDEX].Pages.DA 			= SCB_NODE;
 80013bc:	2333      	movs	r3, #51	; 0x33
 80013be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[MSG08_INDEX].Pages.SA 			= BMS_NODE;
 80013c2:	2344      	movs	r3, #68	; 0x44
 80013c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message08_ID = ID[MSG08_INDEX].identifier ;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	4a91      	ldr	r2, [pc, #580]	; (8001610 <EEM_INIT+0x404>)
 80013cc:	6193      	str	r3, [r2, #24]

	ID[MSG09_INDEX].Pages.priority 		= PRIORITY_100 ;
 80013ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013d2:	2204      	movs	r2, #4
 80013d4:	f362 0384 	bfi	r3, r2, #2, #3
 80013d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG09_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80013dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013e0:	f36f 0341 	bfc	r3, #1, #1
 80013e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG09_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80013e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013ec:	f36f 0300 	bfc	r3, #0, #1
 80013f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[MSG09_INDEX].Pages.messageID 	= MESSAGE09 ;
 80013f4:	2309      	movs	r3, #9
 80013f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[MSG09_INDEX].Pages.DA 			= SCB_NODE;
 80013fa:	2333      	movs	r3, #51	; 0x33
 80013fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[MSG09_INDEX].Pages.SA 			= BMS_NODE;
 8001400:	2344      	movs	r3, #68	; 0x44
 8001402:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message09_ID = ID[MSG09_INDEX].identifier ;
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	4a81      	ldr	r2, [pc, #516]	; (8001610 <EEM_INIT+0x404>)
 800140a:	6253      	str	r3, [r2, #36]	; 0x24

	ID[MSG10_INDEX].Pages.priority 		= PRIORITY_100 ;
 800140c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001410:	2204      	movs	r2, #4
 8001412:	f362 0384 	bfi	r3, r2, #2, #3
 8001416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG10_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800141a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800141e:	f36f 0341 	bfc	r3, #1, #1
 8001422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG10_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800142a:	f36f 0300 	bfc	r3, #0, #1
 800142e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[MSG10_INDEX].Pages.messageID 	= MESSAGE10 ;
 8001432:	2310      	movs	r3, #16
 8001434:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[MSG10_INDEX].Pages.DA 			= SCB_NODE;
 8001438:	2333      	movs	r3, #51	; 0x33
 800143a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[MSG10_INDEX].Pages.SA 			= BMS_NODE;
 800143e:	2344      	movs	r3, #68	; 0x44
 8001440:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BMS_MSG.Message10_ID = ID[MSG10_INDEX].identifier ;
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	4a72      	ldr	r2, [pc, #456]	; (8001610 <EEM_INIT+0x404>)
 8001448:	6313      	str	r3, [r2, #48]	; 0x30

	ID[MSG11_INDEX].Pages.priority 		= PRIORITY_001 ;
 800144a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144e:	2201      	movs	r2, #1
 8001450:	f362 0384 	bfi	r3, r2, #2, #3
 8001454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG11_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800145c:	f36f 0341 	bfc	r3, #1, #1
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG11_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001468:	f36f 0300 	bfc	r3, #0, #1
 800146c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[MSG11_INDEX].Pages.messageID 	= MESSAGE11 ;
 8001470:	2311      	movs	r3, #17
 8001472:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[MSG11_INDEX].Pages.DA 			= MS1_NODE;
 8001476:	2355      	movs	r3, #85	; 0x55
 8001478:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[MSG11_INDEX].Pages.SA 			= BCM_NODE ;
 800147c:	2311      	movs	r3, #17
 800147e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message11_ID = ID[MSG11_INDEX].identifier ;
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	4a61      	ldr	r2, [pc, #388]	; (800160c <EEM_INIT+0x400>)
 8001486:	6653      	str	r3, [r2, #100]	; 0x64

	ID[MSG12_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800148c:	2201      	movs	r2, #1
 800148e:	f362 0384 	bfi	r3, r2, #2, #3
 8001492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG12_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800149a:	f36f 0341 	bfc	r3, #1, #1
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG12_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80014a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a6:	f36f 0300 	bfc	r3, #0, #1
 80014aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[MSG12_INDEX].Pages.messageID 	= MESSAGE12 ;
 80014ae:	2312      	movs	r3, #18
 80014b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[MSG12_INDEX].Pages.DA 			= MS2_NODE;
 80014b4:	2366      	movs	r3, #102	; 0x66
 80014b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[MSG12_INDEX].Pages.SA 			= BCM_NODE ;
 80014ba:	2311      	movs	r3, #17
 80014bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	BCM_MSG.Message12_ID = ID[MSG12_INDEX].identifier ;
 80014c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c2:	4a52      	ldr	r2, [pc, #328]	; (800160c <EEM_INIT+0x400>)
 80014c4:	6713      	str	r3, [r2, #112]	; 0x70

	ID[MSG13_INDEX].Pages.priority 		= PRIORITY_001 ;
 80014c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014ca:	2201      	movs	r2, #1
 80014cc:	f362 0384 	bfi	r3, r2, #2, #3
 80014d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG13_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80014d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014d8:	f36f 0341 	bfc	r3, #1, #1
 80014dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG13_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80014e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014e4:	f36f 0300 	bfc	r3, #0, #1
 80014e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[MSG13_INDEX].Pages.messageID 	= MESSAGE13 ;
 80014ec:	2313      	movs	r3, #19
 80014ee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[MSG13_INDEX].Pages.DA 			= BCM_NODE ;
 80014f2:	2311      	movs	r3, #17
 80014f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[MSG13_INDEX].Pages.SA 			= MS1_NODE ;
 80014f8:	2355      	movs	r3, #85	; 0x55
 80014fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message13_ID = ID[MSG13_INDEX].identifier ;
 80014fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001500:	4a44      	ldr	r2, [pc, #272]	; (8001614 <EEM_INIT+0x408>)
 8001502:	6013      	str	r3, [r2, #0]

	ID[MSG14_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001508:	2201      	movs	r2, #1
 800150a:	f362 0384 	bfi	r3, r2, #2, #3
 800150e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG14_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001512:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001516:	f36f 0341 	bfc	r3, #1, #1
 800151a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG14_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800151e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001522:	f36f 0300 	bfc	r3, #0, #1
 8001526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[MSG14_INDEX].Pages.messageID 	= MESSAGE14 ;
 800152a:	2314      	movs	r3, #20
 800152c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[MSG14_INDEX].Pages.DA 			= BCM_NODE ;
 8001530:	2311      	movs	r3, #17
 8001532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[MSG14_INDEX].Pages.SA 			= MS1_NODE ;
 8001536:	2355      	movs	r3, #85	; 0x55
 8001538:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message14_ID = ID[MSG14_INDEX].identifier ;
 800153c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153e:	4a35      	ldr	r2, [pc, #212]	; (8001614 <EEM_INIT+0x408>)
 8001540:	60d3      	str	r3, [r2, #12]

	ID[MSG15_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001546:	2201      	movs	r2, #1
 8001548:	f362 0384 	bfi	r3, r2, #2, #3
 800154c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG15_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001550:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001554:	f36f 0341 	bfc	r3, #1, #1
 8001558:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG15_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800155c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001560:	f36f 0300 	bfc	r3, #0, #1
 8001564:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[MSG15_INDEX].Pages.messageID 	= MESSAGE15 ;
 8001568:	2315      	movs	r3, #21
 800156a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[MSG15_INDEX].Pages.DA 			= BCM_NODE ;
 800156e:	2311      	movs	r3, #17
 8001570:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[MSG15_INDEX].Pages.SA 			= MS1_NODE ;
 8001574:	2355      	movs	r3, #85	; 0x55
 8001576:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS1_MSG.Message15_ID = ID[MSG15_INDEX].identifier ;
 800157a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157c:	4a25      	ldr	r2, [pc, #148]	; (8001614 <EEM_INIT+0x408>)
 800157e:	6193      	str	r3, [r2, #24]

    ID[MSG16_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001584:	2201      	movs	r2, #1
 8001586:	f362 0384 	bfi	r3, r2, #2, #3
 800158a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[MSG16_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800158e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001592:	f36f 0341 	bfc	r3, #1, #1
 8001596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[MSG16_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800159a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800159e:	f36f 0300 	bfc	r3, #0, #1
 80015a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[MSG16_INDEX].Pages.messageID 	= MESSAGE16 ;
 80015a6:	2316      	movs	r3, #22
 80015a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ID[MSG16_INDEX].Pages.DA 			= BCM_NODE ;
 80015ac:	2311      	movs	r3, #17
 80015ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    ID[MSG16_INDEX].Pages.SA 			= MS2_NODE ;
 80015b2:	2366      	movs	r3, #102	; 0x66
 80015b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    MS2_MSG.Message16_ID = ID[MSG16_INDEX].identifier ;
 80015b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <EEM_INIT+0x40c>)
 80015bc:	6013      	str	r3, [r2, #0]

	ID[MSG17_INDEX].Pages.priority 		= PRIORITY_001 ;
 80015be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015c2:	2201      	movs	r2, #1
 80015c4:	f362 0384 	bfi	r3, r2, #2, #3
 80015c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG17_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80015cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015d0:	f36f 0341 	bfc	r3, #1, #1
 80015d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG17_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80015d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015dc:	f36f 0300 	bfc	r3, #0, #1
 80015e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[MSG17_INDEX].Pages.messageID 	= MESSAGE17 ;
 80015e4:	2317      	movs	r3, #23
 80015e6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[MSG17_INDEX].Pages.DA 			= BCM_NODE ;
 80015ea:	2311      	movs	r3, #17
 80015ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[MSG17_INDEX].Pages.SA 			= MS2_NODE ;
 80015f0:	2366      	movs	r3, #102	; 0x66
 80015f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message17_ID = ID[MSG17_INDEX].identifier ;
 80015f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <EEM_INIT+0x40c>)
 80015fa:	60d3      	str	r3, [r2, #12]

	ID[MSG18_INDEX].Pages.priority 		= PRIORITY_001 ;
 80015fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001600:	2201      	movs	r2, #1
 8001602:	f362 0384 	bfi	r3, r2, #2, #3
 8001606:	e009      	b.n	800161c <EEM_INIT+0x410>
 8001608:	200002f8 	.word	0x200002f8
 800160c:	20000258 	.word	0x20000258
 8001610:	20000324 	.word	0x20000324
 8001614:	20000360 	.word	0x20000360
 8001618:	20000388 	.word	0x20000388
 800161c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG18_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001620:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001624:	f36f 0341 	bfc	r3, #1, #1
 8001628:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG18_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800162c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001630:	f36f 0300 	bfc	r3, #0, #1
 8001634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[MSG18_INDEX].Pages.messageID 	= MESSAGE18 ;
 8001638:	2318      	movs	r3, #24
 800163a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[MSG18_INDEX].Pages.DA 			= BCM_NODE ;
 800163e:	2311      	movs	r3, #17
 8001640:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[MSG18_INDEX].Pages.SA 			= MS2_NODE ;
 8001644:	2366      	movs	r3, #102	; 0x66
 8001646:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	MS2_MSG.Message18_ID = ID[MSG18_INDEX].identifier ;
 800164a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800164c:	4a55      	ldr	r2, [pc, #340]	; (80017a4 <EEM_INIT+0x598>)
 800164e:	6193      	str	r3, [r2, #24]

	ID[MSG19_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001650:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001654:	2201      	movs	r2, #1
 8001656:	f362 0384 	bfi	r3, r2, #2, #3
 800165a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG19_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800165e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001662:	f36f 0341 	bfc	r3, #1, #1
 8001666:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG19_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 800166a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800166e:	f36f 0300 	bfc	r3, #0, #1
 8001672:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[MSG19_INDEX].Pages.messageID 	= MESSAGE19 ;
 8001676:	2319      	movs	r3, #25
 8001678:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[MSG19_INDEX].Pages.DA 			= BCM_NODE ;
 800167c:	2311      	movs	r3, #17
 800167e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[MSG19_INDEX].Pages.SA 			= MS1_NODE ;
 8001682:	2355      	movs	r3, #85	; 0x55
 8001684:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message19_ID = ID[MSG19_INDEX].identifier ;
 8001688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <EEM_INIT+0x59c>)
 800168c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	ID[MSG20_INDEX].Pages.priority 		= PRIORITY_001 ;
 8001690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001694:	2201      	movs	r2, #1
 8001696:	f362 0384 	bfi	r3, r2, #2, #3
 800169a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG20_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800169e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016a2:	f36f 0341 	bfc	r3, #1, #1
 80016a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG20_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80016aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016ae:	f36f 0300 	bfc	r3, #0, #1
 80016b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[MSG20_INDEX].Pages.messageID 	= MESSAGE20 ;
 80016b6:	2320      	movs	r3, #32
 80016b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[MSG20_INDEX].Pages.DA 			= BCM_NODE ;
 80016bc:	2311      	movs	r3, #17
 80016be:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[MSG20_INDEX].Pages.SA 			= MS2_NODE ;
 80016c2:	2366      	movs	r3, #102	; 0x66
 80016c4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	BCM_MSG.Message20_ID = ID[MSG20_INDEX].identifier ;
 80016c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ca:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <EEM_INIT+0x59c>)
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	ID[MSG21_INDEX].Pages.priority 		= PRIORITY_011 ;
 80016d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016d4:	2203      	movs	r2, #3
 80016d6:	f362 0384 	bfi	r3, r2, #2, #3
 80016da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG21_INDEX].Pages.reserved 		= NOT_RESERVED ;
 80016de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016e2:	f36f 0341 	bfc	r3, #1, #1
 80016e6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG21_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 80016ea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016ee:	f36f 0300 	bfc	r3, #0, #1
 80016f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[MSG21_INDEX].Pages.messageID 	= MESSAGE21 ;
 80016f6:	2321      	movs	r3, #33	; 0x21
 80016f8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[MSG21_INDEX].Pages.DA 			= BCM_NODE;
 80016fc:	2311      	movs	r3, #17
 80016fe:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[MSG21_INDEX].Pages.SA 			= SCB_NODE;
 8001702:	2333      	movs	r3, #51	; 0x33
 8001704:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	SCB_MSG.Message21_ID = ID[MSG21_INDEX].identifier ;
 8001708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <EEM_INIT+0x5a0>)
 800170c:	6013      	str	r3, [r2, #0]

	ID[MSG22_INDEX].Pages.priority 		= PRIORITY_111 ;
 800170e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001712:	f043 031c 	orr.w	r3, r3, #28
 8001716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG22_INDEX].Pages.reserved 		= NOT_RESERVED ;
 800171a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800171e:	f36f 0341 	bfc	r3, #1, #1
 8001722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG22_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800172a:	f36f 0300 	bfc	r3, #0, #1
 800172e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[MSG22_INDEX].Pages.messageID 	= MESSAGE22 ;
 8001732:	2322      	movs	r3, #34	; 0x22
 8001734:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[MSG22_INDEX].Pages.DA 			= BCM_NODE;
 8001738:	2311      	movs	r3, #17
 800173a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[MSG22_INDEX].Pages.SA 			= TLM_NODE;
 800173e:	2388      	movs	r3, #136	; 0x88
 8001740:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message22_ID = 	ID[MSG22_INDEX].identifier ;
 8001744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001746:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <EEM_INIT+0x5a4>)
 8001748:	6013      	str	r3, [r2, #0]

	ID[MSG23_INDEX].Pages.priority 		= PRIORITY_111 ;
 800174a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800174e:	f043 031c 	orr.w	r3, r3, #28
 8001752:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[MSG23_INDEX].Pages.reserved 		= NOT_RESERVED ;
 8001756:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800175a:	f36f 0341 	bfc	r3, #1, #1
 800175e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[MSG23_INDEX].Pages.dataPoint 	= DATAPAGE_0 ;
 8001762:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001766:	f36f 0300 	bfc	r3, #0, #1
 800176a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[MSG23_INDEX].Pages.messageID 	= MESSAGE23 ;
 800176e:	2323      	movs	r3, #35	; 0x23
 8001770:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	ID[MSG23_INDEX].Pages.DA 			= BCM_NODE;
 8001774:	2311      	movs	r3, #17
 8001776:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	ID[MSG23_INDEX].Pages.SA 			= TLM_NODE;
 800177a:	2388      	movs	r3, #136	; 0x88
 800177c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	TLM_MSG.Message23_ID = 	ID[MSG23_INDEX].identifier ;
 8001780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <EEM_INIT+0x5a4>)
 8001784:	60d3      	str	r3, [r2, #12]


#if defined( BCM_MODULE )
	if( EEM_FILTER_BCM( param ) != EEM_EOK ) return EEM_ERROR;
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 fb91 	bl	8002eae <EEM_FILTER_BCM>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <EEM_INIT+0x58a>
 8001792:	2300      	movs	r3, #0
 8001794:	e001      	b.n	800179a <EEM_INIT+0x58e>

#endif

#endif

	return result;
 8001796:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800179a:	4618      	mov	r0, r3
 800179c:	3770      	adds	r7, #112	; 0x70
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000388 	.word	0x20000388
 80017a8:	20000258 	.word	0x20000258
 80017ac:	20000318 	.word	0x20000318
 80017b0:	200003b0 	.word	0x200003b0

080017b4 <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 80017b4:	b490      	push	{r4, r7}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e011      	b.n	80017ec <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80017d0:	461c      	mov	r4, r3
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	440a      	add	r2, r1
 80017d8:	7910      	ldrb	r0, [r2, #4]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	00e2      	lsls	r2, r4, #3
 80017de:	440a      	add	r2, r1
 80017e0:	4413      	add	r3, r2
 80017e2:	4602      	mov	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	3301      	adds	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d9ea      	bls.n	80017c8 <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80017f8:	461a      	mov	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3228      	adds	r2, #40	; 0x28
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <EEM_PUSH+0xa8>)
 800181e:	fb83 1302 	smull	r1, r3, r3, r2
 8001822:	10d9      	asrs	r1, r3, #3
 8001824:	17d3      	asrs	r3, r2, #31
 8001826:	1ac9      	subs	r1, r1, r3
 8001828:	460b      	mov	r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	1ad1      	subs	r1, r2, r3
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001846:	429a      	cmp	r2, r3
 8001848:	d103      	bne.n	8001852 <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bc90      	pop	{r4, r7}
 800185a:	4770      	bx	lr
 800185c:	66666667 	.word	0x66666667

08001860 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e011      	b.n	8001898 <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800187a:	4619      	mov	r1, r3
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	00c9      	lsls	r1, r1, #3
 8001884:	4401      	add	r1, r0
 8001886:	440a      	add	r2, r1
 8001888:	7811      	ldrb	r1, [r2, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	460a      	mov	r2, r1
 8001890:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	3301      	adds	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d9ea      	bls.n	8001874 <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3228      	adds	r2, #40	; 0x28
 80018aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <EEM_POP+0x9c>)
 80018ca:	fb83 1302 	smull	r1, r3, r3, r2
 80018ce:	10d9      	asrs	r1, r3, #3
 80018d0:	17d3      	asrs	r3, r2, #31
 80018d2:	1ac9      	subs	r1, r1, r3
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	1ad1      	subs	r1, r2, r3
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	66666667 	.word	0x66666667

08001900 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	uCAN_MSG txPacked;
	txPacked.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B ;
 800190e:	2302      	movs	r3, #2
 8001910:	723b      	strb	r3, [r7, #8]
	txPacked.frame.dlc	  = EEM_MAX_SIZE;
 8001912:	2308      	movs	r3, #8
 8001914:	737b      	strb	r3, [r7, #13]
	txPacked.frame.id	  = param->EXTENDED_ID.identifier;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8c7 3009 	str.w	r3, [r7, #9]

	memcpy(&txPacked.frame.data0 , &param->DATA[0] , EEM_MAX_SIZE );
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1d19      	adds	r1, r3, #4
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	3306      	adds	r3, #6
 8001928:	2208      	movs	r2, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f004 f98a 	bl	8005c44 <memcpy>

	CANSPI_Transmit(&txPacked);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fac1 	bl	8000ebc <CANSPI_Transmit>
	
	



	return result;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001950:	2301      	movs	r3, #1
 8001952:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	//@That library used polling method
	if( CANSPI_Receive(rxPacked) )
 8001954:	68b8      	ldr	r0, [r7, #8]
 8001956:	f7ff fb2b 	bl	8000fb0 <CANSPI_Receive>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <EEM_RX+0x42>
	{
		memcpy(&param->DATA[0] , &rxPacked->frame.data0 , EEM_MAX_SIZE  );
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1d18      	adds	r0, r3, #4
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3306      	adds	r3, #6
 8001968:	2208      	movs	r2, #8
 800196a:	4619      	mov	r1, r3
 800196c:	f004 f96a 	bl	8005c44 <memcpy>
		param->EXTENDED_ID.identifier = rxPacked->frame.id ;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <EEM_RX+0x4c>)
 800197e:	f7ff ff19 	bl	80017b4 <EEM_PUSH>

	return result;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	e000      	b.n	8001988 <EEM_RX+0x44>
		return EEM_ERROR;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000060 	.word	0x20000060

08001994 <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b0c4      	sub	sp, #272	; 0x110
 800199a:	af00      	add	r7, sp, #0
 800199c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	EEM_ERR_T 	   result 	= EEM_EOK;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol)) || (defined(STM32H750xx) && defined(FDCAN_Protocol))
	//bxCAN ve FDCAN IRQ Handler'da recv yapmaktadir.
#else

	uCAN_MSG rxHandle = {0};
 80019a6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80019aa:	2300      	movs	r3, #0
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	6053      	str	r3, [r2, #4]
 80019b0:	6093      	str	r3, [r2, #8]
 80019b2:	8193      	strh	r3, [r2, #12]

	result = EEM_RX(param, &rxHandle, NULL);
 80019b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80019c0:	f7ff ffc0 	bl	8001944 <EEM_RX>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if( result != EEM_EOK ) return result;
 80019ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d008      	beq.n	80019e4 <EEM_PERIODIC+0x50>
 80019d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d6:	f001 ba41 	b.w	8002e5c <EEM_PERIODIC+0x14c8>

#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 80019da:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80019de:	48ae      	ldr	r0, [pc, #696]	; (8001c98 <EEM_PERIODIC+0x304>)
 80019e0:	f7ff ff3e 	bl	8001860 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 80019e4:	48ac      	ldr	r0, [pc, #688]	; (8001c98 <EEM_PERIODIC+0x304>)
 80019e6:	f001 fa47 	bl	8002e78 <EEM_IS_EMPTY>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f4      	beq.n	80019da <EEM_PERIODIC+0x46>
		                                              param->DATA[0] );
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 80019f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	2b22      	cmp	r3, #34	; 0x22
 80019fa:	f201 822d 	bhi.w	8002e58 <EEM_PERIODIC+0x14c4>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <EEM_PERIODIC+0x70>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a91 	.word	0x08001a91
 8001a08:	08001ca1 	.word	0x08001ca1
 8001a0c:	08001e7f 	.word	0x08001e7f
 8001a10:	08001eb5 	.word	0x08001eb5
 8001a14:	080020d3 	.word	0x080020d3
 8001a18:	0800214d 	.word	0x0800214d
 8001a1c:	080021c1 	.word	0x080021c1
 8001a20:	08002235 	.word	0x08002235
 8001a24:	080022b1 	.word	0x080022b1
 8001a28:	08002e59 	.word	0x08002e59
 8001a2c:	08002e59 	.word	0x08002e59
 8001a30:	08002e59 	.word	0x08002e59
 8001a34:	08002e59 	.word	0x08002e59
 8001a38:	08002e59 	.word	0x08002e59
 8001a3c:	08002e59 	.word	0x08002e59
 8001a40:	0800232d 	.word	0x0800232d
 8001a44:	080023a9 	.word	0x080023a9
 8001a48:	080023db 	.word	0x080023db
 8001a4c:	08002411 	.word	0x08002411
 8001a50:	0800265b 	.word	0x0800265b
 8001a54:	080026d1 	.word	0x080026d1
 8001a58:	08002875 	.word	0x08002875
 8001a5c:	08002abf 	.word	0x08002abf
 8001a60:	08002b39 	.word	0x08002b39
 8001a64:	08002c9b 	.word	0x08002c9b
 8001a68:	08002e59 	.word	0x08002e59
 8001a6c:	08002e59 	.word	0x08002e59
 8001a70:	08002e59 	.word	0x08002e59
 8001a74:	08002e59 	.word	0x08002e59
 8001a78:	08002e59 	.word	0x08002e59
 8001a7c:	08002e59 	.word	0x08002e59
 8001a80:	08002ca9 	.word	0x08002ca9
 8001a84:	08002cb7 	.word	0x08002cb7
 8001a88:	08002db5 	.word	0x08002db5
 8001a8c:	08002e07 	.word	0x08002e07
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		HVAC_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 8001a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	b2d9      	uxtb	r1, r3
 8001a9c:	4a7f      	ldr	r2, [pc, #508]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001a9e:	7913      	ldrb	r3, [r2, #4]
 8001aa0:	f361 0300 	bfi	r3, r1, #0, #1
 8001aa4:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	105b      	asrs	r3, r3, #1
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	b2d9      	uxtb	r1, r3
 8001ab4:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001ab6:	7913      	ldrb	r3, [r2, #4]
 8001ab8:	f361 0341 	bfi	r3, r1, #1, #1
 8001abc:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 8001abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	109b      	asrs	r3, r3, #2
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	4a73      	ldr	r2, [pc, #460]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001ace:	7913      	ldrb	r3, [r2, #4]
 8001ad0:	f361 0382 	bfi	r3, r1, #2, #1
 8001ad4:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	10db      	asrs	r3, r3, #3
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	b2d9      	uxtb	r1, r3
 8001ae4:	4a6d      	ldr	r2, [pc, #436]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001ae6:	7913      	ldrb	r3, [r2, #4]
 8001ae8:	f361 03c3 	bfi	r3, r1, #3, #1
 8001aec:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	111b      	asrs	r3, r3, #4
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2d9      	uxtb	r1, r3
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001afe:	7913      	ldrb	r3, [r2, #4]
 8001b00:	f361 1304 	bfi	r3, r1, #4, #1
 8001b04:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 8001b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	115b      	asrs	r3, r3, #5
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	b2d9      	uxtb	r1, r3
 8001b14:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b16:	7913      	ldrb	r3, [r2, #4]
 8001b18:	f361 1345 	bfi	r3, r1, #5, #1
 8001b1c:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	119b      	asrs	r3, r3, #6
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	b2d9      	uxtb	r1, r3
 8001b2c:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b2e:	7913      	ldrb	r3, [r2, #4]
 8001b30:	f361 1386 	bfi	r3, r1, #6, #1
 8001b34:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	09db      	lsrs	r3, r3, #7
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	b2d9      	uxtb	r1, r3
 8001b46:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b48:	7913      	ldrb	r3, [r2, #4]
 8001b4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b4e:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 8001b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	b2d9      	uxtb	r1, r3
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b5e:	7953      	ldrb	r3, [r2, #5]
 8001b60:	f361 0300 	bfi	r3, r1, #0, #1
 8001b64:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b6a:	795b      	ldrb	r3, [r3, #5]
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b76:	7953      	ldrb	r3, [r2, #5]
 8001b78:	f361 0341 	bfi	r3, r1, #1, #1
 8001b7c:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 8001b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	109b      	asrs	r3, r3, #2
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	4a43      	ldr	r2, [pc, #268]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001b8e:	7953      	ldrb	r3, [r2, #5]
 8001b90:	f361 0382 	bfi	r3, r1, #2, #1
 8001b94:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b9a:	795b      	ldrb	r3, [r3, #5]
 8001b9c:	10db      	asrs	r3, r3, #3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001ba6:	7953      	ldrb	r3, [r2, #5]
 8001ba8:	f361 03c3 	bfi	r3, r1, #3, #1
 8001bac:	7153      	strb	r3, [r2, #5]

		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bb2:	795b      	ldrb	r3, [r3, #5]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	b2da      	uxtb	r2, r3
												   	    				(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 8001bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bbc:	799b      	ldrb	r3, [r3, #6]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001bc8:	719a      	strb	r2, [r3, #6]

		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bce:	799b      	ldrb	r3, [r3, #6]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	b2da      	uxtb	r2, r3
													 					(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 8001bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bd8:	79db      	ldrb	r3, [r3, #7]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001be4:	71da      	strb	r2, [r3, #7]

		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bea:	79db      	ldrb	r3, [r3, #7]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  				(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 8001bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c00:	721a      	strb	r2, [r3, #8]

		HVAC_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 8001c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	111b      	asrs	r3, r3, #4
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	b2d9      	uxtb	r1, r3
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c12:	7a53      	ldrb	r3, [r2, #9]
 8001c14:	f361 0300 	bfi	r3, r1, #0, #1
 8001c18:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 8001c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c1e:	7a1b      	ldrb	r3, [r3, #8]
 8001c20:	115b      	asrs	r3, r3, #5
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c2a:	7a53      	ldrb	r3, [r2, #9]
 8001c2c:	f361 0341 	bfi	r3, r1, #1, #1
 8001c30:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 		= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 8001c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c36:	7a1b      	ldrb	r3, [r3, #8]
 8001c38:	119b      	asrs	r3, r3, #6
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	b2d9      	uxtb	r1, r3
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c42:	7a53      	ldrb	r3, [r2, #9]
 8001c44:	f361 0382 	bfi	r3, r1, #2, #1
 8001c48:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewHour_u8 			= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 8001c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4e:	7a1b      	ldrb	r3, [r3, #8]
 8001c50:	09db      	lsrs	r3, r3, #7
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	b2d9      	uxtb	r1, r3
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c5c:	7a53      	ldrb	r3, [r2, #9]
 8001c5e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c62:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewDay_u8 			= (EEM_U8)(   param->DATA[5] & 0x01 );
 8001c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c68:	7a5b      	ldrb	r3, [r3, #9]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	b2d9      	uxtb	r1, r3
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c72:	7a53      	ldrb	r3, [r2, #9]
 8001c74:	f361 1304 	bfi	r3, r1, #4, #1
 8001c78:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 			= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 8001c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c7e:	7a5b      	ldrb	r3, [r3, #9]
 8001c80:	105b      	asrs	r3, r3, #1
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	b2d9      	uxtb	r1, r3
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <EEM_PERIODIC+0x308>)
 8001c8a:	7a53      	ldrb	r3, [r2, #9]
 8001c8c:	f361 1345 	bfi	r3, r1, #5, #1
 8001c90:	7253      	strb	r3, [r2, #9]


	break;
 8001c92:	f001 b8e1 	b.w	8002e58 <EEM_PERIODIC+0x14c4>
 8001c96:	bf00      	nop
 8001c98:	20000060 	.word	0x20000060
 8001c9c:	200002f8 	.word	0x200002f8

	case MESSAGE02 :

		HVAC_MSG.Message02.SPN.HVAC_tempVal_u8 			 = param->DATA[0] ;
 8001ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca4:	791a      	ldrb	r2, [r3, #4]
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <EEM_PERIODIC+0x518>)
 8001ca8:	751a      	strb	r2, [r3, #20]
		HVAC_MSG.Message02.SPN.HVAC_humidityVal_u8 		 = param->DATA[1];
 8001caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cae:	795a      	ldrb	r2, [r3, #5]
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <EEM_PERIODIC+0x518>)
 8001cb2:	755a      	strb	r2, [r3, #21]
		HVAC_MSG.Message02.SPN.HVAC_smokeVal_u4 		 = (EEM_U8)( param->DATA[2] & 0x0F );
 8001cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cb8:	799b      	ldrb	r3, [r3, #6]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	b2d9      	uxtb	r1, r3
 8001cc0:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <EEM_PERIODIC+0x518>)
 8001cc2:	7d93      	ldrb	r3, [r2, #22]
 8001cc4:	f361 0303 	bfi	r3, r1, #0, #4
 8001cc8:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure1_u4 	 = (EEM_U8)(( param->DATA[2] & 0xF0 ) >> 4 );
 8001cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cce:	799b      	ldrb	r3, [r3, #6]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	b2d9      	uxtb	r1, r3
 8001cda:	4a74      	ldr	r2, [pc, #464]	; (8001eac <EEM_PERIODIC+0x518>)
 8001cdc:	7d93      	ldrb	r3, [r2, #22]
 8001cde:	f361 1307 	bfi	r3, r1, #4, #4
 8001ce2:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure2_u4 	 = (EEM_U8)( param->DATA[3] & 0x0F );
 8001ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ce8:	79db      	ldrb	r3, [r3, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2d9      	uxtb	r1, r3
 8001cf0:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <EEM_PERIODIC+0x518>)
 8001cf2:	7dd3      	ldrb	r3, [r2, #23]
 8001cf4:	f361 0303 	bfi	r3, r1, #0, #4
 8001cf8:	75d3      	strb	r3, [r2, #23]

		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 8001cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cfe:	79db      	ldrb	r3, [r3, #7]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	b25a      	sxtb	r2, r3
																    (EEM_U8)( param->DATA[4] & 0x0F );
 8001d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0a:	7a1b      	ldrb	r3, [r3, #8]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b64      	ldr	r3, [pc, #400]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d1c:	761a      	strb	r2, [r3, #24]

		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 8001d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d22:	7a1b      	ldrb	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	b25a      	sxtb	r2, r3
																	 (EEM_U8)( param->DATA[5] & 0x0F );
 8001d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d2e:	7a5b      	ldrb	r3, [r3, #9]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d40:	765a      	strb	r2, [r3, #25]

		HVAC_MSG.Message02.SPN.HVAC_status00_u1 = (EEM_U8)(( param->DATA[5] & 0x10 ) >> 4 );
 8001d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d46:	7a5b      	ldrb	r3, [r3, #9]
 8001d48:	111b      	asrs	r3, r3, #4
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	b2d9      	uxtb	r1, r3
 8001d50:	4a56      	ldr	r2, [pc, #344]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d52:	7e93      	ldrb	r3, [r2, #26]
 8001d54:	f361 0300 	bfi	r3, r1, #0, #1
 8001d58:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status01_u1 = (EEM_U8)(( param->DATA[5] & 0x20 ) >> 5 );
 8001d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d5e:	7a5b      	ldrb	r3, [r3, #9]
 8001d60:	115b      	asrs	r3, r3, #5
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	b2d9      	uxtb	r1, r3
 8001d68:	4a50      	ldr	r2, [pc, #320]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d6a:	7e93      	ldrb	r3, [r2, #26]
 8001d6c:	f361 0341 	bfi	r3, r1, #1, #1
 8001d70:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status02_u1 = (EEM_U8)(( param->DATA[5] & 0x40 ) >> 6 );
 8001d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d76:	7a5b      	ldrb	r3, [r3, #9]
 8001d78:	119b      	asrs	r3, r3, #6
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d82:	7e93      	ldrb	r3, [r2, #26]
 8001d84:	f361 0382 	bfi	r3, r1, #2, #1
 8001d88:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status03_u1 = (EEM_U8)(( param->DATA[5] & 0x80 ) >> 7 );
 8001d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d8e:	7a5b      	ldrb	r3, [r3, #9]
 8001d90:	09db      	lsrs	r3, r3, #7
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	4a44      	ldr	r2, [pc, #272]	; (8001eac <EEM_PERIODIC+0x518>)
 8001d9c:	7e93      	ldrb	r3, [r2, #26]
 8001d9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001da2:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_status04_u1 = (EEM_U8)( param->DATA[6] & 0x01 );
 8001da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001da8:	7a9b      	ldrb	r3, [r3, #10]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	b2d9      	uxtb	r1, r3
 8001db0:	4a3e      	ldr	r2, [pc, #248]	; (8001eac <EEM_PERIODIC+0x518>)
 8001db2:	7e93      	ldrb	r3, [r2, #26]
 8001db4:	f361 1304 	bfi	r3, r1, #4, #1
 8001db8:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status05_u1 = (EEM_U8)(( param->DATA[6] & 0x02 ) >> 1 );
 8001dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dbe:	7a9b      	ldrb	r3, [r3, #10]
 8001dc0:	105b      	asrs	r3, r3, #1
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <EEM_PERIODIC+0x518>)
 8001dca:	7e93      	ldrb	r3, [r2, #26]
 8001dcc:	f361 1345 	bfi	r3, r1, #5, #1
 8001dd0:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status06_u1 = (EEM_U8)(( param->DATA[6] & 0x04 ) >> 2 );
 8001dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd6:	7a9b      	ldrb	r3, [r3, #10]
 8001dd8:	109b      	asrs	r3, r3, #2
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	4a32      	ldr	r2, [pc, #200]	; (8001eac <EEM_PERIODIC+0x518>)
 8001de2:	7e93      	ldrb	r3, [r2, #26]
 8001de4:	f361 1386 	bfi	r3, r1, #6, #1
 8001de8:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status07_u1 = (EEM_U8)(( param->DATA[6] & 0x08 ) >> 3 );
 8001dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dee:	7a9b      	ldrb	r3, [r3, #10]
 8001df0:	10db      	asrs	r3, r3, #3
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	b2d9      	uxtb	r1, r3
 8001df8:	4a2c      	ldr	r2, [pc, #176]	; (8001eac <EEM_PERIODIC+0x518>)
 8001dfa:	7e93      	ldrb	r3, [r2, #26]
 8001dfc:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e00:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_Hgear_cmd_u3 = (EEM_U8)( param->DATA[6] & 0x07 );
 8001e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e06:	7a9b      	ldrb	r3, [r3, #10]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	4a27      	ldr	r2, [pc, #156]	; (8001eac <EEM_PERIODIC+0x518>)
 8001e10:	7ed3      	ldrb	r3, [r2, #27]
 8001e12:	f361 0302 	bfi	r3, r1, #0, #3
 8001e16:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_Gear_cmd_u2 = (EEM_U8)(( param->DATA[6] & 0x18) >> 3 );
 8001e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e1c:	7a9b      	ldrb	r3, [r3, #10]
 8001e1e:	10db      	asrs	r3, r3, #3
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <EEM_PERIODIC+0x518>)
 8001e28:	7ed3      	ldrb	r3, [r2, #27]
 8001e2a:	f361 03c4 	bfi	r3, r1, #3, #2
 8001e2e:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit05_u1 = (EEM_U8)(( param->DATA[6] & 0x20 ) >> 5 );
 8001e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e34:	7a9b      	ldrb	r3, [r3, #10]
 8001e36:	115b      	asrs	r3, r3, #5
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	b2d9      	uxtb	r1, r3
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <EEM_PERIODIC+0x518>)
 8001e40:	7ed3      	ldrb	r3, [r2, #27]
 8001e42:	f361 1345 	bfi	r3, r1, #5, #1
 8001e46:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit06_u1 = (EEM_U8)(( param->DATA[6] & 0x40 ) >> 6 );
 8001e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4c:	7a9b      	ldrb	r3, [r3, #10]
 8001e4e:	119b      	asrs	r3, r3, #6
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <EEM_PERIODIC+0x518>)
 8001e58:	7ed3      	ldrb	r3, [r2, #27]
 8001e5a:	f361 1386 	bfi	r3, r1, #6, #1
 8001e5e:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit07_u1 = (EEM_U8)(( param->DATA[6] & 0x80 ) >> 7 );
 8001e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e64:	7a9b      	ldrb	r3, [r3, #10]
 8001e66:	09db      	lsrs	r3, r3, #7
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	b2d9      	uxtb	r1, r3
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <EEM_PERIODIC+0x518>)
 8001e72:	7ed3      	ldrb	r3, [r2, #27]
 8001e74:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e78:	76d3      	strb	r3, [r2, #27]


	break;
 8001e7a:	f000 bfed 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE03 :

		BCM_MSG.Message03.SPN.BCM_differantialSpeed_u64 =
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8001e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e82:	791b      	ldrb	r3, [r3, #4]
 8001e84:	461a      	mov	r2, r3
						   ((EEM_U64)param->DATA[1] << 8  )	|
 8001e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	021b      	lsls	r3, r3, #8
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8001e8e:	431a      	orrs	r2, r3
						   ((EEM_U64)param->DATA[2] << 16 ) |
 8001e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e94:	799b      	ldrb	r3, [r3, #6]
 8001e96:	041b      	lsls	r3, r3, #16
						   ((EEM_U64)param->DATA[1] << 8  )	|
 8001e98:	431a      	orrs	r2, r3
						   ((EEM_U64)param->DATA[3] << 24 ) |
 8001e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e9e:	79db      	ldrb	r3, [r3, #7]
 8001ea0:	061b      	lsls	r3, r3, #24
						   ((EEM_U64)param->DATA[2] << 16 ) |
 8001ea2:	4313      	orrs	r3, r2
		BCM_MSG.Message03.SPN.BCM_differantialSpeed_u64 =
 8001ea4:	4a02      	ldr	r2, [pc, #8]	; (8001eb0 <EEM_PERIODIC+0x51c>)
 8001ea6:	6053      	str	r3, [r2, #4]
						   ((EEM_U64)param->DATA[5] << 40 ) |
						   ((EEM_U64)param->DATA[6] << 48 ) |
						   ((EEM_U64)param->DATA[7] << 56 ) );


	break;
 8001ea8:	f000 bfd6 	b.w	8002e58 <EEM_PERIODIC+0x14c4>
 8001eac:	200002f8 	.word	0x200002f8
 8001eb0:	20000258 	.word	0x20000258

	case MESSAGE04 :
	    BCM_MSG.Message04.SPN.BCM_SCB_startRecord_u1 	=  (EEM_BOOL_T)(param->DATA[0]&0x01);
 8001eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	b2d9      	uxtb	r1, r3
 8001ec0:	4aa1      	ldr	r2, [pc, #644]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001ec2:	7c13      	ldrb	r3, [r2, #16]
 8001ec4:	f361 0300 	bfi	r3, r1, #0, #1
 8001ec8:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_stopRecord_u1		=  (EEM_BOOL_T)((param->DATA[0]&0x02)>>1);
 8001eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ece:	791b      	ldrb	r3, [r3, #4]
 8001ed0:	105b      	asrs	r3, r3, #1
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2d9      	uxtb	r1, r3
 8001ed8:	4a9b      	ldr	r2, [pc, #620]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001eda:	7c13      	ldrb	r3, [r2, #16]
 8001edc:	f361 0341 	bfi	r3, r1, #1, #1
 8001ee0:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_deleteRecord_u1   =  (EEM_BOOL_T)((param->DATA[0]&0x04)>>2);
 8001ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ee6:	791b      	ldrb	r3, [r3, #4]
 8001ee8:	109b      	asrs	r3, r3, #2
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	b2d9      	uxtb	r1, r3
 8001ef0:	4a95      	ldr	r2, [pc, #596]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001ef2:	7c13      	ldrb	r3, [r2, #16]
 8001ef4:	f361 0382 	bfi	r3, r1, #2, #1
 8001ef8:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_sdCardErase_u1    =  (EEM_BOOL_T)((param->DATA[0]&0x08)>>3);
 8001efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	10db      	asrs	r3, r3, #3
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	4a8f      	ldr	r2, [pc, #572]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f0a:	7c13      	ldrb	r3, [r2, #16]
 8001f0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f10:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_sdCardSave_u1     =  (EEM_BOOL_T)((param->DATA[0]&0x10)>>4);
 8001f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	111b      	asrs	r3, r3, #4
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	b2d9      	uxtb	r1, r3
 8001f20:	4a89      	ldr	r2, [pc, #548]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f22:	7c13      	ldrb	r3, [r2, #16]
 8001f24:	f361 1304 	bfi	r3, r1, #4, #1
 8001f28:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardState_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x20)>>5);
 8001f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	115b      	asrs	r3, r3, #5
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	b2d9      	uxtb	r1, r3
 8001f38:	4a83      	ldr	r2, [pc, #524]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f3a:	7c13      	ldrb	r3, [r2, #16]
 8001f3c:	f361 1345 	bfi	r3, r1, #5, #1
 8001f40:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd01_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x30)>>6);
 8001f42:	4a81      	ldr	r2, [pc, #516]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f44:	7c13      	ldrb	r3, [r2, #16]
 8001f46:	f36f 1386 	bfc	r3, #6, #1
 8001f4a:	7413      	strb	r3, [r2, #16]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd02_u1 =  (EEM_BOOL_T)((param->DATA[0]&0x80)>>7);
 8001f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	09db      	lsrs	r3, r3, #7
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	b2d9      	uxtb	r1, r3
 8001f5c:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f5e:	7c13      	ldrb	r3, [r2, #16]
 8001f60:	f361 13c7 	bfi	r3, r1, #7, #1
 8001f64:	7413      	strb	r3, [r2, #16]

	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd03_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x01));
 8001f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f6a:	795b      	ldrb	r3, [r3, #5]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2d9      	uxtb	r1, r3
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f74:	7c53      	ldrb	r3, [r2, #17]
 8001f76:	f361 0300 	bfi	r3, r1, #0, #1
 8001f7a:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_dashBoardCmd04_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x02)>>1);
 8001f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f80:	795b      	ldrb	r3, [r3, #5]
 8001f82:	105b      	asrs	r3, r3, #1
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	4a6f      	ldr	r2, [pc, #444]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001f8c:	7c53      	ldrb	r3, [r2, #17]
 8001f8e:	f361 0341 	bfi	r3, r1, #1, #1
 8001f92:	7453      	strb	r3, [r2, #17]

	    BCM_MSG.Message04.SPN.BCM_SCB_ignitionStatus_u1 =  (EEM_BOOL_T)((param->DATA[1]&0x08)>>3);
 8001f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f98:	795b      	ldrb	r3, [r3, #5]
 8001f9a:	10db      	asrs	r3, r3, #3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001fa4:	7c53      	ldrb	r3, [r2, #17]
 8001fa6:	f361 03c3 	bfi	r3, r1, #3, #1
 8001faa:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftSignal_u1     =  (EEM_BOOL_T)((param->DATA[1]&0x20)>>5);
 8001fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fb0:	795b      	ldrb	r3, [r3, #5]
 8001fb2:	115b      	asrs	r3, r3, #5
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	b2d9      	uxtb	r1, r3
 8001fba:	4a63      	ldr	r2, [pc, #396]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001fbc:	7c53      	ldrb	r3, [r2, #17]
 8001fbe:	f361 1345 	bfi	r3, r1, #5, #1
 8001fc2:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_rightSignal_u1    =  (EEM_BOOL_T)((param->DATA[1]&0x40)>>6);
 8001fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fc8:	795b      	ldrb	r3, [r3, #5]
 8001fca:	119b      	asrs	r3, r3, #6
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	b2d9      	uxtb	r1, r3
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001fd4:	7c53      	ldrb	r3, [r2, #17]
 8001fd6:	f361 1386 	bfi	r3, r1, #6, #1
 8001fda:	7453      	strb	r3, [r2, #17]
	    BCM_MSG.Message04.SPN.BCM_SCB_frontLight_u1     =  (EEM_BOOL_T)((param->DATA[1]&0x80)>>7);
 8001fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe0:	795b      	ldrb	r3, [r3, #5]
 8001fe2:	09db      	lsrs	r3, r3, #7
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	b2d9      	uxtb	r1, r3
 8001fec:	4a56      	ldr	r2, [pc, #344]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8001fee:	7c53      	ldrb	r3, [r2, #17]
 8001ff0:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ff4:	7453      	strb	r3, [r2, #17]

	    BCM_MSG.Message04.SPN.BCM_SCB_backLight_u1       = (EEM_BOOL_T)(param->DATA[2]&0x01);
 8001ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	b2d9      	uxtb	r1, r3
 8002002:	4a51      	ldr	r2, [pc, #324]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002004:	7c93      	ldrb	r3, [r2, #18]
 8002006:	f361 0300 	bfi	r3, r1, #0, #1
 800200a:	7493      	strb	r3, [r2, #18]
	    BCM_MSG.Message04.SPN.BCM_SCB_signalLight_u1     = (EEM_BOOL_T)(param->DATA[2]&0x02);
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <EEM_PERIODIC+0x7b4>)
 800200e:	7c93      	ldrb	r3, [r2, #18]
 8002010:	f36f 0341 	bfc	r3, #1, #1
 8002014:	7493      	strb	r3, [r2, #18]
	    BCM_MSG.Message04.SPN.BCM_SCB_spinnerAngle_u16	 = (EEM_U16)(((param->DATA[2]&0xF8)>>3)|(param->DATA[3]<<5) |((param->DATA[4]&0x07)<<13));
 8002016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201a:	799b      	ldrb	r3, [r3, #6]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	b21a      	sxth	r2, r3
 8002022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002026:	79db      	ldrb	r3, [r3, #7]
 8002028:	015b      	lsls	r3, r3, #5
 800202a:	b21b      	sxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b21a      	sxth	r2, r3
 8002030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002034:	7a1b      	ldrb	r3, [r3, #8]
 8002036:	035b      	lsls	r3, r3, #13
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21b      	sxth	r3, r3
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002042:	829a      	strh	r2, [r3, #20]

	    BCM_MSG.Message04.SPN.BCM_SCB_gasPedalAnalog_u16 = (EEM_U16)(((param->DATA[4]&0xF8)>>3)| (param->DATA[5]<<5) |(param->DATA[6]&0x07<<13));
 8002044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002048:	7a1b      	ldrb	r3, [r3, #8]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	b21a      	sxth	r2, r3
 8002050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002054:	7a5b      	ldrb	r3, [r3, #9]
 8002056:	015b      	lsls	r3, r3, #5
 8002058:	b21b      	sxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b21a      	sxth	r2, r3
 800205e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002062:	7a9b      	ldrb	r3, [r3, #10]
 8002064:	b21b      	sxth	r3, r3
 8002066:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800206a:	f023 031f 	bic.w	r3, r3, #31
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002078:	82da      	strh	r2, [r3, #22]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1 =    (EEM_U16)(((param->DATA[6]&0xF8)>>3)| param->DATA[7] |(param->DATA[8]&0x07<<13));
 800207a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800207e:	7a9b      	ldrb	r3, [r3, #10]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	b2da      	uxtb	r2, r3
 8002084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002088:	7adb      	ldrb	r3, [r3, #11]
 800208a:	4313      	orrs	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	b2d9      	uxtb	r1, r3
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002096:	7e93      	ldrb	r3, [r2, #26]
 8002098:	f361 0300 	bfi	r3, r1, #0, #1
 800209c:	7693      	strb	r3, [r2, #26]
	    BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1 =    (EEM_BOOL_T)((param->DATA[8]&0x08)>>3);
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020a2:	7b1b      	ldrb	r3, [r3, #12]
 80020a4:	10db      	asrs	r3, r3, #3
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	b2d9      	uxtb	r1, r3
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <EEM_PERIODIC+0x7b4>)
 80020ae:	7e93      	ldrb	r3, [r2, #26]
 80020b0:	f361 0300 	bfi	r3, r1, #0, #1
 80020b4:	7693      	strb	r3, [r2, #26]
		BCM_MSG.Message04.SPN.BCM_SCB_leftDirection_u1=      (EEM_BOOL_T)((param->DATA[8]&0x10)>>4);
 80020b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ba:	7b1b      	ldrb	r3, [r3, #12]
 80020bc:	111b      	asrs	r3, r3, #4
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	b2d9      	uxtb	r1, r3
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <EEM_PERIODIC+0x7b4>)
 80020c6:	7e93      	ldrb	r3, [r2, #26]
 80020c8:	f361 0300 	bfi	r3, r1, #0, #1
 80020cc:	7693      	strb	r3, [r2, #26]

	break;
 80020ce:	f000 bec3 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE05 :

		BCM_MSG.Message05.SPN.BCM_leftGyro_u16= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 80020d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	b21a      	sxth	r2, r3
 80020da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020de:	795b      	ldrb	r3, [r3, #5]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <EEM_PERIODIC+0x7b4>)
 80020ec:	841a      	strh	r2, [r3, #32]
		BCM_MSG.Message05.SPN.BCM_leftAcc_u16 = (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 80020ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f2:	795b      	ldrb	r3, [r3, #5]
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fa:	799b      	ldrb	r3, [r3, #6]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b21b      	sxth	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b21b      	sxth	r3, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002108:	845a      	strh	r2, [r3, #34]	; 0x22
		BCM_MSG.Message05.SPN.BCM_rightAcc_u16=(EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 800210a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800210e:	79db      	ldrb	r3, [r3, #7]
 8002110:	b21a      	sxth	r2, r3
 8002112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002116:	7a1b      	ldrb	r3, [r3, #8]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002124:	84da      	strh	r2, [r3, #38]	; 0x26
		BCM_MSG.Message05.SPN.BCM_rightGyro_u16=(EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8002126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800212a:	7a5b      	ldrb	r3, [r3, #9]
 800212c:	b21a      	sxth	r2, r3
 800212e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002132:	7a9b      	ldrb	r3, [r3, #10]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b02      	ldr	r3, [pc, #8]	; (8002148 <EEM_PERIODIC+0x7b4>)
 8002140:	849a      	strh	r2, [r3, #36]	; 0x24

	break;
 8002142:	f000 be89 	b.w	8002e58 <EEM_PERIODIC+0x14c4>
 8002146:	bf00      	nop
 8002148:	20000258 	.word	0x20000258

	case MESSAGE06 :

        BCM_MSG.Message06.SPN.VOLTAGE_C1= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 800214c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	b21a      	sxth	r2, r3
 8002154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002158:	795b      	ldrb	r3, [r3, #5]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	b29a      	uxth	r2, r3
 8002164:	4ba9      	ldr	r3, [pc, #676]	; (800240c <EEM_PERIODIC+0xa78>)
 8002166:	859a      	strh	r2, [r3, #44]	; 0x2c
	    BCM_MSG.Message06.SPN.VOLTAGE_C2= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8002168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800216c:	795b      	ldrb	r3, [r3, #5]
 800216e:	b21a      	sxth	r2, r3
 8002170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	b29a      	uxth	r2, r3
 8002180:	4ba2      	ldr	r3, [pc, #648]	; (800240c <EEM_PERIODIC+0xa78>)
 8002182:	85da      	strh	r2, [r3, #46]	; 0x2e
	    BCM_MSG.Message06.SPN.VOLTAGE_C3= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8002184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002188:	79db      	ldrb	r3, [r3, #7]
 800218a:	b21a      	sxth	r2, r3
 800218c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002190:	7a1b      	ldrb	r3, [r3, #8]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b9b      	ldr	r3, [pc, #620]	; (800240c <EEM_PERIODIC+0xa78>)
 800219e:	861a      	strh	r2, [r3, #48]	; 0x30
	    BCM_MSG.Message06.SPN.VOLTAGE_C4= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 80021a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a4:	7a5b      	ldrb	r3, [r3, #9]
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ac:	7a9b      	ldrb	r3, [r3, #10]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b94      	ldr	r3, [pc, #592]	; (800240c <EEM_PERIODIC+0xa78>)
 80021ba:	865a      	strh	r2, [r3, #50]	; 0x32


	break;
 80021bc:	f000 be4c 	b.w	8002e58 <EEM_PERIODIC+0x14c4>


	case MESSAGE07 :

		 BCM_MSG.Message07.SPN.VOLTAGE_C5= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c4:	791b      	ldrb	r3, [r3, #4]
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b8c      	ldr	r3, [pc, #560]	; (800240c <EEM_PERIODIC+0xa78>)
 80021da:	871a      	strh	r2, [r3, #56]	; 0x38
		 BCM_MSG.Message07.SPN.VOLTAGE_C6= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 80021dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021e0:	795b      	ldrb	r3, [r3, #5]
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021e8:	799b      	ldrb	r3, [r3, #6]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b85      	ldr	r3, [pc, #532]	; (800240c <EEM_PERIODIC+0xa78>)
 80021f6:	875a      	strh	r2, [r3, #58]	; 0x3a
		 BCM_MSG.Message07.SPN.VOLTAGE_C7= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 80021f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021fc:	79db      	ldrb	r3, [r3, #7]
 80021fe:	b21a      	sxth	r2, r3
 8002200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002204:	7a1b      	ldrb	r3, [r3, #8]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21b      	sxth	r3, r3
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b7e      	ldr	r3, [pc, #504]	; (800240c <EEM_PERIODIC+0xa78>)
 8002212:	879a      	strh	r2, [r3, #60]	; 0x3c
		 BCM_MSG.Message07.SPN.VOLTAGE_C8= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 8002214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002218:	7a5b      	ldrb	r3, [r3, #9]
 800221a:	b21a      	sxth	r2, r3
 800221c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002220:	7a9b      	ldrb	r3, [r3, #10]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21b      	sxth	r3, r3
 8002226:	4313      	orrs	r3, r2
 8002228:	b21b      	sxth	r3, r3
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b77      	ldr	r3, [pc, #476]	; (800240c <EEM_PERIODIC+0xa78>)
 800222e:	87da      	strh	r2, [r3, #62]	; 0x3e



	break;
 8002230:	f000 be12 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE08 :

		 BCM_MSG.Message08.SPN.VOLTAGE_C9= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 8002234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	b21a      	sxth	r2, r3
 800223c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <EEM_PERIODIC+0xa78>)
 800224e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		 BCM_MSG.Message08.SPN.VOLTAGE_C10= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 8002252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002256:	795b      	ldrb	r3, [r3, #5]
 8002258:	b21a      	sxth	r2, r3
 800225a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225e:	799b      	ldrb	r3, [r3, #6]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21b      	sxth	r3, r3
 8002264:	4313      	orrs	r3, r2
 8002266:	b21b      	sxth	r3, r3
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b68      	ldr	r3, [pc, #416]	; (800240c <EEM_PERIODIC+0xa78>)
 800226c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		 BCM_MSG.Message08.SPN.VOLTAGE_C11= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 8002270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002274:	79db      	ldrb	r3, [r3, #7]
 8002276:	b21a      	sxth	r2, r3
 8002278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800227c:	7a1b      	ldrb	r3, [r3, #8]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21b      	sxth	r3, r3
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b60      	ldr	r3, [pc, #384]	; (800240c <EEM_PERIODIC+0xa78>)
 800228a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		 BCM_MSG.Message08.SPN.VOLTAGE_C12= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 800228e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002292:	7a5b      	ldrb	r3, [r3, #9]
 8002294:	b21a      	sxth	r2, r3
 8002296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800229a:	7a9b      	ldrb	r3, [r3, #10]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21b      	sxth	r3, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b59      	ldr	r3, [pc, #356]	; (800240c <EEM_PERIODIC+0xa78>)
 80022a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	break;
 80022ac:	f000 bdd4 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE09 :

		 BCM_MSG.Message09.SPN.VOLTAGE_C13= (EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 80022b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022bc:	795b      	ldrb	r3, [r3, #5]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <EEM_PERIODIC+0xa78>)
 80022ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		 BCM_MSG.Message09.SPN.VOLTAGE_C14= (EEM_U16)((param->DATA[1])|(param->DATA[2]<<8));
 80022ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d2:	795b      	ldrb	r3, [r3, #5]
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022da:	799b      	ldrb	r3, [r3, #6]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <EEM_PERIODIC+0xa78>)
 80022e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		 BCM_MSG.Message09.SPN.VOLTAGE_C15= (EEM_U16)((param->DATA[3])|(param->DATA[4]<<8));
 80022ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f0:	79db      	ldrb	r3, [r3, #7]
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f8:	7a1b      	ldrb	r3, [r3, #8]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	b21b      	sxth	r3, r3
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <EEM_PERIODIC+0xa78>)
 8002306:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		 BCM_MSG.Message09.SPN.VOLTAGE_C16= (EEM_U16)((param->DATA[5])|(param->DATA[6]<<8));
 800230a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230e:	7a5b      	ldrb	r3, [r3, #9]
 8002310:	b21a      	sxth	r2, r3
 8002312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002316:	7a9b      	ldrb	r3, [r3, #10]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21b      	sxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b21b      	sxth	r3, r3
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <EEM_PERIODIC+0xa78>)
 8002324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56


	break;
 8002328:	f000 bd96 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE10 :

		BCM_MSG.Message10.SPN.VOLTAGE_C17=(EEM_U16)((param->DATA[0])|(param->DATA[1]<<8));
 800232c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	b21a      	sxth	r2, r3
 8002334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002338:	795b      	ldrb	r3, [r3, #5]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21b      	sxth	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b21b      	sxth	r3, r3
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <EEM_PERIODIC+0xa78>)
 8002346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		BCM_MSG.Message10.SPN.VOLTAGE_C18=(EEM_U16)((param->DATA[2])|(param->DATA[3]<<8));
 800234a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800234e:	799b      	ldrb	r3, [r3, #6]
 8002350:	b21a      	sxth	r2, r3
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002356:	79db      	ldrb	r3, [r3, #7]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b2a      	ldr	r3, [pc, #168]	; (800240c <EEM_PERIODIC+0xa78>)
 8002364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		BCM_MSG.Message10.SPN.TEMP=(EEM_U16)((param->DATA[4])|(param->DATA[5]<<8));
 8002368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236c:	7a1b      	ldrb	r3, [r3, #8]
 800236e:	b21a      	sxth	r2, r3
 8002370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002374:	7a5b      	ldrb	r3, [r3, #9]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21b      	sxth	r3, r3
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <EEM_PERIODIC+0xa78>)
 8002382:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		BCM_MSG.Message10.SPN.CURRENT=(EEM_U16)((param->DATA[6])|(param->DATA[7]<<8));
 8002386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238a:	7a9b      	ldrb	r3, [r3, #10]
 800238c:	b21a      	sxth	r2, r3
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002392:	7adb      	ldrb	r3, [r3, #11]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21b      	sxth	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	b21b      	sxth	r3, r3
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <EEM_PERIODIC+0xa78>)
 80023a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	break;
 80023a4:	f000 bd58 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE11 :

		BCM_MSG.Message11.SPN.BCM_MS1_Speed=(EEM_U16)(param->DATA[0]|
 80023a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ac:	791b      	ldrb	r3, [r3, #4]
 80023ae:	b21a      	sxth	r2, r3
				                             (EEM_U16)(param->DATA[1])<<8);
 80023b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b4:	795b      	ldrb	r3, [r3, #5]
 80023b6:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message11.SPN.BCM_MS1_Speed=(EEM_U16)(param->DATA[0]|
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21b      	sxth	r3, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80023c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <EEM_PERIODIC+0xa78>)
 80023ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80023d2:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68

		break;
 80023d6:	f000 bd3f 	b.w	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE12 :

		BCM_MSG.Message12.SPN.BCM_MS2_Speed=(EEM_U16)(param->DATA[0]|
 80023da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	b21a      	sxth	r2, r3
                                             (EEM_U16)(param->DATA[1])<<8);
 80023e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e6:	795b      	ldrb	r3, [r3, #5]
 80023e8:	021b      	lsls	r3, r3, #8
		BCM_MSG.Message12.SPN.BCM_MS2_Speed=(EEM_U16)(param->DATA[0]|
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023fe:	4b03      	ldr	r3, [pc, #12]	; (800240c <EEM_PERIODIC+0xa78>)
 8002400:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002404:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78

		break;
 8002408:	f000 bd26 	b.w	8002e58 <EEM_PERIODIC+0x14c4>
 800240c:	20000258 	.word	0x20000258

	case MESSAGE13 :

		MS1_MSG.Message13.SPN.MS1_Mode=(EEM_U8)(param->DATA[0]);
 8002410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002414:	791a      	ldrb	r2, [r3, #4]
 8002416:	4bad      	ldr	r3, [pc, #692]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002418:	711a      	strb	r2, [r3, #4]
		MS1_MSG.Message13.SPN.MS1_temperature=(EEM_U16)(param->DATA[1])|
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241e:	795b      	ldrb	r3, [r3, #5]
 8002420:	b29a      	uxth	r2, r3
				                       (EEM_U16)((param->DATA[2])<<8);
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002426:	799b      	ldrb	r3, [r3, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	b29b      	uxth	r3, r3
		MS1_MSG.Message13.SPN.MS1_temperature=(EEM_U16)(param->DATA[1])|
 800242e:	4313      	orrs	r3, r2
 8002430:	b29a      	uxth	r2, r3
 8002432:	4ba6      	ldr	r3, [pc, #664]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002434:	80da      	strh	r2, [r3, #6]

		MS1_MSG.Message13.SPN.MS1_warningFlag01=(EEM_BOOL_T)(param->DATA[3]&0x01);
 8002436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243a:	79db      	ldrb	r3, [r3, #7]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	b2d9      	uxtb	r1, r3
 8002442:	4aa2      	ldr	r2, [pc, #648]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002444:	7a13      	ldrb	r3, [r2, #8]
 8002446:	f361 0300 	bfi	r3, r1, #0, #1
 800244a:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag02=(EEM_BOOL_T)((param->DATA[3]&0x02)>>1);
 800244c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002450:	79db      	ldrb	r3, [r3, #7]
 8002452:	105b      	asrs	r3, r3, #1
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	b2d9      	uxtb	r1, r3
 800245a:	4a9c      	ldr	r2, [pc, #624]	; (80026cc <EEM_PERIODIC+0xd38>)
 800245c:	7a13      	ldrb	r3, [r2, #8]
 800245e:	f361 0341 	bfi	r3, r1, #1, #1
 8002462:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag03=(EEM_BOOL_T)((param->DATA[3]&0x04)>>2);
 8002464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002468:	79db      	ldrb	r3, [r3, #7]
 800246a:	109b      	asrs	r3, r3, #2
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	b2d9      	uxtb	r1, r3
 8002472:	4a96      	ldr	r2, [pc, #600]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002474:	7a13      	ldrb	r3, [r2, #8]
 8002476:	f361 0382 	bfi	r3, r1, #2, #1
 800247a:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag04=(EEM_BOOL_T)((param->DATA[3]&0x08)>>3);
 800247c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002480:	79db      	ldrb	r3, [r3, #7]
 8002482:	10db      	asrs	r3, r3, #3
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	b2d9      	uxtb	r1, r3
 800248a:	4a90      	ldr	r2, [pc, #576]	; (80026cc <EEM_PERIODIC+0xd38>)
 800248c:	7a13      	ldrb	r3, [r2, #8]
 800248e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002492:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag05=(EEM_BOOL_T)((param->DATA[3]&0x10)>>4);
 8002494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002498:	79db      	ldrb	r3, [r3, #7]
 800249a:	111b      	asrs	r3, r3, #4
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	b2d9      	uxtb	r1, r3
 80024a2:	4a8a      	ldr	r2, [pc, #552]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024a4:	7a13      	ldrb	r3, [r2, #8]
 80024a6:	f361 1304 	bfi	r3, r1, #4, #1
 80024aa:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag06=(EEM_BOOL_T)((param->DATA[3]&0x20)>>5);
 80024ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b0:	79db      	ldrb	r3, [r3, #7]
 80024b2:	115b      	asrs	r3, r3, #5
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	4a84      	ldr	r2, [pc, #528]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024bc:	7a13      	ldrb	r3, [r2, #8]
 80024be:	f361 1345 	bfi	r3, r1, #5, #1
 80024c2:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag07=(EEM_BOOL_T)((param->DATA[3]&0x30)>>6);
 80024c4:	4a81      	ldr	r2, [pc, #516]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024c6:	7a13      	ldrb	r3, [r2, #8]
 80024c8:	f36f 1386 	bfc	r3, #6, #1
 80024cc:	7213      	strb	r3, [r2, #8]
		MS1_MSG.Message13.SPN.MS1_warningFlag08=(EEM_BOOL_T)((param->DATA[3]&0x40)>>7);
 80024ce:	4a7f      	ldr	r2, [pc, #508]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024d0:	7a13      	ldrb	r3, [r2, #8]
 80024d2:	f36f 13c7 	bfc	r3, #7, #1
 80024d6:	7213      	strb	r3, [r2, #8]

		MS1_MSG.Message13.SPN.MS1_errorFlag01=  (EEM_BOOL_T)(param->DATA[4]&0x01);
 80024d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024dc:	7a1b      	ldrb	r3, [r3, #8]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	b2d9      	uxtb	r1, r3
 80024e4:	4a79      	ldr	r2, [pc, #484]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024e6:	7a53      	ldrb	r3, [r2, #9]
 80024e8:	f361 0300 	bfi	r3, r1, #0, #1
 80024ec:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag02=  (EEM_BOOL_T)((param->DATA[4]&0x02)>>1);
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	7a1b      	ldrb	r3, [r3, #8]
 80024f4:	105b      	asrs	r3, r3, #1
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2d9      	uxtb	r1, r3
 80024fc:	4a73      	ldr	r2, [pc, #460]	; (80026cc <EEM_PERIODIC+0xd38>)
 80024fe:	7a53      	ldrb	r3, [r2, #9]
 8002500:	f361 0341 	bfi	r3, r1, #1, #1
 8002504:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag03=  (EEM_BOOL_T)((param->DATA[4]&0x04)>>2);
 8002506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800250a:	7a1b      	ldrb	r3, [r3, #8]
 800250c:	109b      	asrs	r3, r3, #2
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	b2d9      	uxtb	r1, r3
 8002514:	4a6d      	ldr	r2, [pc, #436]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002516:	7a53      	ldrb	r3, [r2, #9]
 8002518:	f361 0382 	bfi	r3, r1, #2, #1
 800251c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag04=  (EEM_BOOL_T)((param->DATA[4]&0x08)>>3);
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002522:	7a1b      	ldrb	r3, [r3, #8]
 8002524:	10db      	asrs	r3, r3, #3
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	4a67      	ldr	r2, [pc, #412]	; (80026cc <EEM_PERIODIC+0xd38>)
 800252e:	7a53      	ldrb	r3, [r2, #9]
 8002530:	f361 03c3 	bfi	r3, r1, #3, #1
 8002534:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag05=  (EEM_BOOL_T)((param->DATA[4]&0x10)>>4);
 8002536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800253a:	7a1b      	ldrb	r3, [r3, #8]
 800253c:	111b      	asrs	r3, r3, #4
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	b2d9      	uxtb	r1, r3
 8002544:	4a61      	ldr	r2, [pc, #388]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002546:	7a53      	ldrb	r3, [r2, #9]
 8002548:	f361 1304 	bfi	r3, r1, #4, #1
 800254c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag06=  (EEM_BOOL_T)((param->DATA[4]&0x20)>>5);
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002552:	7a1b      	ldrb	r3, [r3, #8]
 8002554:	115b      	asrs	r3, r3, #5
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	b2d9      	uxtb	r1, r3
 800255c:	4a5b      	ldr	r2, [pc, #364]	; (80026cc <EEM_PERIODIC+0xd38>)
 800255e:	7a53      	ldrb	r3, [r2, #9]
 8002560:	f361 1345 	bfi	r3, r1, #5, #1
 8002564:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag07=  (EEM_BOOL_T)((param->DATA[4]&0x40)>>6);
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800256a:	7a1b      	ldrb	r3, [r3, #8]
 800256c:	119b      	asrs	r3, r3, #6
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	4a55      	ldr	r2, [pc, #340]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002576:	7a53      	ldrb	r3, [r2, #9]
 8002578:	f361 1386 	bfi	r3, r1, #6, #1
 800257c:	7253      	strb	r3, [r2, #9]
		MS1_MSG.Message13.SPN.MS1_errorFlag08=  (EEM_BOOL_T)((param->DATA[4]&0x80)>>7);
 800257e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002582:	7a1b      	ldrb	r3, [r3, #8]
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	b2d9      	uxtb	r1, r3
 800258e:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002590:	7a53      	ldrb	r3, [r2, #9]
 8002592:	f361 13c7 	bfi	r3, r1, #7, #1
 8002596:	7253      	strb	r3, [r2, #9]

		MS1_MSG.Message13.SPN.MS1_statusBit01 =  (EEM_BOOL_T)(param->DATA[5]&0x01);
 8002598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259c:	7a5b      	ldrb	r3, [r3, #9]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2d9      	uxtb	r1, r3
 80025a4:	4a49      	ldr	r2, [pc, #292]	; (80026cc <EEM_PERIODIC+0xd38>)
 80025a6:	7a93      	ldrb	r3, [r2, #10]
 80025a8:	f361 0300 	bfi	r3, r1, #0, #1
 80025ac:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit02 =  (EEM_BOOL_T)((param->DATA[5]&0x02)>>1);
 80025ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b2:	7a5b      	ldrb	r3, [r3, #9]
 80025b4:	105b      	asrs	r3, r3, #1
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	b2d9      	uxtb	r1, r3
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <EEM_PERIODIC+0xd38>)
 80025be:	7a93      	ldrb	r3, [r2, #10]
 80025c0:	f361 0341 	bfi	r3, r1, #1, #1
 80025c4:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit03 =  (EEM_BOOL_T)((param->DATA[5]&0x04)>>2);
 80025c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ca:	7a5b      	ldrb	r3, [r3, #9]
 80025cc:	109b      	asrs	r3, r3, #2
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	b2d9      	uxtb	r1, r3
 80025d4:	4a3d      	ldr	r2, [pc, #244]	; (80026cc <EEM_PERIODIC+0xd38>)
 80025d6:	7a93      	ldrb	r3, [r2, #10]
 80025d8:	f361 0382 	bfi	r3, r1, #2, #1
 80025dc:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit04 =  (EEM_BOOL_T)((param->DATA[5]&0x08)>>3);
 80025de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e2:	7a5b      	ldrb	r3, [r3, #9]
 80025e4:	10db      	asrs	r3, r3, #3
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	b2d9      	uxtb	r1, r3
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <EEM_PERIODIC+0xd38>)
 80025ee:	7a93      	ldrb	r3, [r2, #10]
 80025f0:	f361 03c3 	bfi	r3, r1, #3, #1
 80025f4:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit05 =  (EEM_BOOL_T)((param->DATA[5]&0x10)>>4);
 80025f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025fa:	7a5b      	ldrb	r3, [r3, #9]
 80025fc:	111b      	asrs	r3, r3, #4
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	b2d9      	uxtb	r1, r3
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002606:	7a93      	ldrb	r3, [r2, #10]
 8002608:	f361 1304 	bfi	r3, r1, #4, #1
 800260c:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit06 =  (EEM_BOOL_T)((param->DATA[5]&0x20)>>5);
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002612:	7a5b      	ldrb	r3, [r3, #9]
 8002614:	115b      	asrs	r3, r3, #5
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	b2d9      	uxtb	r1, r3
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <EEM_PERIODIC+0xd38>)
 800261e:	7a93      	ldrb	r3, [r2, #10]
 8002620:	f361 1345 	bfi	r3, r1, #5, #1
 8002624:	7293      	strb	r3, [r2, #10]
		MS1_MSG.Message13.SPN.MS1_statusBit07 =  (EEM_BOOL_T)((param->DATA[5]&0x40)>>6);
 8002626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262a:	7a5b      	ldrb	r3, [r3, #9]
 800262c:	119b      	asrs	r3, r3, #6
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	b2d9      	uxtb	r1, r3
 8002634:	4a25      	ldr	r2, [pc, #148]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002636:	7a93      	ldrb	r3, [r2, #10]
 8002638:	f361 1386 	bfi	r3, r1, #6, #1
 800263c:	7293      	strb	r3, [r2, #10]
        MS1_MSG.Message13.SPN.MS1_statusBit08 =  (EEM_BOOL_T)((param->DATA[5]&0x80)>>7);
 800263e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002642:	7a5b      	ldrb	r3, [r3, #9]
 8002644:	09db      	lsrs	r3, r3, #7
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	b2d9      	uxtb	r1, r3
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002650:	7a93      	ldrb	r3, [r2, #10]
 8002652:	f361 13c7 	bfi	r3, r1, #7, #1
 8002656:	7293      	strb	r3, [r2, #10]


		break;
 8002658:	e3fe      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE14 :
		MS1_MSG.Message14.SPN.MS1_voltage        = (EEM_U16)(param->DATA[0])|
 800265a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800265e:	791b      	ldrb	r3, [r3, #4]
 8002660:	b29a      	uxth	r2, r3
		                                 (EEM_U16)(param->DATA[1]<<8);
 8002662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002666:	795b      	ldrb	r3, [r3, #5]
 8002668:	b29b      	uxth	r3, r3
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_voltage        = (EEM_U16)(param->DATA[0])|
 800266e:	4313      	orrs	r3, r2
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002674:	821a      	strh	r2, [r3, #16]

		MS1_MSG.Message14.SPN.MS1_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 8002676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267a:	795b      	ldrb	r3, [r3, #5]
 800267c:	b29a      	uxth	r2, r3
	                                   (EEM_U16)(param->DATA[2]<<8);
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002682:	799b      	ldrb	r3, [r3, #6]
 8002684:	b29b      	uxth	r3, r3
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 800268a:	4313      	orrs	r3, r2
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <EEM_PERIODIC+0xd38>)
 8002690:	825a      	strh	r2, [r3, #18]

		MS1_MSG.Message14.SPN.MS1_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8002692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002696:	79db      	ldrb	r3, [r3, #7]
 8002698:	b29a      	uxth	r2, r3
		                                   (EEM_U16)(param->DATA[4]<<8));
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269e:	7a1b      	ldrb	r3, [r3, #8]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <EEM_PERIODIC+0xd38>)
 80026ac:	829a      	strh	r2, [r3, #20]

		MS1_MSG.Message14.SPN.MS1_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b2:	7a5b      	ldrb	r3, [r3, #9]
 80026b4:	b29a      	uxth	r2, r3
				                                   (EEM_U16)(param->DATA[6]<<8));
 80026b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ba:	7a9b      	ldrb	r3, [r3, #10]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
		MS1_MSG.Message14.SPN.MS1_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b01      	ldr	r3, [pc, #4]	; (80026cc <EEM_PERIODIC+0xd38>)
 80026c8:	82da      	strh	r2, [r3, #22]

		break;
 80026ca:	e3c5      	b.n	8002e58 <EEM_PERIODIC+0x14c4>
 80026cc:	20000360 	.word	0x20000360
	case MESSAGE15 :

		MS1_MSG.Message15.SPN.MS1_SpeedVal=
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 80026d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d4:	791b      	ldrb	r3, [r3, #4]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
						   ((EEM_U64)param->DATA[1] << 8  )	|
 80026e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e6:	795b      	ldrb	r3, [r3, #5]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	4698      	mov	r8, r3
 80026ee:	4691      	mov	r9, r2
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80026fc:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002700:	ea4f 2208 	mov.w	r2, r8, lsl #8
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8002704:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002708:	4621      	mov	r1, r4
 800270a:	4311      	orrs	r1, r2
 800270c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002710:	4629      	mov	r1, r5
 8002712:	4319      	orrs	r1, r3
 8002714:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
						   ((EEM_U64)param->DATA[2] << 16 ) |
 8002718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271c:	799b      	ldrb	r3, [r3, #6]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002726:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002736:	4629      	mov	r1, r5
 8002738:	040b      	lsls	r3, r1, #16
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002740:	4621      	mov	r1, r4
 8002742:	040a      	lsls	r2, r1, #16
						   ((EEM_U64)param->DATA[1] << 8  )	|
 8002744:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002748:	4621      	mov	r1, r4
 800274a:	4311      	orrs	r1, r2
 800274c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002750:	4629      	mov	r1, r5
 8002752:	4319      	orrs	r1, r3
 8002754:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
						   ((EEM_U64)param->DATA[3] << 24 ) |
 8002758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800275c:	79db      	ldrb	r3, [r3, #7]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2200      	movs	r2, #0
 8002762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002766:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800276a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800276e:	460b      	mov	r3, r1
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002776:	460b      	mov	r3, r1
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						   ((EEM_U64)param->DATA[2] << 16 ) |
 800277e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002782:	4623      	mov	r3, r4
 8002784:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002788:	4602      	mov	r2, r0
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002790:	462b      	mov	r3, r5
 8002792:	460a      	mov	r2, r1
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						   ((EEM_U64)param->DATA[4] << 32 ) |
 800279a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80027b8:	000b      	movs	r3, r1
 80027ba:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[3] << 24 ) |
 80027bc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80027c0:	4621      	mov	r1, r4
 80027c2:	4311      	orrs	r1, r2
 80027c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80027c8:	4629      	mov	r1, r5
 80027ca:	4319      	orrs	r1, r3
 80027cc:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
						   ((EEM_U64)param->DATA[5] << 40 ) |
 80027d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d4:	7a5b      	ldrb	r3, [r3, #9]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027de:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80027ee:	020b      	lsls	r3, r1, #8
 80027f0:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[4] << 32 ) |
 80027f2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80027f6:	4621      	mov	r1, r4
 80027f8:	4311      	orrs	r1, r2
 80027fa:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80027fe:	4629      	mov	r1, r5
 8002800:	4319      	orrs	r1, r3
 8002802:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
						   ((EEM_U64)param->DATA[6] << 48 ) |
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280a:	7a9b      	ldrb	r3, [r3, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002824:	040b      	lsls	r3, r1, #16
 8002826:	2200      	movs	r2, #0
						   ((EEM_U64)param->DATA[5] << 40 ) |
 8002828:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800282c:	4621      	mov	r1, r4
 800282e:	4311      	orrs	r1, r2
 8002830:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002834:	4629      	mov	r1, r5
 8002836:	4319      	orrs	r1, r3
 8002838:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
						   ((EEM_U64)param->DATA[7] << 56 ) );
 800283c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002840:	7adb      	ldrb	r3, [r3, #11]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2200      	movs	r2, #0
 8002846:	67bb      	str	r3, [r7, #120]	; 0x78
 8002848:	67fa      	str	r2, [r7, #124]	; 0x7c
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002854:	060b      	lsls	r3, r1, #24
 8002856:	2200      	movs	r2, #0
				(EEM_U64)( ((EEM_U64)param->DATA[0] 	  )	|
 8002858:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800285c:	4621      	mov	r1, r4
 800285e:	4311      	orrs	r1, r2
 8002860:	6739      	str	r1, [r7, #112]	; 0x70
 8002862:	4629      	mov	r1, r5
 8002864:	4319      	orrs	r1, r3
 8002866:	6779      	str	r1, [r7, #116]	; 0x74
		MS1_MSG.Message15.SPN.MS1_SpeedVal=
 8002868:	4bb1      	ldr	r3, [pc, #708]	; (8002b30 <EEM_PERIODIC+0x119c>)
 800286a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800286e:	e9c3 1208 	strd	r1, r2, [r3, #32]


		break;
 8002872:	e2f1      	b.n	8002e58 <EEM_PERIODIC+0x14c4>


	case MESSAGE16 :
		MS2_MSG.Message16.SPN.MS2_Mode		=(EEM_U8)(param->DATA[0]);
 8002874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002878:	791a      	ldrb	r2, [r3, #4]
 800287a:	4bae      	ldr	r3, [pc, #696]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 800287c:	711a      	strb	r2, [r3, #4]
		MS2_MSG.Message16.SPN.MS2_temperature=(EEM_U16)(param->DATA[1])|(EEM_U16)((param->DATA[2])<<8);
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	795b      	ldrb	r3, [r3, #5]
 8002884:	b29a      	uxth	r2, r3
 8002886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288a:	799b      	ldrb	r3, [r3, #6]
 800288c:	b29b      	uxth	r3, r3
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	4ba7      	ldr	r3, [pc, #668]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002898:	80da      	strh	r2, [r3, #6]

		MS2_MSG.Message16.SPN.MS2_warningFlag01=(EEM_BOOL_T)(param->DATA[3]&0x01);
 800289a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289e:	79db      	ldrb	r3, [r3, #7]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	b2d9      	uxtb	r1, r3
 80028a6:	4aa3      	ldr	r2, [pc, #652]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80028a8:	7a13      	ldrb	r3, [r2, #8]
 80028aa:	f361 0300 	bfi	r3, r1, #0, #1
 80028ae:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag02=(EEM_BOOL_T)((param->DATA[3]&0x02)>>1);
 80028b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b4:	79db      	ldrb	r3, [r3, #7]
 80028b6:	105b      	asrs	r3, r3, #1
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	b2d9      	uxtb	r1, r3
 80028be:	4a9d      	ldr	r2, [pc, #628]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80028c0:	7a13      	ldrb	r3, [r2, #8]
 80028c2:	f361 0341 	bfi	r3, r1, #1, #1
 80028c6:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag03=(EEM_BOOL_T)((param->DATA[3]&0x04)>>2);
 80028c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028cc:	79db      	ldrb	r3, [r3, #7]
 80028ce:	109b      	asrs	r3, r3, #2
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	b2d9      	uxtb	r1, r3
 80028d6:	4a97      	ldr	r2, [pc, #604]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80028d8:	7a13      	ldrb	r3, [r2, #8]
 80028da:	f361 0382 	bfi	r3, r1, #2, #1
 80028de:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag04=(EEM_BOOL_T)((param->DATA[3]&0x08)>>3);
 80028e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e4:	79db      	ldrb	r3, [r3, #7]
 80028e6:	10db      	asrs	r3, r3, #3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	4a91      	ldr	r2, [pc, #580]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80028f0:	7a13      	ldrb	r3, [r2, #8]
 80028f2:	f361 03c3 	bfi	r3, r1, #3, #1
 80028f6:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag05=(EEM_BOOL_T)((param->DATA[3]&0x10)>>4);
 80028f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fc:	79db      	ldrb	r3, [r3, #7]
 80028fe:	111b      	asrs	r3, r3, #4
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	4a8b      	ldr	r2, [pc, #556]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002908:	7a13      	ldrb	r3, [r2, #8]
 800290a:	f361 1304 	bfi	r3, r1, #4, #1
 800290e:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag06=(EEM_BOOL_T)((param->DATA[3]&0x20)>>5);
 8002910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002914:	79db      	ldrb	r3, [r3, #7]
 8002916:	115b      	asrs	r3, r3, #5
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	b2d9      	uxtb	r1, r3
 800291e:	4a85      	ldr	r2, [pc, #532]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002920:	7a13      	ldrb	r3, [r2, #8]
 8002922:	f361 1345 	bfi	r3, r1, #5, #1
 8002926:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag07=(EEM_BOOL_T)((param->DATA[3]&0x30)>>6);
 8002928:	4a82      	ldr	r2, [pc, #520]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 800292a:	7a13      	ldrb	r3, [r2, #8]
 800292c:	f36f 1386 	bfc	r3, #6, #1
 8002930:	7213      	strb	r3, [r2, #8]
		MS2_MSG.Message16.SPN.MS2_warningFlag08=(EEM_BOOL_T)((param->DATA[3]&0x40)>>7);
 8002932:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002934:	7a13      	ldrb	r3, [r2, #8]
 8002936:	f36f 13c7 	bfc	r3, #7, #1
 800293a:	7213      	strb	r3, [r2, #8]

		MS2_MSG.Message16.SPN.MS2_errorFlag01=  (EEM_BOOL_T)(param->DATA[4]&0x01);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002940:	7a1b      	ldrb	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	b2d9      	uxtb	r1, r3
 8002948:	4a7a      	ldr	r2, [pc, #488]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 800294a:	7a53      	ldrb	r3, [r2, #9]
 800294c:	f361 0300 	bfi	r3, r1, #0, #1
 8002950:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag02=  (EEM_BOOL_T)((param->DATA[4]&0x02)>>1);
 8002952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002956:	7a1b      	ldrb	r3, [r3, #8]
 8002958:	105b      	asrs	r3, r3, #1
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	b2d9      	uxtb	r1, r3
 8002960:	4a74      	ldr	r2, [pc, #464]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002962:	7a53      	ldrb	r3, [r2, #9]
 8002964:	f361 0341 	bfi	r3, r1, #1, #1
 8002968:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag03=  (EEM_BOOL_T)((param->DATA[4]&0x04)>>2);
 800296a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296e:	7a1b      	ldrb	r3, [r3, #8]
 8002970:	109b      	asrs	r3, r3, #2
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	b2d9      	uxtb	r1, r3
 8002978:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 800297a:	7a53      	ldrb	r3, [r2, #9]
 800297c:	f361 0382 	bfi	r3, r1, #2, #1
 8002980:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag04=  (EEM_BOOL_T)((param->DATA[4]&0x08)>>3);
 8002982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002986:	7a1b      	ldrb	r3, [r3, #8]
 8002988:	10db      	asrs	r3, r3, #3
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2d9      	uxtb	r1, r3
 8002990:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002992:	7a53      	ldrb	r3, [r2, #9]
 8002994:	f361 03c3 	bfi	r3, r1, #3, #1
 8002998:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag05=  (EEM_BOOL_T)((param->DATA[4]&0x10)>>4);
 800299a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299e:	7a1b      	ldrb	r3, [r3, #8]
 80029a0:	111b      	asrs	r3, r3, #4
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	4a62      	ldr	r2, [pc, #392]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80029aa:	7a53      	ldrb	r3, [r2, #9]
 80029ac:	f361 1304 	bfi	r3, r1, #4, #1
 80029b0:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag06=  (EEM_BOOL_T)((param->DATA[4]&0x20)>>5);
 80029b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b6:	7a1b      	ldrb	r3, [r3, #8]
 80029b8:	115b      	asrs	r3, r3, #5
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	b2d9      	uxtb	r1, r3
 80029c0:	4a5c      	ldr	r2, [pc, #368]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80029c2:	7a53      	ldrb	r3, [r2, #9]
 80029c4:	f361 1345 	bfi	r3, r1, #5, #1
 80029c8:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag07=  (EEM_BOOL_T)((param->DATA[4]&0x40)>>6);
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ce:	7a1b      	ldrb	r3, [r3, #8]
 80029d0:	119b      	asrs	r3, r3, #6
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	b2d9      	uxtb	r1, r3
 80029d8:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80029da:	7a53      	ldrb	r3, [r2, #9]
 80029dc:	f361 1386 	bfi	r3, r1, #6, #1
 80029e0:	7253      	strb	r3, [r2, #9]
		MS2_MSG.Message16.SPN.MS2_errorFlag08=  (EEM_BOOL_T)((param->DATA[4]&0x80)>>7);
 80029e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e6:	7a1b      	ldrb	r3, [r3, #8]
 80029e8:	09db      	lsrs	r3, r3, #7
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	b2d9      	uxtb	r1, r3
 80029f2:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 80029f4:	7a53      	ldrb	r3, [r2, #9]
 80029f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80029fa:	7253      	strb	r3, [r2, #9]

		MS2_MSG.Message16.SPN.MS2_statusBit01 =  (EEM_BOOL_T)(param->DATA[5]&0x01);
 80029fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a00:	7a5b      	ldrb	r3, [r3, #9]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	b2d9      	uxtb	r1, r3
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a0a:	7a93      	ldrb	r3, [r2, #10]
 8002a0c:	f361 0300 	bfi	r3, r1, #0, #1
 8002a10:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit02 =  (EEM_BOOL_T)((param->DATA[5]&0x02)>>1);
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a16:	7a5b      	ldrb	r3, [r3, #9]
 8002a18:	105b      	asrs	r3, r3, #1
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	b2d9      	uxtb	r1, r3
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a22:	7a93      	ldrb	r3, [r2, #10]
 8002a24:	f361 0341 	bfi	r3, r1, #1, #1
 8002a28:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit03 =  (EEM_BOOL_T)((param->DATA[5]&0x04)>>2);
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	7a5b      	ldrb	r3, [r3, #9]
 8002a30:	109b      	asrs	r3, r3, #2
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b2d9      	uxtb	r1, r3
 8002a38:	4a3e      	ldr	r2, [pc, #248]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a3a:	7a93      	ldrb	r3, [r2, #10]
 8002a3c:	f361 0382 	bfi	r3, r1, #2, #1
 8002a40:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit04 =  (EEM_BOOL_T)((param->DATA[5]&0x08)>>3);
 8002a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a46:	7a5b      	ldrb	r3, [r3, #9]
 8002a48:	10db      	asrs	r3, r3, #3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	b2d9      	uxtb	r1, r3
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a52:	7a93      	ldrb	r3, [r2, #10]
 8002a54:	f361 03c3 	bfi	r3, r1, #3, #1
 8002a58:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit05 =  (EEM_BOOL_T)((param->DATA[5]&0x10)>>4);
 8002a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a5e:	7a5b      	ldrb	r3, [r3, #9]
 8002a60:	111b      	asrs	r3, r3, #4
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	b2d9      	uxtb	r1, r3
 8002a68:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a6a:	7a93      	ldrb	r3, [r2, #10]
 8002a6c:	f361 1304 	bfi	r3, r1, #4, #1
 8002a70:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit06 =  (EEM_BOOL_T)((param->DATA[5]&0x20)>>5);
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	7a5b      	ldrb	r3, [r3, #9]
 8002a78:	115b      	asrs	r3, r3, #5
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a82:	7a93      	ldrb	r3, [r2, #10]
 8002a84:	f361 1345 	bfi	r3, r1, #5, #1
 8002a88:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit07 =  (EEM_BOOL_T)((param->DATA[5]&0x40)>>6);
 8002a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a8e:	7a5b      	ldrb	r3, [r3, #9]
 8002a90:	119b      	asrs	r3, r3, #6
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	b2d9      	uxtb	r1, r3
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002a9a:	7a93      	ldrb	r3, [r2, #10]
 8002a9c:	f361 1386 	bfi	r3, r1, #6, #1
 8002aa0:	7293      	strb	r3, [r2, #10]
		MS2_MSG.Message16.SPN.MS2_statusBit08 =  (EEM_BOOL_T)((param->DATA[5]&0x80)>>7);
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	7a5b      	ldrb	r3, [r3, #9]
 8002aa8:	09db      	lsrs	r3, r3, #7
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	b2d9      	uxtb	r1, r3
 8002ab2:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002ab4:	7a93      	ldrb	r3, [r2, #10]
 8002ab6:	f361 13c7 	bfi	r3, r1, #7, #1
 8002aba:	7293      	strb	r3, [r2, #10]

	break;
 8002abc:	e1cc      	b.n	8002e58 <EEM_PERIODIC+0x14c4>


	case MESSAGE17 :

		        MS2_MSG.Message17.SPN.MS2_voltage  = (EEM_U16)(param->DATA[0])|
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	b29a      	uxth	r2, r3
				                                          (EEM_U16)(param->DATA[1]<<8);
 8002ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aca:	795b      	ldrb	r3, [r3, #5]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	b29b      	uxth	r3, r3
		        MS2_MSG.Message17.SPN.MS2_voltage  = (EEM_U16)(param->DATA[0])|
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002ad8:	821a      	strh	r2, [r3, #16]

				MS2_MSG.Message17.SPN.MS2_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	b29a      	uxth	r2, r3
				                  (EEM_U16)(param->DATA[2]<<8);
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae6:	799b      	ldrb	r3, [r3, #6]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseUCurrent  = (EEM_U16)(param->DATA[1])|
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002af4:	825a      	strh	r2, [r3, #18]

				MS2_MSG.Message17.SPN.MS2_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8002af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afa:	79db      	ldrb	r3, [r3, #7]
 8002afc:	b29a      	uxth	r2, r3
				                  (EEM_U16)(param->DATA[4]<<8));
 8002afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b02:	7a1b      	ldrb	r3, [r3, #8]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseVCurrent  = (EEM_U16)((param->DATA[3])|
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002b10:	829a      	strh	r2, [r3, #20]

				MS2_MSG.Message17.SPN.MS2_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8002b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b16:	7a5b      	ldrb	r3, [r3, #9]
 8002b18:	b29a      	uxth	r2, r3
						                                   (EEM_U16)(param->DATA[6]<<8));
 8002b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b1e:	7a9b      	ldrb	r3, [r3, #10]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
				MS2_MSG.Message17.SPN.MS2_PhaseWCurrent  = (EEM_U16)((param->DATA[5])|
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <EEM_PERIODIC+0x11a0>)
 8002b2c:	82da      	strh	r2, [r3, #22]




	break;
 8002b2e:	e193      	b.n	8002e58 <EEM_PERIODIC+0x14c4>
 8002b30:	20000360 	.word	0x20000360
 8002b34:	20000388 	.word	0x20000388


	case MESSAGE18 :

		MS2_MSG.Message18.SPN.MS2_SpeedVal =
						(EEM_U64)  ((EEM_U64)param->DATA[0] 	  )	|
 8002b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b44:	66fa      	str	r2, [r7, #108]	; 0x6c
								   ((EEM_U64)param->DATA[1] << 8  )	|
 8002b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4a:	795b      	ldrb	r3, [r3, #5]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	461c      	mov	r4, r3
 8002b52:	4615      	mov	r5, r2
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	022b      	lsls	r3, r5, #8
 8002b5e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b62:	0222      	lsls	r2, r4, #8
						(EEM_U64)  ((EEM_U64)param->DATA[0] 	  )	|
 8002b64:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	6639      	str	r1, [r7, #96]	; 0x60
 8002b6e:	4629      	mov	r1, r5
 8002b70:	4319      	orrs	r1, r3
 8002b72:	6679      	str	r1, [r7, #100]	; 0x64
								   ((EEM_U64)param->DATA[2] << 16 ) |
 8002b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b78:	799b      	ldrb	r3, [r3, #6]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002b8e:	4629      	mov	r1, r5
 8002b90:	040b      	lsls	r3, r1, #16
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002b98:	4621      	mov	r1, r4
 8002b9a:	040a      	lsls	r2, r1, #16
								   ((EEM_U64)param->DATA[1] << 8  )	|
 8002b9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	6539      	str	r1, [r7, #80]	; 0x50
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4319      	orrs	r1, r3
 8002baa:	6579      	str	r1, [r7, #84]	; 0x54
								   ((EEM_U64)param->DATA[3] << 24 ) |
 8002bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb0:	79db      	ldrb	r3, [r3, #7]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ea4f 6a03 	mov.w	sl, r3, lsl #24
								   ((EEM_U64)param->DATA[2] << 16 ) |
 8002bca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002bce:	460b      	mov	r3, r1
 8002bd0:	ea43 030a 	orr.w	r3, r3, sl
 8002bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	ea43 030b 	orr.w	r3, r3, fp
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
								   ((EEM_U64)param->DATA[4] << 32 ) |
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be2:	7a1b      	ldrb	r3, [r3, #8]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bea:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[3] << 24 ) |
 8002bfa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4311      	orrs	r1, r2
 8002c02:	6339      	str	r1, [r7, #48]	; 0x30
 8002c04:	4629      	mov	r1, r5
 8002c06:	4319      	orrs	r1, r3
 8002c08:	6379      	str	r1, [r7, #52]	; 0x34
								   ((EEM_U64)param->DATA[5] << 40 ) |
 8002c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0e:	7a5b      	ldrb	r3, [r3, #9]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c22:	020b      	lsls	r3, r1, #8
 8002c24:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[4] << 32 ) |
 8002c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	6239      	str	r1, [r7, #32]
 8002c30:	4629      	mov	r1, r5
 8002c32:	4319      	orrs	r1, r3
 8002c34:	6279      	str	r1, [r7, #36]	; 0x24
								   ((EEM_U64)param->DATA[6] << 48 ) |
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3a:	7a9b      	ldrb	r3, [r3, #10]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	61fa      	str	r2, [r7, #28]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	69b9      	ldr	r1, [r7, #24]
 8002c4e:	040b      	lsls	r3, r1, #16
 8002c50:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[5] << 40 ) |
 8002c52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c56:	4621      	mov	r1, r4
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	6139      	str	r1, [r7, #16]
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4319      	orrs	r1, r3
 8002c60:	6179      	str	r1, [r7, #20]
								   ((EEM_U64)param->DATA[7] << 56  );
 8002c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c66:	7adb      	ldrb	r3, [r3, #11]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	60fa      	str	r2, [r7, #12]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	060b      	lsls	r3, r1, #24
 8002c7c:	2200      	movs	r2, #0
								   ((EEM_U64)param->DATA[6] << 48 ) |
 8002c7e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c82:	4621      	mov	r1, r4
 8002c84:	4311      	orrs	r1, r2
 8002c86:	6039      	str	r1, [r7, #0]
 8002c88:	4629      	mov	r1, r5
 8002c8a:	4319      	orrs	r1, r3
 8002c8c:	6079      	str	r1, [r7, #4]
		MS2_MSG.Message18.SPN.MS2_SpeedVal =
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <EEM_PERIODIC+0x14d4>)
 8002c90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002c94:	e9c3 1208 	strd	r1, r2, [r3, #32]





	break;
 8002c98:	e0de      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE19 :

		BCM_MSG.Message19.SPN.BCM_MS1_Mode=(EEM_U8)(param->DATA[0]);
 8002c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c9e:	791a      	ldrb	r2, [r3, #4]
 8002ca0:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <EEM_PERIODIC+0x14d8>)
 8002ca2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88


	break;
 8002ca6:	e0d7      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE20 :

		BCM_MSG.Message20.SPN.BCM_MS2_Mode=(EEM_U8)(param->DATA[0]);
 8002ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cac:	791a      	ldrb	r2, [r3, #4]
 8002cae:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <EEM_PERIODIC+0x14d8>)
 8002cb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98




	break;
 8002cb4:	e0d0      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE21 :

         SCB_MSG.Message21.SPN.SCB_cameraStartACK_u1    =(EEM_U8)(param->DATA[0]&0x01);
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	b2d9      	uxtb	r1, r3
 8002cc2:	4a6b      	ldr	r2, [pc, #428]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002cc4:	7913      	ldrb	r3, [r2, #4]
 8002cc6:	f361 0300 	bfi	r3, r1, #0, #1
 8002cca:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStartNACK_u1   =(EEM_U8)((param->DATA[0]&0x02)>>1);
 8002ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	105b      	asrs	r3, r3, #1
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	b2d9      	uxtb	r1, r3
 8002cda:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002cdc:	7913      	ldrb	r3, [r2, #4]
 8002cde:	f361 0341 	bfi	r3, r1, #1, #1
 8002ce2:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStopACK_u1	    =(EEM_U8)((param->DATA[0]&0x04)>>2);
 8002ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce8:	791b      	ldrb	r3, [r3, #4]
 8002cea:	109b      	asrs	r3, r3, #2
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	b2d9      	uxtb	r1, r3
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002cf4:	7913      	ldrb	r3, [r2, #4]
 8002cf6:	f361 0382 	bfi	r3, r1, #2, #1
 8002cfa:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_cameraStopNACK_u1	=(EEM_U8)((param->DATA[0]&0x08)>>3);
 8002cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	10db      	asrs	r3, r3, #3
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	b2d9      	uxtb	r1, r3
 8002d0a:	4a59      	ldr	r2, [pc, #356]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d0c:	7913      	ldrb	r3, [r2, #4]
 8002d0e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002d12:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardErase_ACK_u1	=(EEM_U8)((param->DATA[0]&0x10)>>4);
 8002d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d18:	791b      	ldrb	r3, [r3, #4]
 8002d1a:	111b      	asrs	r3, r3, #4
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	b2d9      	uxtb	r1, r3
 8002d22:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d24:	7913      	ldrb	r3, [r2, #4]
 8002d26:	f361 1304 	bfi	r3, r1, #4, #1
 8002d2a:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardErase_NACK_u1	=(EEM_U8)((param->DATA[0]&0x20)>>5);
 8002d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d30:	791b      	ldrb	r3, [r3, #4]
 8002d32:	115b      	asrs	r3, r3, #5
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	b2d9      	uxtb	r1, r3
 8002d3a:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d3c:	7913      	ldrb	r3, [r2, #4]
 8002d3e:	f361 1345 	bfi	r3, r1, #5, #1
 8002d42:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardSave_ACK_u1	=(EEM_U8)((param->DATA[0]&0x40)>>6);
 8002d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d48:	791b      	ldrb	r3, [r3, #4]
 8002d4a:	119b      	asrs	r3, r3, #6
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	b2d9      	uxtb	r1, r3
 8002d52:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d54:	7913      	ldrb	r3, [r2, #4]
 8002d56:	f361 1386 	bfi	r3, r1, #6, #1
 8002d5a:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_sdCardSave_NACK_u1	=(EEM_U8)((param->DATA[0]&0x80)>>7);
 8002d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	09db      	lsrs	r3, r3, #7
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	b2d9      	uxtb	r1, r3
 8002d6c:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d6e:	7913      	ldrb	r3, [r2, #4]
 8002d70:	f361 13c7 	bfi	r3, r1, #7, #1
 8002d74:	7113      	strb	r3, [r2, #4]
         SCB_MSG.Message21.SPN.SCB_loggerByte01 		=(EEM_U8)(param->DATA[1]);
 8002d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7a:	795a      	ldrb	r2, [r3, #5]
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d7e:	715a      	strb	r2, [r3, #5]
         SCB_MSG.Message21.SPN.SCB_loggerByte02 		=(EEM_U8)(param->DATA[2]);
 8002d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d84:	799a      	ldrb	r2, [r3, #6]
 8002d86:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d88:	719a      	strb	r2, [r3, #6]
         SCB_MSG.Message21.SPN.SCB_loggerByte03 		=(EEM_U8)(param->DATA[3]);
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	79da      	ldrb	r2, [r3, #7]
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d92:	71da      	strb	r2, [r3, #7]
         SCB_MSG.Message21.SPN.SCB_loggerByte04 		=(EEM_U8)(param->DATA[4]);
 8002d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d98:	7a1a      	ldrb	r2, [r3, #8]
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002d9c:	721a      	strb	r2, [r3, #8]
         SCB_MSG.Message21.SPN.SCB_loggerByte05 		=(EEM_U8)(param->DATA[5]);
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da2:	7a5a      	ldrb	r2, [r3, #9]
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002da6:	725a      	strb	r2, [r3, #9]
         SCB_MSG.Message21.SPN.SCB_loggerByte06 		=(EEM_U8)(param->DATA[6]);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dac:	7a9a      	ldrb	r2, [r3, #10]
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <EEM_PERIODIC+0x14dc>)
 8002db0:	729a      	strb	r2, [r3, #10]

	break;
 8002db2:	e051      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE22 :

		TLM_MSG.Message22.SPN.TLM_wifiStatus_u8= (EEM_U8)(param->DATA[0]);
 8002db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db8:	791a      	ldrb	r2, [r3, #4]
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002dbc:	711a      	strb	r2, [r3, #4]
		TLM_MSG.Message22.SPN.TLM_wifiCmd01_u8=  (EEM_U8)(param->DATA[1]);
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc2:	795a      	ldrb	r2, [r3, #5]
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002dc6:	715a      	strb	r2, [r3, #5]
		TLM_MSG.Message22.SPN.TLM_wifiCmd02_u8=  (EEM_U8)(param->DATA[2]);
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dcc:	799a      	ldrb	r2, [r3, #6]
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002dd0:	719a      	strb	r2, [r3, #6]
		TLM_MSG.Message22.SPN.TLM_wifiCmd03_u8=  (EEM_U8)(param->DATA[3]);
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd6:	79da      	ldrb	r2, [r3, #7]
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002dda:	71da      	strb	r2, [r3, #7]
		TLM_MSG.Message22.SPN.TLM_wifiCmd04_u8=  (EEM_U8)(param->DATA[4]);
 8002ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de0:	7a1a      	ldrb	r2, [r3, #8]
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002de4:	721a      	strb	r2, [r3, #8]
		TLM_MSG.Message22.SPN.TLM_wifiCmd05_u8=  (EEM_U8)(param->DATA[5]);
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dea:	7a5a      	ldrb	r2, [r3, #9]
 8002dec:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002dee:	725a      	strb	r2, [r3, #9]
		TLM_MSG.Message22.SPN.TLM_wifiCmd06_u8=  (EEM_U8)(param->DATA[6]);
 8002df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df4:	7a9a      	ldrb	r2, [r3, #10]
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002df8:	729a      	strb	r2, [r3, #10]
		TLM_MSG.Message22.SPN.TLM_wifiCmd07_u8=  (EEM_U8)(param->DATA[7]);
 8002dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfe:	7ada      	ldrb	r2, [r3, #11]
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e02:	72da      	strb	r2, [r3, #11]


	break;
 8002e04:	e028      	b.n	8002e58 <EEM_PERIODIC+0x14c4>

	case MESSAGE23 :

       TLM_MSG.Message23.SPN.TLM_rfStatus_u8= (EEM_U8)(param->DATA[0]);
 8002e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e0a:	791a      	ldrb	r2, [r3, #4]
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e0e:	741a      	strb	r2, [r3, #16]
       TLM_MSG.Message23.SPN.TLM_rfCmd01_u8= (EEM_U8)(param->DATA[1]);
 8002e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e14:	795a      	ldrb	r2, [r3, #5]
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e18:	745a      	strb	r2, [r3, #17]
       TLM_MSG.Message23.SPN.TLM_rfCmd02_u8= (EEM_U8)(param->DATA[2]);
 8002e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1e:	799a      	ldrb	r2, [r3, #6]
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e22:	749a      	strb	r2, [r3, #18]
       TLM_MSG.Message23.SPN.TLM_rfCmd03_u8= (EEM_U8)(param->DATA[3]);
 8002e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e28:	79da      	ldrb	r2, [r3, #7]
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e2c:	74da      	strb	r2, [r3, #19]
       TLM_MSG.Message23.SPN.TLM_rfCmd04_u8= (EEM_U8)(param->DATA[4]);
 8002e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e32:	7a1a      	ldrb	r2, [r3, #8]
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e36:	751a      	strb	r2, [r3, #20]
       TLM_MSG.Message23.SPN.TLM_rfCmd05_u8= (EEM_U8)(param->DATA[5]);
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3c:	7a5a      	ldrb	r2, [r3, #9]
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e40:	755a      	strb	r2, [r3, #21]
       TLM_MSG.Message23.SPN.TLM_rfCmd06_u8= (EEM_U8)(param->DATA[6]);
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e46:	7a9a      	ldrb	r2, [r3, #10]
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e4a:	759a      	strb	r2, [r3, #22]
       TLM_MSG.Message23.SPN.TLM_rfCmd07_u8= (EEM_U8)(param->DATA[7]);
 8002e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e50:	7ada      	ldrb	r2, [r3, #11]
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <EEM_PERIODIC+0x14e0>)
 8002e54:	75da      	strb	r2, [r3, #23]

	break;
 8002e56:	bf00      	nop

	}

	return result;
 8002e58:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
	
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002e62:	46bd      	mov	sp, r7
 8002e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e68:	20000388 	.word	0x20000388
 8002e6c:	20000258 	.word	0x20000258
 8002e70:	20000318 	.word	0x20000318
 8002e74:	200003b0 	.word	0x200003b0

08002e78 <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <EEM_IS_EMPTY+0x26>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <EEM_IS_EMPTY+0x26>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <EEM_IS_EMPTY+0x28>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <EEM_FILTER_BCM>:
	 @return  : EEM_ERR_T
	 @date	  : 7.02.2023
	 @INFO	  :	BCM Specific CANBUS Filtering Function
********************************************************************************/
EEM_ERR_T EEM_FILTER_BCM( EEM_Protocol_obj_st* param )
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
//ERROR
#endif


#endif
	return result;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2110      	movs	r1, #16
 8002ed2:	480c      	ldr	r0, [pc, #48]	; (8002f04 <MCP2515_Initialize+0x3c>)
 8002ed4:	f001 f898 	bl	8004008 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8002ed8:	230a      	movs	r3, #10
 8002eda:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8002edc:	480a      	ldr	r0, [pc, #40]	; (8002f08 <MCP2515_Initialize+0x40>)
 8002ede:	f002 f963 	bl	80051a8 <HAL_SPI_GetState>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <MCP2515_Initialize+0x24>
      return true;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e006      	b.n	8002efa <MCP2515_Initialize+0x32>

    loop--;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f1      	bne.n	8002edc <MCP2515_Initialize+0x14>

  return false;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40020000 	.word	0x40020000
 8002f08:	200001b0 	.word	0x200001b0

08002f0c <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	200f      	movs	r0, #15
 8002f16:	f000 f879 	bl	800300c <MCP2515_WriteByte>

  uint8_t loop = 10;
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8002f1e:	200e      	movs	r0, #14
 8002f20:	f000 f830 	bl	8002f84 <MCP2515_ReadByte>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d101      	bne.n	8002f32 <MCP2515_SetConfigMode+0x26>
      return true;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e006      	b.n	8002f40 <MCP2515_SetConfigMode+0x34>

    loop--;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ef      	bne.n	8002f1e <MCP2515_SetConfigMode+0x12>

  return false;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	200f      	movs	r0, #15
 8002f52:	f000 f85b 	bl	800300c <MCP2515_WriteByte>

  uint8_t loop = 10;
 8002f56:	230a      	movs	r3, #10
 8002f58:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8002f5a:	200e      	movs	r0, #14
 8002f5c:	f000 f812 	bl	8002f84 <MCP2515_ReadByte>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <MCP2515_SetNormalMode+0x26>
      return true;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e006      	b.n	8002f7c <MCP2515_SetNormalMode+0x34>

    loop--;
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ef      	bne.n	8002f5a <MCP2515_SetNormalMode+0x12>

  return false;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2110      	movs	r1, #16
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <MCP2515_ReadByte+0x40>)
 8002f94:	f001 f838 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8002f98:	2003      	movs	r0, #3
 8002f9a:	f000 f901 	bl	80031a0 <SPI_Tx>
  SPI_Tx(address);
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f8fd 	bl	80031a0 <SPI_Tx>
  retVal = SPI_Rx();
 8002fa6:	f000 f921 	bl	80031ec <SPI_Rx>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2110      	movs	r1, #16
 8002fb2:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <MCP2515_ReadByte+0x40>)
 8002fb4:	f001 f828 	bl	8004008 <HAL_GPIO_WritePin>

  return retVal;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2110      	movs	r1, #16
 8002fdc:	480a      	ldr	r0, [pc, #40]	; (8003008 <MCP2515_ReadRxSequence+0x40>)
 8002fde:	f001 f813 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f8db 	bl	80031a0 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8002fea:	79bb      	ldrb	r3, [r7, #6]
 8002fec:	4619      	mov	r1, r3
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f000 f90c 	bl	800320c <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <MCP2515_ReadRxSequence+0x40>)
 8002ffa:	f001 f805 	bl	8004008 <HAL_GPIO_WritePin>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40020000 	.word	0x40020000

0800300c <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	460a      	mov	r2, r1
 8003016:	71fb      	strb	r3, [r7, #7]
 8003018:	4613      	mov	r3, r2
 800301a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800301c:	2200      	movs	r2, #0
 800301e:	2110      	movs	r1, #16
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <MCP2515_WriteByte+0x44>)
 8003022:	f000 fff1 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8003026:	2002      	movs	r0, #2
 8003028:	f000 f8ba 	bl	80031a0 <SPI_Tx>
  SPI_Tx(address);
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f8b6 	bl	80031a0 <SPI_Tx>
  SPI_Tx(data);
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f8b2 	bl	80031a0 <SPI_Tx>

  MCP2515_CS_HIGH();
 800303c:	2201      	movs	r2, #1
 800303e:	2110      	movs	r1, #16
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <MCP2515_WriteByte+0x44>)
 8003042:	f000 ffe1 	bl	8004008 <HAL_GPIO_WritePin>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40020000 	.word	0x40020000

08003054 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	603a      	str	r2, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	460b      	mov	r3, r1
 8003062:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8003064:	2200      	movs	r2, #0
 8003066:	2110      	movs	r1, #16
 8003068:	480e      	ldr	r0, [pc, #56]	; (80030a4 <MCP2515_WriteByteSequence+0x50>)
 800306a:	f000 ffcd 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800306e:	2002      	movs	r0, #2
 8003070:	f000 f896 	bl	80031a0 <SPI_Tx>
  SPI_Tx(startAddress);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f892 	bl	80031a0 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800307c:	79ba      	ldrb	r2, [r7, #6]
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	f000 f89a 	bl	80031c4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8003090:	2201      	movs	r2, #1
 8003092:	2110      	movs	r1, #16
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <MCP2515_WriteByteSequence+0x50>)
 8003096:	f000 ffb7 	bl	8004008 <HAL_GPIO_WritePin>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40020000 	.word	0x40020000

080030a8 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	4613      	mov	r3, r2
 80030b8:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80030ba:	2200      	movs	r2, #0
 80030bc:	2110      	movs	r1, #16
 80030be:	480e      	ldr	r0, [pc, #56]	; (80030f8 <MCP2515_LoadTxSequence+0x50>)
 80030c0:	f000 ffa2 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f86a 	bl	80031a0 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80030cc:	2104      	movs	r1, #4
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f000 f878 	bl	80031c4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f862 	bl	80031a0 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f86f 	bl	80031c4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80030e6:	2201      	movs	r2, #1
 80030e8:	2110      	movs	r1, #16
 80030ea:	4803      	ldr	r0, [pc, #12]	; (80030f8 <MCP2515_LoadTxSequence+0x50>)
 80030ec:	f000 ff8c 	bl	8004008 <HAL_GPIO_WritePin>
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40020000 	.word	0x40020000

080030fc <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8003106:	2200      	movs	r2, #0
 8003108:	2110      	movs	r1, #16
 800310a:	4808      	ldr	r0, [pc, #32]	; (800312c <MCP2515_RequestToSend+0x30>)
 800310c:	f000 ff7c 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f844 	bl	80031a0 <SPI_Tx>

  MCP2515_CS_HIGH();
 8003118:	2201      	movs	r2, #1
 800311a:	2110      	movs	r1, #16
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <MCP2515_RequestToSend+0x30>)
 800311e:	f000 ff73 	bl	8004008 <HAL_GPIO_WritePin>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40020000 	.word	0x40020000

08003130 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8003136:	2200      	movs	r2, #0
 8003138:	2110      	movs	r1, #16
 800313a:	480a      	ldr	r0, [pc, #40]	; (8003164 <MCP2515_ReadStatus+0x34>)
 800313c:	f000 ff64 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8003140:	20a0      	movs	r0, #160	; 0xa0
 8003142:	f000 f82d 	bl	80031a0 <SPI_Tx>
  retVal = SPI_Rx();
 8003146:	f000 f851 	bl	80031ec <SPI_Rx>
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800314e:	2201      	movs	r2, #1
 8003150:	2110      	movs	r1, #16
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <MCP2515_ReadStatus+0x34>)
 8003154:	f000 ff58 	bl	8004008 <HAL_GPIO_WritePin>

  return retVal;
 8003158:	79fb      	ldrb	r3, [r7, #7]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40020000 	.word	0x40020000

08003168 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800316e:	2200      	movs	r2, #0
 8003170:	2110      	movs	r1, #16
 8003172:	480a      	ldr	r0, [pc, #40]	; (800319c <MCP2515_GetRxStatus+0x34>)
 8003174:	f000 ff48 	bl	8004008 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8003178:	20b0      	movs	r0, #176	; 0xb0
 800317a:	f000 f811 	bl	80031a0 <SPI_Tx>
  retVal = SPI_Rx();
 800317e:	f000 f835 	bl	80031ec <SPI_Rx>
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8003186:	2201      	movs	r2, #1
 8003188:	2110      	movs	r1, #16
 800318a:	4804      	ldr	r0, [pc, #16]	; (800319c <MCP2515_GetRxStatus+0x34>)
 800318c:	f000 ff3c 	bl	8004008 <HAL_GPIO_WritePin>

  return retVal;
 8003190:	79fb      	ldrb	r3, [r7, #7]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40020000 	.word	0x40020000

080031a0 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80031aa:	1df9      	adds	r1, r7, #7
 80031ac:	230a      	movs	r3, #10
 80031ae:	2201      	movs	r2, #1
 80031b0:	4803      	ldr	r0, [pc, #12]	; (80031c0 <SPI_Tx+0x20>)
 80031b2:	f001 fc0a 	bl	80049ca <HAL_SPI_Transmit>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200001b0 	.word	0x200001b0

080031c4 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	230a      	movs	r3, #10
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4803      	ldr	r0, [pc, #12]	; (80031e8 <SPI_TxBuffer+0x24>)
 80031da:	f001 fbf6 	bl	80049ca <HAL_SPI_Transmit>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200001b0 	.word	0x200001b0

080031ec <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80031f2:	1df9      	adds	r1, r7, #7
 80031f4:	230a      	movs	r3, #10
 80031f6:	2201      	movs	r2, #1
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <SPI_Rx+0x1c>)
 80031fa:	f001 fd22 	bl	8004c42 <HAL_SPI_Receive>
  return retVal;
 80031fe:	79fb      	ldrb	r3, [r7, #7]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200001b0 	.word	0x200001b0

0800320c <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	b29a      	uxth	r2, r3
 800321c:	230a      	movs	r3, #10
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <SPI_RxBuffer+0x24>)
 8003222:	f001 fd0e 	bl	8004c42 <HAL_SPI_Receive>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200001b0 	.word	0x200001b0

08003234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <HAL_Init+0x40>)
 800323e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_Init+0x40>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_Init+0x40>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325c:	2003      	movs	r0, #3
 800325e:	f000 fd0d 	bl	8003c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003262:	200f      	movs	r0, #15
 8003264:	f000 f808 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003268:	f7fd fc34 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fd25 	bl	8003ce6 <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f000 fced 	bl	8003c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000008 	.word	0x20000008
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000008 	.word	0x20000008
 80032fc:	200003c8 	.word	0x200003c8

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	200003c8 	.word	0x200003c8

08003318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e033      	b.n	8003396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fbf4 	bl	8000b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335e:	f023 0302 	bic.w	r3, r3, #2
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 faba 	bl	80038e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
 8003386:	e001      	b.n	800338c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Start+0x1a>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e097      	b.n	80034ea <HAL_ADC_Start+0x14a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d018      	beq.n	8003402 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033e0:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <HAL_ADC_Start+0x158>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_ADC_Start+0x15c>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9a      	lsrs	r2, r3, #18
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033f4:	e002      	b.n	80033fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f9      	bne.n	80033f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d15f      	bne.n	80034d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800343a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	d106      	bne.n	800345e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f023 0206 	bic.w	r2, r3, #6
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
 800345c:	e002      	b.n	8003464 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_ADC_Start+0x160>)
 800346e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003478:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d129      	bne.n	80034e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e020      	b.n	80034e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_ADC_Start+0x164>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d11b      	bne.n	80034e8 <HAL_ADC_Start+0x148>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d114      	bne.n	80034e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	e00b      	b.n	80034e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	40012300 	.word	0x40012300
 8003504:	40012000 	.word	0x40012000

08003508 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADC_Stop+0x16>
 800351a:	2302      	movs	r3, #2
 800351c:	e021      	b.n	8003562 <HAL_ADC_Stop+0x5a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d113      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359a:	d10b      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e063      	b.n	800367c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80035b4:	f7ff fea4 	bl	8003300 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035ba:	e021      	b.n	8003600 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d01d      	beq.n	8003600 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_ADC_PollForConversion+0x6c>
 80035ca:	f7ff fe99 	bl	8003300 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d212      	bcs.n	8003600 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d00b      	beq.n	8003600 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e03d      	b.n	800367c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d1d6      	bne.n	80035bc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0212 	mvn.w	r2, #18
 8003616:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d123      	bne.n	800367a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11f      	bne.n	800367a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d111      	bne.n	800367a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e105      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x228>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b09      	cmp	r3, #9
 80036ca:	d925      	bls.n	8003718 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	3b1e      	subs	r3, #30
 80036e2:	2207      	movs	r2, #7
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43da      	mvns	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	400a      	ands	r2, r1
 80036f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68d9      	ldr	r1, [r3, #12]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	4618      	mov	r0, r3
 8003704:	4603      	mov	r3, r0
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4403      	add	r3, r0
 800370a:	3b1e      	subs	r3, #30
 800370c:	409a      	lsls	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e022      	b.n	800375e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6919      	ldr	r1, [r3, #16]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	2207      	movs	r2, #7
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	400a      	ands	r2, r1
 800373a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6919      	ldr	r1, [r3, #16]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	4603      	mov	r3, r0
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4403      	add	r3, r0
 8003754:	409a      	lsls	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b06      	cmp	r3, #6
 8003764:	d824      	bhi.n	80037b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	3b05      	subs	r3, #5
 8003778:	221f      	movs	r2, #31
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	400a      	ands	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	4618      	mov	r0, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	3b05      	subs	r3, #5
 80037a2:	fa00 f203 	lsl.w	r2, r0, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	635a      	str	r2, [r3, #52]	; 0x34
 80037ae:	e04c      	b.n	800384a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d824      	bhi.n	8003802 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b23      	subs	r3, #35	; 0x23
 80037ca:	221f      	movs	r2, #31
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43da      	mvns	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	400a      	ands	r2, r1
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	3b23      	subs	r3, #35	; 0x23
 80037f4:	fa00 f203 	lsl.w	r2, r0, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003800:	e023      	b.n	800384a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3b41      	subs	r3, #65	; 0x41
 8003814:	221f      	movs	r2, #31
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	4618      	mov	r0, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b41      	subs	r3, #65	; 0x41
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_ADC_ConfigChannel+0x234>)
 800384c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <HAL_ADC_ConfigChannel+0x238>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d109      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1cc>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b12      	cmp	r3, #18
 800385e:	d105      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_ADC_ConfigChannel+0x238>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d123      	bne.n	80038be <HAL_ADC_ConfigChannel+0x21e>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b10      	cmp	r3, #16
 800387c:	d003      	beq.n	8003886 <HAL_ADC_ConfigChannel+0x1e6>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b11      	cmp	r3, #17
 8003884:	d11b      	bne.n	80038be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d111      	bne.n	80038be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_ADC_ConfigChannel+0x23c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <HAL_ADC_ConfigChannel+0x240>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	0c9a      	lsrs	r2, r3, #18
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038b0:	e002      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f9      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012300 	.word	0x40012300
 80038d8:	40012000 	.word	0x40012000
 80038dc:	20000000 	.word	0x20000000
 80038e0:	431bde83 	.word	0x431bde83

080038e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ec:	4b79      	ldr	r3, [pc, #484]	; (8003ad4 <ADC_Init+0x1f0>)
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800393c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <ADC_Init+0x1f4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800398a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6899      	ldr	r1, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	e00f      	b.n	80039e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0202 	bic.w	r2, r2, #2
 80039f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7e1b      	ldrb	r3, [r3, #24]
 80039fc:	005a      	lsls	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	035a      	lsls	r2, r3, #13
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	e007      	b.n	8003a58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	051a      	lsls	r2, r3, #20
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a9a:	025a      	lsls	r2, r3, #9
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	029a      	lsls	r2, r3, #10
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012300 	.word	0x40012300
 8003ad8:	0f000001 	.word	0x0f000001

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4907      	ldr	r1, [pc, #28]	; (8003b78 <__NVIC_EnableIRQ+0x38>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c48:	d301      	bcc.n	8003c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00f      	b.n	8003c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <SysTick_Config+0x40>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c56:	210f      	movs	r1, #15
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	f7ff ff8e 	bl	8003b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <SysTick_Config+0x40>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <SysTick_Config+0x40>)
 8003c68:	2207      	movs	r2, #7
 8003c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff29 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca4:	f7ff ff3e 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ff8e 	bl	8003bd0 <NVIC_EncodePriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff5d 	bl	8003b7c <__NVIC_SetPriority>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff31 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffa2 	bl	8003c38 <SysTick_Config>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e159      	b.n	8003fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	f040 8148 	bne.w	8003fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d005      	beq.n	8003d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d130      	bne.n	8003db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d88:	2201      	movs	r2, #1
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 0201 	and.w	r2, r3, #1
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d017      	beq.n	8003df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	2203      	movs	r2, #3
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d123      	bne.n	8003e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	08da      	lsrs	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3208      	adds	r2, #8
 8003e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	220f      	movs	r2, #15
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0203 	and.w	r2, r3, #3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a2 	beq.w	8003fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <HAL_GPIO_Init+0x2e8>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	4a56      	ldr	r2, [pc, #344]	; (8003fe8 <HAL_GPIO_Init+0x2e8>)
 8003e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e94:	6453      	str	r3, [r2, #68]	; 0x44
 8003e96:	4b54      	ldr	r3, [pc, #336]	; (8003fe8 <HAL_GPIO_Init+0x2e8>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea2:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_GPIO_Init+0x2ec>)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a49      	ldr	r2, [pc, #292]	; (8003ff0 <HAL_GPIO_Init+0x2f0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d019      	beq.n	8003f02 <HAL_GPIO_Init+0x202>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a48      	ldr	r2, [pc, #288]	; (8003ff4 <HAL_GPIO_Init+0x2f4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_Init+0x1fe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a47      	ldr	r2, [pc, #284]	; (8003ff8 <HAL_GPIO_Init+0x2f8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00d      	beq.n	8003efa <HAL_GPIO_Init+0x1fa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a46      	ldr	r2, [pc, #280]	; (8003ffc <HAL_GPIO_Init+0x2fc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <HAL_GPIO_Init+0x1f6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a45      	ldr	r2, [pc, #276]	; (8004000 <HAL_GPIO_Init+0x300>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_GPIO_Init+0x1f2>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e008      	b.n	8003f04 <HAL_GPIO_Init+0x204>
 8003ef2:	2307      	movs	r3, #7
 8003ef4:	e006      	b.n	8003f04 <HAL_GPIO_Init+0x204>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e004      	b.n	8003f04 <HAL_GPIO_Init+0x204>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e002      	b.n	8003f04 <HAL_GPIO_Init+0x204>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_GPIO_Init+0x204>
 8003f02:	2300      	movs	r3, #0
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f002 0203 	and.w	r2, r2, #3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4093      	lsls	r3, r2
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f14:	4935      	ldr	r1, [pc, #212]	; (8003fec <HAL_GPIO_Init+0x2ec>)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f46:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f4c:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f70:	4a24      	ldr	r2, [pc, #144]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <HAL_GPIO_Init+0x304>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	f67f aea2 	bls.w	8003d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020c00 	.word	0x40020c00
 8004000:	40021000 	.word	0x40021000
 8004004:	40013c00 	.word	0x40013c00

08004008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	4613      	mov	r3, r2
 8004016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004018:	787b      	ldrb	r3, [r7, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004024:	e003      	b.n	800402e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	041a      	lsls	r2, r3, #16
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43d9      	mvns	r1, r3
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	400b      	ands	r3, r1
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e267      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d075      	beq.n	800417a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408e:	4b88      	ldr	r3, [pc, #544]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d00c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	4b85      	ldr	r3, [pc, #532]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d112      	bne.n	80040cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4b82      	ldr	r3, [pc, #520]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b7e      	ldr	r3, [pc, #504]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05b      	beq.n	8004178 <HAL_RCC_OscConfig+0x108>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d157      	bne.n	8004178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e242      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x74>
 80040d6:	4b76      	ldr	r3, [pc, #472]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a75      	ldr	r2, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e01d      	b.n	8004120 <HAL_RCC_OscConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x98>
 80040ee:	4b70      	ldr	r3, [pc, #448]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6f      	ldr	r2, [pc, #444]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b6d      	ldr	r3, [pc, #436]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6c      	ldr	r2, [pc, #432]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0xb0>
 8004108:	4b69      	ldr	r3, [pc, #420]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a68      	ldr	r2, [pc, #416]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b66      	ldr	r3, [pc, #408]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a65      	ldr	r2, [pc, #404]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800411a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7ff f8ea 	bl	8003300 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7ff f8e6 	bl	8003300 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e207      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b5b      	ldr	r3, [pc, #364]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0xc0>
 800414e:	e014      	b.n	800417a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7ff f8d6 	bl	8003300 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7ff f8d2 	bl	8003300 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1f3      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	4b51      	ldr	r3, [pc, #324]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0xe8>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d063      	beq.n	800424e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004186:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004192:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d11c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x152>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1c7      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4937      	ldr	r1, [pc, #220]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	e03a      	b.n	800424e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCC_OscConfig+0x244>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7ff f88b 	bl	8003300 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ee:	f7ff f887 	bl	8003300 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1a8      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4925      	ldr	r1, [pc, #148]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x244>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7ff f86a 	bl	8003300 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004230:	f7ff f866 	bl	8003300 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e187      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d036      	beq.n	80042c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <HAL_RCC_OscConfig+0x248>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7ff f84a 	bl	8003300 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004270:	f7ff f846 	bl	8003300 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e167      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x200>
 800428e:	e01b      	b.n	80042c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_OscConfig+0x248>)
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004296:	f7ff f833 	bl	8003300 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	e00e      	b.n	80042bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429e:	f7ff f82f 	bl	8003300 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d907      	bls.n	80042bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e150      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470000 	.word	0x42470000
 80042b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ea      	bne.n	800429e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8097 	beq.w	8004404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b7d      	ldr	r3, [pc, #500]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a7c      	ldr	r2, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b7a      	ldr	r3, [pc, #488]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b77      	ldr	r3, [pc, #476]	; (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b74      	ldr	r3, [pc, #464]	; (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	; (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fe ffef 	bl	8003300 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fe ffeb 	bl	8003300 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e10c      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <HAL_RCC_OscConfig+0x474>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x2ea>
 800434c:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a63      	ldr	r2, [pc, #396]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	e01c      	b.n	8004394 <HAL_RCC_OscConfig+0x324>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x30c>
 8004362:	4b5f      	ldr	r3, [pc, #380]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a5e      	ldr	r2, [pc, #376]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	4b5c      	ldr	r3, [pc, #368]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0x324>
 800437c:	4b58      	ldr	r3, [pc, #352]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	4a57      	ldr	r2, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	; 0x70
 8004388:	4b55      	ldr	r3, [pc, #340]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fe ffb0 	bl	8003300 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fe ffac 	bl	8003300 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0cb      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ee      	beq.n	80043a4 <HAL_RCC_OscConfig+0x334>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7fe ff9a 	bl	8003300 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe ff96 	bl	8003300 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0b5      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ee      	bne.n	80043d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d105      	bne.n	8004404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f8:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a1 	beq.w	8004550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440e:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b08      	cmp	r3, #8
 8004418:	d05c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d141      	bne.n	80044a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe ff6a 	bl	8003300 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe ff66 	bl	8003300 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e087      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	491b      	ldr	r1, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x478>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fe ff3f 	bl	8003300 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fe ff3b 	bl	8003300 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e05c      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x416>
 80044a4:	e054      	b.n	8004550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_RCC_OscConfig+0x478>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fe ff28 	bl	8003300 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe ff24 	bl	8003300 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e045      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_OscConfig+0x470>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x444>
 80044d2:	e03d      	b.n	8004550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e038      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_RCC_OscConfig+0x4ec>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d028      	beq.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d121      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d11a      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	4293      	cmp	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0cc      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b68      	ldr	r3, [pc, #416]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90c      	bls.n	800459c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b65      	ldr	r3, [pc, #404]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b8      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045cc:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a52      	ldr	r2, [pc, #328]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b50      	ldr	r3, [pc, #320]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	494d      	ldr	r1, [pc, #308]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d044      	beq.n	8004680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d119      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d003      	beq.n	800461e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	2b03      	cmp	r3, #3
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b3f      	ldr	r3, [pc, #252]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b3b      	ldr	r3, [pc, #236]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e067      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4934      	ldr	r1, [pc, #208]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fe fe56 	bl	8003300 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fe fe52 	bl	8003300 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e04f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d20c      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e032      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4916      	ldr	r1, [pc, #88]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490e      	ldr	r1, [pc, #56]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e6:	f000 f821 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490a      	ldr	r1, [pc, #40]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fdb6 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023c00 	.word	0x40023c00
 800471c:	40023800 	.word	0x40023800
 8004720:	08005c90 	.word	0x08005c90
 8004724:	20000000 	.word	0x20000000
 8004728:	20000004 	.word	0x20000004

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b090      	sub	sp, #64	; 0x40
 8004732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
 8004738:	2300      	movs	r3, #0
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473c:	2300      	movs	r3, #0
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004744:	4b59      	ldr	r3, [pc, #356]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	d00d      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x40>
 8004750:	2b08      	cmp	r3, #8
 8004752:	f200 80a1 	bhi.w	8004898 <HAL_RCC_GetSysClockFreq+0x16c>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x34>
 800475a:	2b04      	cmp	r3, #4
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x3a>
 800475e:	e09b      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004764:	e09b      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004766:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800476a:	e098      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004776:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d028      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004782:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	2200      	movs	r2, #0
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	627a      	str	r2, [r7, #36]	; 0x24
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004794:	2100      	movs	r1, #0
 8004796:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004798:	fb03 f201 	mul.w	r2, r3, r1
 800479c:	2300      	movs	r3, #0
 800479e:	fb00 f303 	mul.w	r3, r0, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a6:	fba0 1202 	umull	r1, r2, r0, r2
 80047aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ac:	460a      	mov	r2, r1
 80047ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80047b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b2:	4413      	add	r3, r2
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2200      	movs	r2, #0
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	61fa      	str	r2, [r7, #28]
 80047be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047c6:	f7fb fd05 	bl	80001d4 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4613      	mov	r3, r2
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	e053      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	2200      	movs	r2, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	617a      	str	r2, [r7, #20]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047e6:	f04f 0b00 	mov.w	fp, #0
 80047ea:	4652      	mov	r2, sl
 80047ec:	465b      	mov	r3, fp
 80047ee:	f04f 0000 	mov.w	r0, #0
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047fc:	0150      	lsls	r0, r2, #5
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	ebb2 080a 	subs.w	r8, r2, sl
 8004806:	eb63 090b 	sbc.w	r9, r3, fp
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800481a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800481e:	ebb2 0408 	subs.w	r4, r2, r8
 8004822:	eb63 0509 	sbc.w	r5, r3, r9
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	00eb      	lsls	r3, r5, #3
 8004830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004834:	00e2      	lsls	r2, r4, #3
 8004836:	4614      	mov	r4, r2
 8004838:	461d      	mov	r5, r3
 800483a:	eb14 030a 	adds.w	r3, r4, sl
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	eb45 030b 	adc.w	r3, r5, fp
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004852:	4629      	mov	r1, r5
 8004854:	028b      	lsls	r3, r1, #10
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800485c:	4621      	mov	r1, r4
 800485e:	028a      	lsls	r2, r1, #10
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	2200      	movs	r2, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	60fa      	str	r2, [r7, #12]
 800486c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004870:	f7fb fcb0 	bl	80001d4 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	3301      	adds	r3, #1
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800488c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004896:	e002      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800489c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3740      	adds	r7, #64	; 0x40
 80048a4:	46bd      	mov	sp, r7
 80048a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	017d7840 	.word	0x017d7840

080048b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07b      	b.n	80049c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048da:	d009      	beq.n	80048f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	61da      	str	r2, [r3, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc f94e 	bl	8000bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	ea42 0103 	orr.w	r1, r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0104 	and.w	r1, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0210 	and.w	r2, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_SPI_Transmit+0x22>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e126      	b.n	8004c3a <HAL_SPI_Transmit+0x270>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f4:	f7fe fc84 	bl	8003300 <HAL_GetTick>
 80049f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a0e:	e10b      	b.n	8004c28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_Transmit+0x52>
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a20:	e102      	b.n	8004c28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d10f      	bne.n	8004a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab0:	d14b      	bne.n	8004b4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0xf6>
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d13e      	bne.n	8004b3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ae4:	e02b      	b.n	8004b3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d112      	bne.n	8004b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b18:	e011      	b.n	8004b3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1a:	f7fe fbf1 	bl	8003300 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d803      	bhi.n	8004b32 <HAL_SPI_Transmit+0x168>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d102      	bne.n	8004b38 <HAL_SPI_Transmit+0x16e>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b3c:	e074      	b.n	8004c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ce      	bne.n	8004ae6 <HAL_SPI_Transmit+0x11c>
 8004b48:	e04c      	b.n	8004be4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Transmit+0x18e>
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d140      	bne.n	8004bda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b7e:	e02c      	b.n	8004bda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d113      	bne.n	8004bb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bb4:	e011      	b.n	8004bda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb6:	f7fe fba3 	bl	8003300 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d803      	bhi.n	8004bce <HAL_SPI_Transmit+0x204>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Transmit+0x20a>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd8:	e026      	b.n	8004c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1cd      	bne.n	8004b80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fbd9 	bl	80053a0 <SPI_EndRxTxTransaction>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e000      	b.n	8004c28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af02      	add	r7, sp, #8
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5e:	d112      	bne.n	8004c86 <HAL_SPI_Receive+0x44>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f8f1 	bl	8004e64 <HAL_SPI_TransmitReceive>
 8004c82:	4603      	mov	r3, r0
 8004c84:	e0ea      	b.n	8004e5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_SPI_Receive+0x52>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e0e3      	b.n	8004e5c <HAL_SPI_Receive+0x21a>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c9c:	f7fe fb30 	bl	8003300 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cb2:	e0ca      	b.n	8004e4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Receive+0x7e>
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc4:	e0c1      	b.n	8004e4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d10f      	bne.n	8004d2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d007      	beq.n	8004d4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d162      	bne.n	8004e1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d54:	e02e      	b.n	8004db4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d115      	bne.n	8004d90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f103 020c 	add.w	r2, r3, #12
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8e:	e011      	b.n	8004db4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d90:	f7fe fab6 	bl	8003300 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d803      	bhi.n	8004da8 <HAL_SPI_Receive+0x166>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Receive+0x16c>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004db2:	e04a      	b.n	8004e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1cb      	bne.n	8004d56 <HAL_SPI_Receive+0x114>
 8004dbe:	e031      	b.n	8004e24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d113      	bne.n	8004df6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df4:	e011      	b.n	8004e1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df6:	f7fe fa83 	bl	8003300 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d803      	bhi.n	8004e0e <HAL_SPI_Receive+0x1cc>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_Receive+0x1d2>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e18:	e017      	b.n	8004e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1cd      	bne.n	8004dc0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fa53 	bl	80052d4 <SPI_EndRxTransaction>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
 8004e46:	e000      	b.n	8004e4a <HAL_SPI_Receive+0x208>
  }

error :
 8004e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08c      	sub	sp, #48	; 0x30
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e72:	2301      	movs	r3, #1
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x26>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e18a      	b.n	80051a0 <HAL_SPI_TransmitReceive+0x33c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e92:	f7fe fa35 	bl	8003300 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d00f      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x70>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eba:	d107      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x68>
 8004ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d003      	beq.n	8004ed4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ed2:	e15b      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x82>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x82>
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eec:	e14e      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d003      	beq.n	8004f02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2205      	movs	r2, #5
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	887a      	ldrh	r2, [r7, #2]
 8004f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d007      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5e:	d178      	bne.n	8005052 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x10a>
 8004f68:	8b7b      	ldrh	r3, [r7, #26]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d166      	bne.n	800503c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	881a      	ldrh	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	1c9a      	adds	r2, r3, #2
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f92:	e053      	b.n	800503c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d11b      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x176>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x176>
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d113      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d119      	bne.n	800501c <HAL_SPI_TransmitReceive+0x1b8>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d014      	beq.n	800501c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	1c9a      	adds	r2, r3, #2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005018:	2301      	movs	r3, #1
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800501c:	f7fe f970 	bl	8003300 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005028:	429a      	cmp	r2, r3
 800502a:	d807      	bhi.n	800503c <HAL_SPI_TransmitReceive+0x1d8>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d003      	beq.n	800503c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800503a:	e0a7      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1a6      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x130>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1a1      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x130>
 8005050:	e07c      	b.n	800514c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x1fc>
 800505a:	8b7b      	ldrh	r3, [r7, #26]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d16b      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005086:	e057      	b.n	8005138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	d11c      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x26c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x26c>
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d114      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	330c      	adds	r3, #12
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d119      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x2ae>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d014      	beq.n	8005112 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800510e:	2301      	movs	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005112:	f7fe f8f5 	bl	8003300 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511e:	429a      	cmp	r2, r3
 8005120:	d803      	bhi.n	800512a <HAL_SPI_TransmitReceive+0x2c6>
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d102      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x2cc>
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d103      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005136:	e029      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1a2      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x224>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d19d      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800514c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f925 	bl	80053a0 <SPI_EndRxTxTransaction>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005168:	e010      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	e000      	b.n	800518c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800518a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800519c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3730      	adds	r7, #48	; 0x30
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b6:	b2db      	uxtb	r3, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051d4:	f7fe f894 	bl	8003300 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	4413      	add	r3, r2
 80051e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051e4:	f7fe f88c 	bl	8003300 <HAL_GetTick>
 80051e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	015b      	lsls	r3, r3, #5
 80051f0:	0d1b      	lsrs	r3, r3, #20
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fa:	e054      	b.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d050      	beq.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005204:	f7fe f87c 	bl	8003300 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	429a      	cmp	r2, r3
 8005212:	d902      	bls.n	800521a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d13d      	bne.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005228:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005232:	d111      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	d004      	beq.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005246:	d107      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005260:	d10f      	bne.n	8005282 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005280:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e017      	b.n	80052c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d19b      	bne.n	80051fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000000 	.word	0x20000000

080052d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e8:	d111      	bne.n	800530e <SPI_EndRxTransaction+0x3a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f2:	d004      	beq.n	80052fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fc:	d107      	bne.n	800530e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005316:	d12a      	bne.n	800536e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d012      	beq.n	8005348 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff ff49 	bl	80051c4 <SPI_WaitFlagStateUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d02d      	beq.n	8005394 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e026      	b.n	8005396 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	2101      	movs	r1, #1
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ff36 	bl	80051c4 <SPI_WaitFlagStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01a      	beq.n	8005394 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e013      	b.n	8005396 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	2101      	movs	r1, #1
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff23 	bl	80051c4 <SPI_WaitFlagStateUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e000      	b.n	8005396 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <SPI_EndRxTxTransaction+0x7c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <SPI_EndRxTxTransaction+0x80>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0d5b      	lsrs	r3, r3, #21
 80053b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ca:	d112      	bne.n	80053f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fef4 	bl	80051c4 <SPI_WaitFlagStateUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00f      	b.n	8005412 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d0f2      	beq.n	80053f2 <SPI_EndRxTxTransaction+0x52>
 800540c:	e000      	b.n	8005410 <SPI_EndRxTxTransaction+0x70>
        break;
 800540e:	bf00      	nop
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000000 	.word	0x20000000
 8005420:	165e9f81 	.word	0x165e9f81

08005424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e041      	b.n	80054ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fb fbf6 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f000 fa2e 	bl	80058c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d122      	bne.n	800551e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d11b      	bne.n	800551e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0202 	mvn.w	r2, #2
 80054ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9bf 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 800550a:	e005      	b.n	8005518 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9b1 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9c2 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d122      	bne.n	8005572 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d11b      	bne.n	8005572 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0204 	mvn.w	r2, #4
 8005542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f995 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 800555e:	e005      	b.n	800556c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f987 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f998 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d122      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b08      	cmp	r3, #8
 800558c:	d11b      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f06f 0208 	mvn.w	r2, #8
 8005596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f96b 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 80055b2:	e005      	b.n	80055c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f95d 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f96e 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d122      	bne.n	800561a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d11b      	bne.n	800561a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0210 	mvn.w	r2, #16
 80055ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2208      	movs	r2, #8
 80055f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f941 	bl	8005888 <HAL_TIM_IC_CaptureCallback>
 8005606:	e005      	b.n	8005614 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f933 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f944 	bl	800589c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d10e      	bne.n	8005646 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d107      	bne.n	8005646 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0201 	mvn.w	r2, #1
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f90d 	bl	8005860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d10e      	bne.n	8005672 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d107      	bne.n	8005672 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fabb 	bl	8005be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d10e      	bne.n	800569e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d107      	bne.n	800569e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f909 	bl	80058b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d10e      	bne.n	80056ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d107      	bne.n	80056ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0220 	mvn.w	r2, #32
 80056c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa85 	bl	8005bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_ConfigClockSource+0x1c>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0b4      	b.n	8005858 <HAL_TIM_ConfigClockSource+0x186>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800570c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005714:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005726:	d03e      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xd4>
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	f200 8087 	bhi.w	800583e <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	f000 8086 	beq.w	8005844 <HAL_TIM_ConfigClockSource+0x172>
 8005738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573c:	d87f      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 800573e:	2b70      	cmp	r3, #112	; 0x70
 8005740:	d01a      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xa6>
 8005742:	2b70      	cmp	r3, #112	; 0x70
 8005744:	d87b      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 8005746:	2b60      	cmp	r3, #96	; 0x60
 8005748:	d050      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x11a>
 800574a:	2b60      	cmp	r3, #96	; 0x60
 800574c:	d877      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 800574e:	2b50      	cmp	r3, #80	; 0x50
 8005750:	d03c      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0xfa>
 8005752:	2b50      	cmp	r3, #80	; 0x50
 8005754:	d873      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d058      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x13a>
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d86f      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d064      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15a>
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d86b      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d060      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15a>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d867      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05c      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15a>
 8005772:	2b10      	cmp	r3, #16
 8005774:	d05a      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15a>
 8005776:	e062      	b.n	800583e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 f996 	bl	8005ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800579a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e04f      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f000 f97f 	bl	8005ab8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c8:	609a      	str	r2, [r3, #8]
      break;
 80057ca:	e03c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 f8f3 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2150      	movs	r1, #80	; 0x50
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f94c 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 80057ea:	e02c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f000 f912 	bl	8005a22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2160      	movs	r1, #96	; 0x60
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f93c 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 800580a:	e01c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6859      	ldr	r1, [r3, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	461a      	mov	r2, r3
 800581a:	f000 f8d3 	bl	80059c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2140      	movs	r1, #64	; 0x40
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f92c 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 800582a:	e00c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 f923 	bl	8005a82 <TIM_ITRx_SetConfig>
      break;
 800583c:	e003      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      break;
 8005842:	e000      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a34      	ldr	r2, [pc, #208]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00f      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d00b      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a31      	ldr	r2, [pc, #196]	; (80059ac <TIM_Base_SetConfig+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d007      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <TIM_Base_SetConfig+0xec>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0xf0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d017      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <TIM_Base_SetConfig+0xe8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <TIM_Base_SetConfig+0xec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <TIM_Base_SetConfig+0xf0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <TIM_Base_SetConfig+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <TIM_Base_SetConfig+0xf8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <TIM_Base_SetConfig+0xfc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d108      	bne.n	8005960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <TIM_Base_SetConfig+0xe4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d103      	bne.n	8005994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	615a      	str	r2, [r3, #20]
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0201 	bic.w	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 030a 	bic.w	r3, r3, #10
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b087      	sub	sp, #28
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0210 	bic.w	r2, r3, #16
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f043 0307 	orr.w	r3, r3, #7
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e050      	b.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d018      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d013      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10c      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40014000 	.word	0x40014000

08005bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <__libc_init_array>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4d0d      	ldr	r5, [pc, #52]	; (8005c34 <__libc_init_array+0x38>)
 8005c00:	4c0d      	ldr	r4, [pc, #52]	; (8005c38 <__libc_init_array+0x3c>)
 8005c02:	1b64      	subs	r4, r4, r5
 8005c04:	10a4      	asrs	r4, r4, #2
 8005c06:	2600      	movs	r6, #0
 8005c08:	42a6      	cmp	r6, r4
 8005c0a:	d109      	bne.n	8005c20 <__libc_init_array+0x24>
 8005c0c:	4d0b      	ldr	r5, [pc, #44]	; (8005c3c <__libc_init_array+0x40>)
 8005c0e:	4c0c      	ldr	r4, [pc, #48]	; (8005c40 <__libc_init_array+0x44>)
 8005c10:	f000 f82e 	bl	8005c70 <_init>
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	2600      	movs	r6, #0
 8005c1a:	42a6      	cmp	r6, r4
 8005c1c:	d105      	bne.n	8005c2a <__libc_init_array+0x2e>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c24:	4798      	blx	r3
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7ee      	b.n	8005c08 <__libc_init_array+0xc>
 8005c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c2e:	4798      	blx	r3
 8005c30:	3601      	adds	r6, #1
 8005c32:	e7f2      	b.n	8005c1a <__libc_init_array+0x1e>
 8005c34:	08005cb4 	.word	0x08005cb4
 8005c38:	08005cb4 	.word	0x08005cb4
 8005c3c:	08005cb4 	.word	0x08005cb4
 8005c40:	08005cb8 	.word	0x08005cb8

08005c44 <memcpy>:
 8005c44:	440a      	add	r2, r1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c4c:	d100      	bne.n	8005c50 <memcpy+0xc>
 8005c4e:	4770      	bx	lr
 8005c50:	b510      	push	{r4, lr}
 8005c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	d1f9      	bne.n	8005c52 <memcpy+0xe>
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <memset>:
 8005c60:	4402      	add	r2, r0
 8005c62:	4603      	mov	r3, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d100      	bne.n	8005c6a <memset+0xa>
 8005c68:	4770      	bx	lr
 8005c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c6e:	e7f9      	b.n	8005c64 <memset+0x4>

08005c70 <_init>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr

08005c7c <_fini>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr
