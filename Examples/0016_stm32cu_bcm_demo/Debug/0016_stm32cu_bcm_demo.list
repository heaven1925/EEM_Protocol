
0016_stm32cu_bcm_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c48  08004c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c50  08004c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000010  08004c64  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08004c64  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cc8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  00030d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000340c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001880a  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010466  00000000  00000000  0004d5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a884  00000000  00000000  0005da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f82a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000f82f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004c0c 	.word	0x08004c0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004c0c 	.word	0x08004c0c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <TIM1_UP_TIM10_IRQHandler>:
extern YSB_Module_st	YSB_MSG;


/* 10 MS TICK IRQ Handlers */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* increase tick parameters */
  tickParameter++;
 80004dc:	4b59      	ldr	r3, [pc, #356]	; (8000644 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a58      	ldr	r2, [pc, #352]	; (8000644 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 80004e4:	6013      	str	r3, [r2, #0]

  /* send sequance parameter */
  static uint8_t sendSequance = 0 ;
  sendSequance = tickParameter % 6 ; /* mod size of sended message count */
 80004e6:	4b57      	ldr	r3, [pc, #348]	; (8000644 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	4b57      	ldr	r3, [pc, #348]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x170>)
 80004ec:	fba3 2301 	umull	r2, r3, r3, r1
 80004f0:	089a      	lsrs	r2, r3, #2
 80004f2:	4613      	mov	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	4b53      	ldr	r3, [pc, #332]	; (800064c <TIM1_UP_TIM10_IRQHandler+0x174>)
 8000500:	701a      	strb	r2, [r3, #0]

  /* Check Can FIFO's */
  EEM_PERIODIC(&protocol.obj.canPacket);
 8000502:	4853      	ldr	r0, [pc, #332]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000504:	f001 fa42 	bl	800198c <EEM_PERIODIC>


  /* Send 100ms periodic Data */
  if( ( tickParameter % 10 ) == 0 )
 8000508:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	4b51      	ldr	r3, [pc, #324]	; (8000654 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 800050e:	fba3 2301 	umull	r2, r3, r3, r1
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1aca      	subs	r2, r1, r3
 800051e:	2a00      	cmp	r2, #0
 8000520:	f040 808b 	bne.w	800063a <TIM1_UP_TIM10_IRQHandler+0x162>
  {
	  switch( sendSequance )
 8000524:	4b49      	ldr	r3, [pc, #292]	; (800064c <TIM1_UP_TIM10_IRQHandler+0x174>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b06      	cmp	r3, #6
 800052a:	f200 8081 	bhi.w	8000630 <TIM1_UP_TIM10_IRQHandler+0x158>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000551 	.word	0x08000551
 8000538:	08000571 	.word	0x08000571
 800053c:	08000591 	.word	0x08000591
 8000540:	080005b1 	.word	0x080005b1
 8000544:	080005d1 	.word	0x080005d1
 8000548:	080005f1 	.word	0x080005f1
 800054c:	08000611 	.word	0x08000611
	  {
	  case 0 :
		  /* Send MSG03 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 8000550:	2208      	movs	r2, #8
 8000552:	4941      	ldr	r1, [pc, #260]	; (8000658 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000554:	4841      	ldr	r0, [pc, #260]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000556:	f004 fb43 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message03_ID;
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a41      	ldr	r2, [pc, #260]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000560:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000562:	4b40      	ldr	r3, [pc, #256]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000564:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000568:	2100      	movs	r1, #0
 800056a:	4839      	ldr	r0, [pc, #228]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 800056c:	4798      	blx	r3
	  break ;
 800056e:	e060      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 1:
		  /* Send MSG04 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message04.payload[0] , 8);
 8000570:	2208      	movs	r2, #8
 8000572:	493d      	ldr	r1, [pc, #244]	; (8000668 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8000574:	4839      	ldr	r0, [pc, #228]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000576:	f004 fb33 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message04_ID;
 800057a:	4b39      	ldr	r3, [pc, #228]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	4a39      	ldr	r2, [pc, #228]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000580:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000582:	4b38      	ldr	r3, [pc, #224]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000584:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000588:	2100      	movs	r1, #0
 800058a:	4831      	ldr	r0, [pc, #196]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 800058c:	4798      	blx	r3
		  break;
 800058e:	e050      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 2:
		  /* Send MSG05 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message05.payload[0] , 8);
 8000590:	2208      	movs	r2, #8
 8000592:	4936      	ldr	r1, [pc, #216]	; (800066c <TIM1_UP_TIM10_IRQHandler+0x194>)
 8000594:	4831      	ldr	r0, [pc, #196]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000596:	f004 fb23 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message05_ID;
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a31      	ldr	r2, [pc, #196]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005a0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005a2:	4b30      	ldr	r3, [pc, #192]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005a4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005a8:	2100      	movs	r1, #0
 80005aa:	4829      	ldr	r0, [pc, #164]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 80005ac:	4798      	blx	r3
	  	  break;
 80005ae:	e040      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 3:
		  /* Send MSG11 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message11.payload[0] , 8);
 80005b0:	2208      	movs	r2, #8
 80005b2:	492f      	ldr	r1, [pc, #188]	; (8000670 <TIM1_UP_TIM10_IRQHandler+0x198>)
 80005b4:	4829      	ldr	r0, [pc, #164]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 80005b6:	f004 fb13 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message11_ID;
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005be:	4a29      	ldr	r2, [pc, #164]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005c0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005c4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4821      	ldr	r0, [pc, #132]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 80005cc:	4798      	blx	r3
	  	  break;
 80005ce:	e030      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 4:
		  /* Send MSG12 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message12.payload[0] , 8);
 80005d0:	2208      	movs	r2, #8
 80005d2:	4928      	ldr	r1, [pc, #160]	; (8000674 <TIM1_UP_TIM10_IRQHandler+0x19c>)
 80005d4:	4821      	ldr	r0, [pc, #132]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 80005d6:	f004 fb03 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message12_ID;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a21      	ldr	r2, [pc, #132]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005e0:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 80005e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 80005ec:	4798      	blx	r3
	  	  break;
 80005ee:	e020      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 5:
		  /* Send MSG19 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message19.payload[0] , 8);
 80005f0:	2208      	movs	r2, #8
 80005f2:	4921      	ldr	r1, [pc, #132]	; (8000678 <TIM1_UP_TIM10_IRQHandler+0x1a0>)
 80005f4:	4819      	ldr	r0, [pc, #100]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 80005f6:	f004 faf3 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message19_ID;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80005fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000600:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000604:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000608:	2100      	movs	r1, #0
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 800060c:	4798      	blx	r3
	  	  break;
 800060e:	e010      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  case 6:
		  /* Send MSG20 */
		  memcpy(&protocol.obj.canPacket.DATA[0] , &BCM_MSG.Message03.payload[0] , 8);
 8000610:	2208      	movs	r2, #8
 8000612:	4911      	ldr	r1, [pc, #68]	; (8000658 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000616:	f004 fae3 	bl	8004be0 <memcpy>
		  protocol.obj.canPacket.EXTENDED_ID.identifier = BCM_MSG.Message20_ID;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <TIM1_UP_TIM10_IRQHandler+0x188>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000620:	61d3      	str	r3, [r2, #28]
		  protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000624:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000628:	2100      	movs	r1, #0
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <TIM1_UP_TIM10_IRQHandler+0x178>)
 800062c:	4798      	blx	r3
		  break;
 800062e:	e000      	b.n	8000632 <TIM1_UP_TIM10_IRQHandler+0x15a>

	  default: break;
 8000630:	bf00      	nop

	  }

	  /* Toogle Pin every 100ms */
	  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000632:	2104      	movs	r1, #4
 8000634:	4811      	ldr	r0, [pc, #68]	; (800067c <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8000636:	f002 fcce 	bl	8002fd6 <HAL_GPIO_TogglePin>
  }

  HAL_TIM_IRQHandler(&htim1);
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 800063c:	f003 ff0f 	bl	800445e <HAL_TIM_IRQHandler>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000002c 	.word	0x2000002c
 8000648:	aaaaaaab 	.word	0xaaaaaaab
 800064c:	20000164 	.word	0x20000164
 8000650:	2000004c 	.word	0x2000004c
 8000654:	cccccccd 	.word	0xcccccccd
 8000658:	2000025c 	.word	0x2000025c
 800065c:	20000050 	.word	0x20000050
 8000660:	20000258 	.word	0x20000258
 8000664:	20000030 	.word	0x20000030
 8000668:	20000268 	.word	0x20000268
 800066c:	20000278 	.word	0x20000278
 8000670:	20000288 	.word	0x20000288
 8000674:	20000298 	.word	0x20000298
 8000678:	200002a8 	.word	0x200002a8
 800067c:	40020400 	.word	0x40020400
 8000680:	20000208 	.word	0x20000208

08000684 <getADCValue>:



uint16_t 	getADCValue(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	uint16_t adcValHandle = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Start(&hadc1);
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <getADCValue+0x34>)
 8000690:	f001 fe54 	bl	800233c <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100);
 8000694:	2164      	movs	r1, #100	; 0x64
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <getADCValue+0x34>)
 8000698:	f001 ff37 	bl	800250a <HAL_ADC_PollForConversion>

	adcValHandle = HAL_ADC_GetValue(&hadc1);
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <getADCValue+0x34>)
 800069e:	f001 ffbf 	bl	8002620 <HAL_ADC_GetValue>
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1);
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <getADCValue+0x34>)
 80006a8:	f001 fefc 	bl	80024a4 <HAL_ADC_Stop>

	return adcValHandle;
 80006ac:	88fb      	ldrh	r3, [r7, #6]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000168 	.word	0x20000168

080006bc <applicationInit>:



void		applicationInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	protocol.ops = ops;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <applicationInit+0x40>)
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <applicationInit+0x44>)
 80006c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80006c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    protocol.ops.EEM_INIT(&protocol.obj);
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <applicationInit+0x40>)
 80006d0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <applicationInit+0x40>)
 80006d6:	4798      	blx	r3

    /* Send Test Data */
    memcpy(&protocol.obj.canPacket.DATA[0] , &testData[0] , 8);
 80006d8:	2208      	movs	r2, #8
 80006da:	490a      	ldr	r1, [pc, #40]	; (8000704 <applicationInit+0x48>)
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <applicationInit+0x4c>)
 80006de:	f004 fa7f 	bl	8004be0 <memcpy>
    protocol.obj.canPacket.EXTENDED_ID.identifier = 0x1CFFFFFF;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <applicationInit+0x40>)
 80006e4:	f06f 4263 	mvn.w	r2, #3808428032	; 0xe3000000
 80006e8:	61da      	str	r2, [r3, #28]
    protocol.ops.EEM_TX( &protocol.obj.canPacket , 0);
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <applicationInit+0x40>)
 80006ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <applicationInit+0x50>)
 80006f4:	4798      	blx	r3

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000030 	.word	0x20000030
 8000700:	08004c3c 	.word	0x08004c3c
 8000704:	08004c24 	.word	0x08004c24
 8000708:	20000050 	.word	0x20000050
 800070c:	2000004c 	.word	0x2000004c

08000710 <applicationMAIN>:



void applicationMAIN(void)
{
 8000710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000714:	af00      	add	r7, sp, #0
	applicationInit();
 8000716:	f7ff ffd1 	bl	80006bc <applicationInit>

	while(1)
	{
		BCM_MSG.Message11.SPN.BCM_MS1_Speed = (uint64_t)getADCValue();
 800071a:	f7ff ffb3 	bl	8000684 <getADCValue>
 800071e:	4603      	mov	r3, r0
 8000720:	b29b      	uxth	r3, r3
 8000722:	2200      	movs	r2, #0
 8000724:	469a      	mov	sl, r3
 8000726:	4693      	mov	fp, r2
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <applicationMAIN+0x3c>)
 800072a:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	; 0x30
		BCM_MSG.Message12.SPN.BCM_MS2_Speed = ~(uint64_t)getADCValue();
 800072e:	f7ff ffa9 	bl	8000684 <getADCValue>
 8000732:	4603      	mov	r3, r0
 8000734:	b29b      	uxth	r3, r3
 8000736:	2200      	movs	r2, #0
 8000738:	461c      	mov	r4, r3
 800073a:	4615      	mov	r5, r2
 800073c:	ea6f 0804 	mvn.w	r8, r4
 8000740:	ea6f 0905 	mvn.w	r9, r5
 8000744:	4b01      	ldr	r3, [pc, #4]	; (800074c <applicationMAIN+0x3c>)
 8000746:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
		BCM_MSG.Message11.SPN.BCM_MS1_Speed = (uint64_t)getADCValue();
 800074a:	e7e6      	b.n	800071a <applicationMAIN+0xa>
 800074c:	20000258 	.word	0x20000258

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f001 fd3c 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f80c 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 f94c 	bl	80009f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000760:	f000 f872 	bl	8000848 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000764:	f000 f8c2 	bl	80008ec <MX_SPI1_Init>
  MX_TIM1_Init();
 8000768:	f000 f8f6 	bl	8000958 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  applicationMAIN();
 800076c:	f7ff ffd0 	bl	8000710 <applicationMAIN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x20>
	...

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	; 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fa3a 	bl	8004bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <SystemClock_Config+0xcc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c0:	4a20      	ldr	r2, [pc, #128]	; (8000844 <SystemClock_Config+0xd0>)
 80007c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007ec:	2354      	movs	r3, #84	; 0x54
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f4:	2304      	movs	r3, #4
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fc05 	bl	800300c <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000808:	f000 f95c 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2102      	movs	r1, #2
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fe67 	bl	80034fc <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000834:	f000 f946 	bl	8000ac4 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0x98>)
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_ADC1_Init+0x9c>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_ADC1_Init+0x98>)
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <MX_ADC1_Init+0xa0>)
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008aa:	f001 fd03 	bl	80022b4 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b4:	f000 f906 	bl	8000ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008ca:	f001 feb7 	bl	800263c <HAL_ADC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 f8f6 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000168 	.word	0x20000168
 80008e4:	40012000 	.word	0x40012000
 80008e8:	0f000001 	.word	0x0f000001

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI1_Init+0x64>)
 800093e:	f002 ff89 	bl	8003854 <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f8bc 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001b0 	.word	0x200001b0
 8000954:	40013000 	.word	0x40013000

08000958 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_TIM1_Init+0x9c>)
 8000978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM1_Init+0x98>)
 800097c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000980:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_TIM1_Init+0x98>)
 800098a:	2209      	movs	r2, #9
 800098c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_TIM1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009a2:	f003 fd0d 	bl	80043c0 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f88a 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009be:	f003 fe56 	bl	800466e <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009c8:	f000 f87c 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_TIM1_Init+0x98>)
 80009da:	f004 f85b 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009e4:	f000 f86e 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000208 	.word	0x20000208
 80009f4:	40010000 	.word	0x40010000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xc0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2110      	movs	r1, #16
 8000a66:	4815      	ldr	r0, [pc, #84]	; (8000abc <MX_GPIO_Init+0xc4>)
 8000a68:	f002 fa9c 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a72:	f002 fa97 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a76:	2310      	movs	r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xc4>)
 8000a8e:	f002 f905 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 8000a92:	2304      	movs	r3, #4
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xc8>)
 8000aaa:	f002 f8f7 	bl	8002c9c <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_ADC_MspInit+0x7c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d127      	bne.n	8000b92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_ADC_MspInit+0x80>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_ADC_MspInit+0x84>)
 8000b8e:	f002 f885 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_SPI_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12b      	bne.n	8000c22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c02:	23e0      	movs	r3, #224	; 0xe0
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c12:	2305      	movs	r3, #5
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0x8c>)
 8000c1e:	f002 f83d 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_TIM_Base_MspInit+0x48>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d115      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_TIM_Base_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <HAL_TIM_Base_MspInit+0x4c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_TIM_Base_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f001 ffdf 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c70:	2019      	movs	r0, #25
 8000c72:	f001 fff8 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40023800 	.word	0x40023800

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f001 face 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 ff33 	bl	8004b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fd0d 	bl	8000750 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8000d48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d4c:	20000394 	.word	0x20000394

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>

08000d52 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b088      	sub	sp, #32
 8000d56:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000d74:	2300      	movs	r3, #0
 8000d76:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000db0:	2300      	movs	r3, #0
 8000db2:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000db4:	2300      	movs	r3, #0
 8000db6:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000dd8:	f001 f844 	bl	8001e64 <MCP2515_Initialize>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f083 0301 	eor.w	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <CANSPI_Initialize+0x9c>
    return -1;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	e060      	b.n	8000eb0 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000dee:	f001 f85b 	bl	8001ea8 <MCP2515_SetConfigMode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f083 0301 	eor.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <CANSPI_Initialize+0xb2>
    return -2;
 8000dfe:	f06f 0301 	mvn.w	r3, #1
 8000e02:	e055      	b.n	8000eb0 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	461a      	mov	r2, r3
 8000e08:	2123      	movs	r1, #35	; 0x23
 8000e0a:	2020      	movs	r0, #32
 8000e0c:	f001 f8f0 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000e10:	463b      	mov	r3, r7
 8000e12:	461a      	mov	r2, r3
 8000e14:	2127      	movs	r1, #39	; 0x27
 8000e16:	2024      	movs	r0, #36	; 0x24
 8000e18:	f001 f8ea 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	461a      	mov	r2, r3
 8000e22:	2103      	movs	r1, #3
 8000e24:	2000      	movs	r0, #0
 8000e26:	f001 f8e3 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2107      	movs	r1, #7
 8000e32:	2004      	movs	r0, #4
 8000e34:	f001 f8dc 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	210b      	movs	r1, #11
 8000e40:	2008      	movs	r0, #8
 8000e42:	f001 f8d5 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2113      	movs	r1, #19
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f001 f8ce 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2117      	movs	r1, #23
 8000e5c:	2014      	movs	r0, #20
 8000e5e:	f001 f8c7 	bl	8001ff0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	461a      	mov	r2, r3
 8000e68:	211b      	movs	r1, #27
 8000e6a:	2018      	movs	r0, #24
 8000e6c:	f001 f8c0 	bl	8001ff0 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000e70:	2104      	movs	r1, #4
 8000e72:	2060      	movs	r0, #96	; 0x60
 8000e74:	f001 f898 	bl	8001fa8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2070      	movs	r0, #112	; 0x70
 8000e7c:	f001 f894 	bl	8001fa8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000e80:	2100      	movs	r1, #0
 8000e82:	202a      	movs	r0, #42	; 0x2a
 8000e84:	f001 f890 	bl	8001fa8 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000e88:	21e5      	movs	r1, #229	; 0xe5
 8000e8a:	2029      	movs	r0, #41	; 0x29
 8000e8c:	f001 f88c 	bl	8001fa8 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000e90:	2183      	movs	r1, #131	; 0x83
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	f001 f888 	bl	8001fa8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000e98:	f001 f824 	bl	8001ee4 <MCP2515_SetNormalMode>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f083 0301 	eor.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <CANSPI_Initialize+0x15c>
    return -3;
 8000ea8:	f06f 0302 	mvn.w	r3, #2
 8000eac:	e000      	b.n	8000eb0 <CANSPI_Initialize+0x15e>

  return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000edc:	f001 f8f6 	bl	80020cc <MCP2515_ReadStatus>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <CANSPI_Transmit+0xf0>)
 8000ee6:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <CANSPI_Transmit+0xf0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d116      	bne.n	8000f24 <CANSPI_Transmit+0x6c>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	f000 f92b 	bl	800115e <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	795a      	ldrb	r2, [r3, #5]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3306      	adds	r3, #6
 8000f10:	4924      	ldr	r1, [pc, #144]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f12:	2040      	movs	r0, #64	; 0x40
 8000f14:	f001 f896 	bl	8002044 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000f18:	2081      	movs	r0, #129	; 0x81
 8000f1a:	f001 f8bd 	bl	8002098 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e03a      	b.n	8000f9a <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <CANSPI_Transmit+0xf0>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d116      	bne.n	8000f60 <CANSPI_Transmit+0xa8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f000 f90d 	bl	800115e <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	795a      	ldrb	r2, [r3, #5]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	4915      	ldr	r1, [pc, #84]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f4e:	2042      	movs	r0, #66	; 0x42
 8000f50:	f001 f878 	bl	8002044 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000f54:	2082      	movs	r0, #130	; 0x82
 8000f56:	f001 f89f 	bl	8002098 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e01c      	b.n	8000f9a <CANSPI_Transmit+0xe2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <CANSPI_Transmit+0xf0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d115      	bne.n	8000f9a <CANSPI_Transmit+0xe2>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 f8ef 	bl	800115e <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	795a      	ldrb	r2, [r3, #5]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3306      	adds	r3, #6
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <CANSPI_Transmit+0xec>)
 8000f8a:	2044      	movs	r0, #68	; 0x44
 8000f8c:	f001 f85a 	bl	8002044 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000f90:	2084      	movs	r0, #132	; 0x84
 8000f92:	f001 f881 	bl	8002098 <MCP2515_RequestToSend>

    returnValue = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000254 	.word	0x20000254
 8000fa8:	20000250 	.word	0x20000250

08000fac <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000fb8:	f001 f8a4 	bl	8002104 <MCP2515_GetRxStatus>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d068      	beq.n	800109e <CANSPI_Receive+0xf2>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	7b3b      	ldrb	r3, [r7, #12]
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8000fe8:	bf0c      	ite	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	2300      	movne	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	220d      	movs	r2, #13
 8000ffe:	4619      	mov	r1, r3
 8001000:	2090      	movs	r0, #144	; 0x90
 8001002:	f000 ffaf 	bl	8001f64 <MCP2515_ReadRxSequence>
 8001006:	e00c      	b.n	8001022 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001008:	7b3b      	ldrb	r3, [r7, #12]
 800100a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b80      	cmp	r3, #128	; 0x80
 8001012:	d106      	bne.n	8001022 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	220d      	movs	r2, #13
 800101a:	4619      	mov	r1, r3
 800101c:	2094      	movs	r0, #148	; 0x94
 800101e:	f000 ffa1 	bl	8001f64 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	f003 0318 	and.w	r3, r3, #24
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b10      	cmp	r3, #16
 800102c:	d10d      	bne.n	800104a <CANSPI_Receive+0x9e>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001034:	7cb8      	ldrb	r0, [r7, #18]
 8001036:	7cf9      	ldrb	r1, [r7, #19]
 8001038:	7c3a      	ldrb	r2, [r7, #16]
 800103a:	7c7b      	ldrb	r3, [r7, #17]
 800103c:	f000 f834 	bl	80010a8 <convertReg2ExtendedCANid>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8c3 2001 	str.w	r2, [r3, #1]
 8001048:	e00c      	b.n	8001064 <CANSPI_Receive+0xb8>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001050:	7c3b      	ldrb	r3, [r7, #16]
 8001052:	7c7a      	ldrb	r2, [r7, #17]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f864 	bl	8001124 <convertReg2StandardCANid>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8c3 2001 	str.w	r2, [r3, #1]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001064:	7d3a      	ldrb	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	715a      	strb	r2, [r3, #5]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800106a:	7d7a      	ldrb	r2, [r7, #21]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	719a      	strb	r2, [r3, #6]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001070:	7dba      	ldrb	r2, [r7, #22]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	71da      	strb	r2, [r3, #7]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8001076:	7dfa      	ldrb	r2, [r7, #23]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800107c:	7e3a      	ldrb	r2, [r7, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001082:	7e7a      	ldrb	r2, [r7, #25]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001088:	7eba      	ldrb	r2, [r7, #26]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800108e:	7efa      	ldrb	r2, [r7, #27]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001094:	7f3a      	ldrb	r2, [r7, #28]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	735a      	strb	r2, [r3, #13]

    returnValue = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800109e:	7ffb      	ldrb	r3, [r7, #31]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80010a8:	b490      	push	{r4, r7}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	4603      	mov	r3, r0
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	460b      	mov	r3, r1
 80010c0:	717b      	strb	r3, [r7, #5]
 80010c2:	4613      	mov	r3, r2
 80010c4:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80010ce:	793b      	ldrb	r3, [r7, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80010d6:	793b      	ldrb	r3, [r7, #4]
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80010dc:	797b      	ldrb	r3, [r7, #5]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4413      	add	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4413      	add	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4413      	add	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4413      	add	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001118:	697b      	ldr	r3, [r7, #20]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc90      	pop	{r4, r7}
 8001122:	4770      	bx	lr

08001124 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001150:	68fb      	ldr	r3, [r7, #12]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	460b      	mov	r3, r1
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d12e      	bne.n	80011d4 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f023 031f 	bic.w	r3, r3, #31
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	4413      	add	r3, r2
 80011b0:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	3308      	adds	r3, #8
 80011b6:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	f023 0314 	bic.w	r3, r3, #20
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80011d2:	e013      	b.n	80011fc <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	701a      	strb	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <EEM_INIT>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T EEM_INIT( EEM_Protocol_obj_st*  param )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	; 0x70
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	
	EEM_ERR_T result = EEM_EOK;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

/* Ring Buffer Init Sequance */

	param->ringBuffer.head = 0;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	param->ringBuffer.tail = 0;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	param->ringBuffer.full = EEM_FALSE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

#if defined(SPI2CAN_Protocol)

	EEM_U8 ret;

	ret = CANSPI_Initialize();
 800122e:	f7ff fd90 	bl	8000d52 <CANSPI_Initialize>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#endif

#endif

	/* Message Identifier Handler */
	EEM_CAN_ID_st ID[SIZE_OF_MSG] = {0};
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2264      	movs	r2, #100	; 0x64
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fcdb 	bl	8004bfc <memset>

	ID[0].Pages.priority 	= PRIORITY_010 ;
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	2202      	movs	r2, #2
 800124a:	f362 0384 	bfi	r3, r2, #2, #3
 800124e:	72fb      	strb	r3, [r7, #11]
	ID[0].Pages.reserved 	= NOT_RESERVED ;
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	f36f 0341 	bfc	r3, #1, #1
 8001256:	72fb      	strb	r3, [r7, #11]
	ID[0].Pages.dataPoint 	= DATAPAGE_0 ;
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	f36f 0300 	bfc	r3, #0, #1
 800125e:	72fb      	strb	r3, [r7, #11]
	ID[0].Pages.messageID 	= MESSAGE01 ;
 8001260:	2301      	movs	r3, #1
 8001262:	72bb      	strb	r3, [r7, #10]
	ID[0].Pages.DA 			= BCM_NODE;
 8001264:	2311      	movs	r3, #17
 8001266:	727b      	strb	r3, [r7, #9]
	ID[0].Pages.SA 			= HVAC_NODE ;
 8001268:	2322      	movs	r3, #34	; 0x22
 800126a:	723b      	strb	r3, [r7, #8]
	HVAC_MSG.Message01_ID = ID[0].identifier ;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4ae5      	ldr	r2, [pc, #916]	; (8001604 <EEM_INIT+0x3fc>)
 8001270:	6013      	str	r3, [r2, #0]

	ID[1].Pages.priority 	= PRIORITY_010 ;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2202      	movs	r2, #2
 8001276:	f362 0384 	bfi	r3, r2, #2, #3
 800127a:	73fb      	strb	r3, [r7, #15]
	ID[1].Pages.reserved 	= NOT_RESERVED ;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	f36f 0341 	bfc	r3, #1, #1
 8001282:	73fb      	strb	r3, [r7, #15]
	ID[1].Pages.dataPoint 	= DATAPAGE_0 ;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f36f 0300 	bfc	r3, #0, #1
 800128a:	73fb      	strb	r3, [r7, #15]
	ID[1].Pages.messageID 	= MESSAGE02 ;
 800128c:	2302      	movs	r3, #2
 800128e:	73bb      	strb	r3, [r7, #14]
	ID[1].Pages.DA 			= BCM_NODE;
 8001290:	2311      	movs	r3, #17
 8001292:	737b      	strb	r3, [r7, #13]
	ID[1].Pages.SA 			= HVAC_NODE ;
 8001294:	2322      	movs	r3, #34	; 0x22
 8001296:	733b      	strb	r3, [r7, #12]
	HVAC_MSG.Message02_ID = ID[1].identifier ;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4ada      	ldr	r2, [pc, #872]	; (8001604 <EEM_INIT+0x3fc>)
 800129c:	6113      	str	r3, [r2, #16]

	ID[2].Pages.priority 	= PRIORITY_100 ;
 800129e:	7cfb      	ldrb	r3, [r7, #19]
 80012a0:	2204      	movs	r2, #4
 80012a2:	f362 0384 	bfi	r3, r2, #2, #3
 80012a6:	74fb      	strb	r3, [r7, #19]
	ID[2].Pages.reserved 	= NOT_RESERVED ;
 80012a8:	7cfb      	ldrb	r3, [r7, #19]
 80012aa:	f36f 0341 	bfc	r3, #1, #1
 80012ae:	74fb      	strb	r3, [r7, #19]
	ID[2].Pages.dataPoint 	= DATAPAGE_0 ;
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	f36f 0300 	bfc	r3, #0, #1
 80012b6:	74fb      	strb	r3, [r7, #19]
	ID[2].Pages.messageID 	= MESSAGE03 ;
 80012b8:	2303      	movs	r3, #3
 80012ba:	74bb      	strb	r3, [r7, #18]
	ID[2].Pages.DA 			= TLM_NODE;
 80012bc:	2388      	movs	r3, #136	; 0x88
 80012be:	747b      	strb	r3, [r7, #17]
	ID[2].Pages.SA 			= BCM_NODE;
 80012c0:	2311      	movs	r3, #17
 80012c2:	743b      	strb	r3, [r7, #16]
	BCM_MSG.Message03_ID = ID[2].identifier ;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4ad0      	ldr	r2, [pc, #832]	; (8001608 <EEM_INIT+0x400>)
 80012c8:	6013      	str	r3, [r2, #0]

	ID[3].Pages.priority 	= PRIORITY_100 ;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	2204      	movs	r2, #4
 80012ce:	f362 0384 	bfi	r3, r2, #2, #3
 80012d2:	75fb      	strb	r3, [r7, #23]
	ID[3].Pages.reserved 	= NOT_RESERVED ;
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	f36f 0341 	bfc	r3, #1, #1
 80012da:	75fb      	strb	r3, [r7, #23]
	ID[3].Pages.dataPoint 	= DATAPAGE_0 ;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	f36f 0300 	bfc	r3, #0, #1
 80012e2:	75fb      	strb	r3, [r7, #23]
	ID[3].Pages.messageID 	= MESSAGE04 ;
 80012e4:	2304      	movs	r3, #4
 80012e6:	75bb      	strb	r3, [r7, #22]
	ID[3].Pages.DA 			= SCB_NODE;
 80012e8:	2333      	movs	r3, #51	; 0x33
 80012ea:	757b      	strb	r3, [r7, #21]
	ID[3].Pages.SA 			= BCM_NODE;
 80012ec:	2311      	movs	r3, #17
 80012ee:	753b      	strb	r3, [r7, #20]
	BCM_MSG.Message04_ID = ID[3].identifier ;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4ac5      	ldr	r2, [pc, #788]	; (8001608 <EEM_INIT+0x400>)
 80012f4:	60d3      	str	r3, [r2, #12]

	ID[4].Pages.priority 	= PRIORITY_100 ;
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	2204      	movs	r2, #4
 80012fa:	f362 0384 	bfi	r3, r2, #2, #3
 80012fe:	76fb      	strb	r3, [r7, #27]
	ID[4].Pages.reserved 	= NOT_RESERVED ;
 8001300:	7efb      	ldrb	r3, [r7, #27]
 8001302:	f36f 0341 	bfc	r3, #1, #1
 8001306:	76fb      	strb	r3, [r7, #27]
	ID[4].Pages.dataPoint 	= DATAPAGE_0 ;
 8001308:	7efb      	ldrb	r3, [r7, #27]
 800130a:	f36f 0300 	bfc	r3, #0, #1
 800130e:	76fb      	strb	r3, [r7, #27]
	ID[4].Pages.messageID 	= MESSAGE05 ;
 8001310:	2305      	movs	r3, #5
 8001312:	76bb      	strb	r3, [r7, #26]
	ID[4].Pages.DA 			= SCB_NODE;
 8001314:	2333      	movs	r3, #51	; 0x33
 8001316:	767b      	strb	r3, [r7, #25]
	ID[4].Pages.SA 			= BCM_NODE;
 8001318:	2311      	movs	r3, #17
 800131a:	763b      	strb	r3, [r7, #24]
	BCM_MSG.Message05_ID = ID[4].identifier ;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4aba      	ldr	r2, [pc, #744]	; (8001608 <EEM_INIT+0x400>)
 8001320:	61d3      	str	r3, [r2, #28]

	ID[5].Pages.priority 	= PRIORITY_100 ;
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	2204      	movs	r2, #4
 8001326:	f362 0384 	bfi	r3, r2, #2, #3
 800132a:	77fb      	strb	r3, [r7, #31]
	ID[5].Pages.reserved 	= NOT_RESERVED ;
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	f36f 0341 	bfc	r3, #1, #1
 8001332:	77fb      	strb	r3, [r7, #31]
	ID[5].Pages.dataPoint 	= DATAPAGE_0 ;
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	f36f 0300 	bfc	r3, #0, #1
 800133a:	77fb      	strb	r3, [r7, #31]
	ID[5].Pages.messageID 	= MESSAGE06 ;
 800133c:	2306      	movs	r3, #6
 800133e:	77bb      	strb	r3, [r7, #30]
	ID[5].Pages.DA 			= SCB_NODE;
 8001340:	2333      	movs	r3, #51	; 0x33
 8001342:	777b      	strb	r3, [r7, #29]
	ID[5].Pages.SA 			= BMS_NODE;
 8001344:	2344      	movs	r3, #68	; 0x44
 8001346:	773b      	strb	r3, [r7, #28]
	BMS_MSG.Message06_ID = ID[5].identifier ;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	4ab0      	ldr	r2, [pc, #704]	; (800160c <EEM_INIT+0x404>)
 800134c:	6013      	str	r3, [r2, #0]

	ID[6].Pages.priority 	= PRIORITY_100 ;
 800134e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001352:	2204      	movs	r2, #4
 8001354:	f362 0384 	bfi	r3, r2, #2, #3
 8001358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[6].Pages.reserved 	= NOT_RESERVED ;
 800135c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001360:	f36f 0341 	bfc	r3, #1, #1
 8001364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[6].Pages.dataPoint 	= DATAPAGE_0 ;
 8001368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800136c:	f36f 0300 	bfc	r3, #0, #1
 8001370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ID[6].Pages.messageID 	= MESSAGE07 ;
 8001374:	2307      	movs	r3, #7
 8001376:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	ID[6].Pages.DA 			= SCB_NODE;
 800137a:	2333      	movs	r3, #51	; 0x33
 800137c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	ID[6].Pages.SA 			= BMS_NODE;
 8001380:	2344      	movs	r3, #68	; 0x44
 8001382:	f887 3020 	strb.w	r3, [r7, #32]
	BMS_MSG.Message07_ID = ID[6].identifier ;
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	4aa0      	ldr	r2, [pc, #640]	; (800160c <EEM_INIT+0x404>)
 800138a:	60d3      	str	r3, [r2, #12]

	ID[7].Pages.priority 	= PRIORITY_100 ;
 800138c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001390:	2204      	movs	r2, #4
 8001392:	f362 0384 	bfi	r3, r2, #2, #3
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[7].Pages.reserved 	= NOT_RESERVED ;
 800139a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139e:	f36f 0341 	bfc	r3, #1, #1
 80013a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[7].Pages.dataPoint 	= DATAPAGE_0 ;
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013aa:	f36f 0300 	bfc	r3, #0, #1
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ID[7].Pages.messageID 	= MESSAGE08 ;
 80013b2:	2308      	movs	r3, #8
 80013b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ID[7].Pages.DA 			= SCB_NODE;
 80013b8:	2333      	movs	r3, #51	; 0x33
 80013ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	ID[7].Pages.SA 			= BMS_NODE;
 80013be:	2344      	movs	r3, #68	; 0x44
 80013c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	BMS_MSG.Message08_ID = ID[7].identifier ;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	4a91      	ldr	r2, [pc, #580]	; (800160c <EEM_INIT+0x404>)
 80013c8:	6193      	str	r3, [r2, #24]

	ID[8].Pages.priority 	= PRIORITY_100 ;
 80013ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013ce:	2204      	movs	r2, #4
 80013d0:	f362 0384 	bfi	r3, r2, #2, #3
 80013d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[8].Pages.reserved 	= NOT_RESERVED ;
 80013d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013dc:	f36f 0341 	bfc	r3, #1, #1
 80013e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[8].Pages.dataPoint 	= DATAPAGE_0 ;
 80013e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013e8:	f36f 0300 	bfc	r3, #0, #1
 80013ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ID[8].Pages.messageID 	= MESSAGE09 ;
 80013f0:	2309      	movs	r3, #9
 80013f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ID[8].Pages.DA 			= SCB_NODE;
 80013f6:	2333      	movs	r3, #51	; 0x33
 80013f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ID[8].Pages.SA 			= BMS_NODE;
 80013fc:	2344      	movs	r3, #68	; 0x44
 80013fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	BMS_MSG.Message09_ID = ID[8].identifier ;
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	4a81      	ldr	r2, [pc, #516]	; (800160c <EEM_INIT+0x404>)
 8001406:	6253      	str	r3, [r2, #36]	; 0x24

	ID[9].Pages.priority 	= PRIORITY_100 ;
 8001408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800140c:	2204      	movs	r2, #4
 800140e:	f362 0384 	bfi	r3, r2, #2, #3
 8001412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[9].Pages.reserved 	= NOT_RESERVED ;
 8001416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800141a:	f36f 0341 	bfc	r3, #1, #1
 800141e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[9].Pages.dataPoint 	= DATAPAGE_0 ;
 8001422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001426:	f36f 0300 	bfc	r3, #0, #1
 800142a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ID[9].Pages.messageID 	= MESSAGE10 ;
 800142e:	2310      	movs	r3, #16
 8001430:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	ID[9].Pages.DA 			= SCB_NODE;
 8001434:	2333      	movs	r3, #51	; 0x33
 8001436:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID[9].Pages.SA 			= BMS_NODE;
 800143a:	2344      	movs	r3, #68	; 0x44
 800143c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	BMS_MSG.Message10_ID = ID[9].identifier ;
 8001440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001442:	4a72      	ldr	r2, [pc, #456]	; (800160c <EEM_INIT+0x404>)
 8001444:	6313      	str	r3, [r2, #48]	; 0x30

	ID[10].Pages.priority 	= PRIORITY_001 ;
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144a:	2201      	movs	r2, #1
 800144c:	f362 0384 	bfi	r3, r2, #2, #3
 8001450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[10].Pages.reserved 	= NOT_RESERVED ;
 8001454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001458:	f36f 0341 	bfc	r3, #1, #1
 800145c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[10].Pages.dataPoint 	= DATAPAGE_0 ;
 8001460:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001464:	f36f 0300 	bfc	r3, #0, #1
 8001468:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ID[10].Pages.messageID 	= MESSAGE11 ;
 800146c:	2311      	movs	r3, #17
 800146e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	ID[10].Pages.DA 		= MS1_NODE;
 8001472:	2355      	movs	r3, #85	; 0x55
 8001474:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ID[10].Pages.SA 		= BCM_NODE ;
 8001478:	2311      	movs	r3, #17
 800147a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	BCM_MSG.Message11_ID = ID[10].identifier ;
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	4a61      	ldr	r2, [pc, #388]	; (8001608 <EEM_INIT+0x400>)
 8001482:	6293      	str	r3, [r2, #40]	; 0x28

	ID[11].Pages.priority 	= PRIORITY_001 ;
 8001484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001488:	2201      	movs	r2, #1
 800148a:	f362 0384 	bfi	r3, r2, #2, #3
 800148e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[11].Pages.reserved 	= NOT_RESERVED ;
 8001492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001496:	f36f 0341 	bfc	r3, #1, #1
 800149a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[11].Pages.dataPoint 	= DATAPAGE_0 ;
 800149e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a2:	f36f 0300 	bfc	r3, #0, #1
 80014a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ID[11].Pages.messageID 	= MESSAGE12 ;
 80014aa:	2312      	movs	r3, #18
 80014ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	ID[11].Pages.DA 		= MS2_NODE;
 80014b0:	2366      	movs	r3, #102	; 0x66
 80014b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ID[11].Pages.SA 		= BCM_NODE ;
 80014b6:	2311      	movs	r3, #17
 80014b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	BCM_MSG.Message12_ID = ID[11].identifier ;
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <EEM_INIT+0x400>)
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38

	ID[12].Pages.priority 	= PRIORITY_001 ;
 80014c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014c6:	2201      	movs	r2, #1
 80014c8:	f362 0384 	bfi	r3, r2, #2, #3
 80014cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[12].Pages.reserved 	= NOT_RESERVED ;
 80014d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014d4:	f36f 0341 	bfc	r3, #1, #1
 80014d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[12].Pages.dataPoint 	= DATAPAGE_0 ;
 80014dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014e0:	f36f 0300 	bfc	r3, #0, #1
 80014e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ID[12].Pages.messageID 	= MESSAGE13 ;
 80014e8:	2313      	movs	r3, #19
 80014ea:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ID[12].Pages.DA 		= BCM_NODE ;
 80014ee:	2311      	movs	r3, #17
 80014f0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	ID[12].Pages.SA 		= MS1_NODE ;
 80014f4:	2355      	movs	r3, #85	; 0x55
 80014f6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	MS1_MSG.Message13_ID = ID[12].identifier ;
 80014fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fc:	4a44      	ldr	r2, [pc, #272]	; (8001610 <EEM_INIT+0x408>)
 80014fe:	6013      	str	r3, [r2, #0]

	ID[13].Pages.priority 	= PRIORITY_001 ;
 8001500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001504:	2201      	movs	r2, #1
 8001506:	f362 0384 	bfi	r3, r2, #2, #3
 800150a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[13].Pages.reserved 	= NOT_RESERVED ;
 800150e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001512:	f36f 0341 	bfc	r3, #1, #1
 8001516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[13].Pages.dataPoint 	= DATAPAGE_0 ;
 800151a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800151e:	f36f 0300 	bfc	r3, #0, #1
 8001522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	ID[13].Pages.messageID 	= MESSAGE14 ;
 8001526:	2314      	movs	r3, #20
 8001528:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ID[13].Pages.DA 		= BCM_NODE ;
 800152c:	2311      	movs	r3, #17
 800152e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	ID[13].Pages.SA 		= MS1_NODE ;
 8001532:	2355      	movs	r3, #85	; 0x55
 8001534:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MS1_MSG.Message14_ID = ID[13].identifier ;
 8001538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800153a:	4a35      	ldr	r2, [pc, #212]	; (8001610 <EEM_INIT+0x408>)
 800153c:	60d3      	str	r3, [r2, #12]

	ID[14].Pages.priority 	= PRIORITY_001 ;
 800153e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001542:	2201      	movs	r2, #1
 8001544:	f362 0384 	bfi	r3, r2, #2, #3
 8001548:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[14].Pages.reserved 	= NOT_RESERVED ;
 800154c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001550:	f36f 0341 	bfc	r3, #1, #1
 8001554:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[14].Pages.dataPoint 	= DATAPAGE_0 ;
 8001558:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800155c:	f36f 0300 	bfc	r3, #0, #1
 8001560:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	ID[14].Pages.messageID 	= MESSAGE15 ;
 8001564:	2315      	movs	r3, #21
 8001566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	ID[14].Pages.DA 		= BCM_NODE ;
 800156a:	2311      	movs	r3, #17
 800156c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	ID[14].Pages.SA 		= MS1_NODE ;
 8001570:	2355      	movs	r3, #85	; 0x55
 8001572:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	MS1_MSG.Message15_ID = ID[14].identifier ;
 8001576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <EEM_INIT+0x408>)
 800157a:	6193      	str	r3, [r2, #24]

    ID[15].Pages.priority 	= PRIORITY_001 ;
 800157c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001580:	2201      	movs	r2, #1
 8001582:	f362 0384 	bfi	r3, r2, #2, #3
 8001586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[15].Pages.reserved 	= NOT_RESERVED ;
 800158a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800158e:	f36f 0341 	bfc	r3, #1, #1
 8001592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[15].Pages.dataPoint 	= DATAPAGE_0 ;
 8001596:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800159a:	f36f 0300 	bfc	r3, #0, #1
 800159e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    ID[15].Pages.messageID 	= MESSAGE16 ;
 80015a2:	2316      	movs	r3, #22
 80015a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    ID[15].Pages.DA 		= BCM_NODE ;
 80015a8:	2311      	movs	r3, #17
 80015aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    ID[15].Pages.SA 		= MS2_NODE ;
 80015ae:	2366      	movs	r3, #102	; 0x66
 80015b0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    MS2_MSG.Message16_ID = ID[15].identifier ;
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <EEM_INIT+0x40c>)
 80015b8:	6013      	str	r3, [r2, #0]

	ID[16].Pages.priority 	= PRIORITY_001 ;
 80015ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015be:	2201      	movs	r2, #1
 80015c0:	f362 0384 	bfi	r3, r2, #2, #3
 80015c4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[16].Pages.reserved 	= NOT_RESERVED ;
 80015c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015cc:	f36f 0341 	bfc	r3, #1, #1
 80015d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[16].Pages.dataPoint 	= DATAPAGE_0 ;
 80015d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015d8:	f36f 0300 	bfc	r3, #0, #1
 80015dc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ID[16].Pages.messageID 	= MESSAGE17 ;
 80015e0:	2317      	movs	r3, #23
 80015e2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	ID[16].Pages.DA 		= BCM_NODE ;
 80015e6:	2311      	movs	r3, #17
 80015e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	ID[16].Pages.SA 		= MS2_NODE ;
 80015ec:	2366      	movs	r3, #102	; 0x66
 80015ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	MS2_MSG.Message17_ID = ID[16].identifier ;
 80015f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <EEM_INIT+0x40c>)
 80015f6:	60d3      	str	r3, [r2, #12]

	ID[17].Pages.priority 	= PRIORITY_001 ;
 80015f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015fc:	2201      	movs	r2, #1
 80015fe:	f362 0384 	bfi	r3, r2, #2, #3
 8001602:	e009      	b.n	8001618 <EEM_INIT+0x410>
 8001604:	200002c0 	.word	0x200002c0
 8001608:	20000258 	.word	0x20000258
 800160c:	200002ec 	.word	0x200002ec
 8001610:	20000328 	.word	0x20000328
 8001614:	20000350 	.word	0x20000350
 8001618:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[17].Pages.reserved 	= NOT_RESERVED ;
 800161c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001620:	f36f 0341 	bfc	r3, #1, #1
 8001624:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[17].Pages.dataPoint 	= DATAPAGE_0 ;
 8001628:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800162c:	f36f 0300 	bfc	r3, #0, #1
 8001630:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	ID[17].Pages.messageID 	= MESSAGE18 ;
 8001634:	2318      	movs	r3, #24
 8001636:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ID[17].Pages.DA 		= BCM_NODE ;
 800163a:	2311      	movs	r3, #17
 800163c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	ID[17].Pages.SA 		= MS2_NODE ;
 8001640:	2366      	movs	r3, #102	; 0x66
 8001642:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	MS2_MSG.Message18_ID = ID[17].identifier ;
 8001646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <EEM_INIT+0x594>)
 800164a:	6193      	str	r3, [r2, #24]

	ID[18].Pages.priority 	= PRIORITY_001 ;
 800164c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001650:	2201      	movs	r2, #1
 8001652:	f362 0384 	bfi	r3, r2, #2, #3
 8001656:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[18].Pages.reserved 	= NOT_RESERVED ;
 800165a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800165e:	f36f 0341 	bfc	r3, #1, #1
 8001662:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[18].Pages.dataPoint 	= DATAPAGE_0 ;
 8001666:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800166a:	f36f 0300 	bfc	r3, #0, #1
 800166e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ID[18].Pages.messageID 	= MESSAGE19 ;
 8001672:	2319      	movs	r3, #25
 8001674:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	ID[18].Pages.DA 		= BCM_NODE ;
 8001678:	2311      	movs	r3, #17
 800167a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	ID[18].Pages.SA 		= MS1_NODE ;
 800167e:	2355      	movs	r3, #85	; 0x55
 8001680:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	BCM_MSG.Message19_ID = ID[18].identifier ;
 8001684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001686:	4a46      	ldr	r2, [pc, #280]	; (80017a0 <EEM_INIT+0x598>)
 8001688:	6493      	str	r3, [r2, #72]	; 0x48

	ID[19].Pages.priority 	= PRIORITY_001 ;
 800168a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800168e:	2201      	movs	r2, #1
 8001690:	f362 0384 	bfi	r3, r2, #2, #3
 8001694:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[19].Pages.reserved 	= NOT_RESERVED ;
 8001698:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800169c:	f36f 0341 	bfc	r3, #1, #1
 80016a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[19].Pages.dataPoint 	= DATAPAGE_0 ;
 80016a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016a8:	f36f 0300 	bfc	r3, #0, #1
 80016ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	ID[19].Pages.messageID 	= MESSAGE20 ;
 80016b0:	2320      	movs	r3, #32
 80016b2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	ID[19].Pages.DA 		= BCM_NODE ;
 80016b6:	2311      	movs	r3, #17
 80016b8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	ID[19].Pages.SA 		= MS2_NODE ;
 80016bc:	2366      	movs	r3, #102	; 0x66
 80016be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	BCM_MSG.Message20_ID = ID[19].identifier ;
 80016c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c4:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <EEM_INIT+0x598>)
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58

	ID[20].Pages.priority 	= PRIORITY_011 ;
 80016c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016cc:	2203      	movs	r2, #3
 80016ce:	f362 0384 	bfi	r3, r2, #2, #3
 80016d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[20].Pages.reserved 	= NOT_RESERVED ;
 80016d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016da:	f36f 0341 	bfc	r3, #1, #1
 80016de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[20].Pages.dataPoint 	= DATAPAGE_0 ;
 80016e2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016e6:	f36f 0300 	bfc	r3, #0, #1
 80016ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	ID[20].Pages.messageID 	= MESSAGE21 ;
 80016ee:	2321      	movs	r3, #33	; 0x21
 80016f0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	ID[20].Pages.DA 		= BCM_NODE;
 80016f4:	2311      	movs	r3, #17
 80016f6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	ID[20].Pages.SA 		= SCB_NODE;
 80016fa:	2333      	movs	r3, #51	; 0x33
 80016fc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	SCB_MSG.Message21_ID = ID[20].identifier ;
 8001700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <EEM_INIT+0x59c>)
 8001704:	6013      	str	r3, [r2, #0]

	ID[21].Pages.priority 	= PRIORITY_111 ;
 8001706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800170a:	f043 031c 	orr.w	r3, r3, #28
 800170e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[21].Pages.reserved 	= NOT_RESERVED ;
 8001712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001716:	f36f 0341 	bfc	r3, #1, #1
 800171a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[21].Pages.dataPoint 	= DATAPAGE_0 ;
 800171e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001722:	f36f 0300 	bfc	r3, #0, #1
 8001726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	ID[21].Pages.messageID 	= MESSAGE22 ;
 800172a:	2322      	movs	r3, #34	; 0x22
 800172c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	ID[21].Pages.DA 		= BCM_NODE;
 8001730:	2311      	movs	r3, #17
 8001732:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	ID[21].Pages.SA 		= TLM_NODE;
 8001736:	2388      	movs	r3, #136	; 0x88
 8001738:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	TLM_MSG.Message22_ID = 	ID[21].identifier ;
 800173c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173e:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <EEM_INIT+0x5a0>)
 8001740:	6013      	str	r3, [r2, #0]

	ID[22].Pages.priority 	= PRIORITY_111 ;
 8001742:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001746:	f043 031c 	orr.w	r3, r3, #28
 800174a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[22].Pages.reserved 	= NOT_RESERVED ;
 800174e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001752:	f36f 0341 	bfc	r3, #1, #1
 8001756:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[22].Pages.dataPoint 	= DATAPAGE_0 ;
 800175a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800175e:	f36f 0300 	bfc	r3, #0, #1
 8001762:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	ID[22].Pages.messageID 	= MESSAGE23 ;
 8001766:	2323      	movs	r3, #35	; 0x23
 8001768:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	ID[22].Pages.DA 		= BCM_NODE;
 800176c:	2311      	movs	r3, #17
 800176e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	ID[22].Pages.SA 		= TLM_NODE;
 8001772:	2388      	movs	r3, #136	; 0x88
 8001774:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	TLM_MSG.Message23_ID = 	ID[22].identifier ;
 8001778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <EEM_INIT+0x5a0>)
 800177c:	60d3      	str	r3, [r2, #12]


#if defined( BCM_MODULE )
	if( EEM_FILTER_BCM( param ) != EEM_EOK ) return EEM_ERROR;
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fb63 	bl	8001e4a <EEM_FILTER_BCM>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <EEM_INIT+0x586>
 800178a:	2300      	movs	r3, #0
 800178c:	e001      	b.n	8001792 <EEM_INIT+0x58a>

#endif

#endif

	return result;
 800178e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001792:	4618      	mov	r0, r3
 8001794:	3770      	adds	r7, #112	; 0x70
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000350 	.word	0x20000350
 80017a0:	20000258 	.word	0x20000258
 80017a4:	200002e0 	.word	0x200002e0
 80017a8:	20000378 	.word	0x20000378

080017ac <EEM_PUSH>:
	 @return  : 
	 @date	  : 
	 @INFO	  :
********************************************************************************/
void   EEM_PUSH( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 80017ac:	b490      	push	{r4, r7}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e011      	b.n	80017e4 <EEM_PUSH+0x38>
	{
		ringBuf->data[ ringBuf->tail ][ loopVal ] = param->DATA[ loopVal ];
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80017c8:	461c      	mov	r4, r3
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	440a      	add	r2, r1
 80017d0:	7910      	ldrb	r0, [r2, #4]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	00e2      	lsls	r2, r4, #3
 80017d6:	440a      	add	r2, r1
 80017d8:	4413      	add	r3, r2
 80017da:	4602      	mov	r2, r0
 80017dc:	701a      	strb	r2, [r3, #0]
	for(loopVal = 0 ; loopVal < 8 ; loopVal++)
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	3301      	adds	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b07      	cmp	r3, #7
 80017e8:	d9ea      	bls.n	80017c0 <EEM_PUSH+0x14>
	}
	ringBuf->id[ ringBuf->tail ].identifier = param->EXTENDED_ID.identifier;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3228      	adds	r2, #40	; 0x28
 80017fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ringBuf->byte_count++;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	ringBuf->tail = ( ringBuf->tail + 1 ) % EEM_BUFFER_SIZE ;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <EEM_PUSH+0xa8>)
 8001816:	fb83 1302 	smull	r1, r3, r3, r2
 800181a:	10d9      	asrs	r1, r3, #3
 800181c:	17d3      	asrs	r3, r2, #31
 800181e:	1ac9      	subs	r1, r1, r3
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	1ad1      	subs	r1, r2, r3
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
	
	if( ringBuf->tail == ringBuf->head )
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800183e:	429a      	cmp	r2, r3
 8001840:	d103      	bne.n	800184a <EEM_PUSH+0x9e>
	{
		ringBuf->full = EEM_TRUE ;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bc90      	pop	{r4, r7}
 8001852:	4770      	bx	lr
 8001854:	66666667 	.word	0x66666667

08001858 <EEM_POP>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void	EEM_POP( EEM_RING_Buffer_st* ringBuf , EEM_CAN_Packet_st* param)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	EEM_U8 loopVal = 0 ;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]

	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e011      	b.n	8001890 <EEM_POP+0x38>
	{
		param->DATA[ loopVal ] = ringBuf->data[ ringBuf->head ][ loopVal ];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001872:	4619      	mov	r1, r3
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	00c9      	lsls	r1, r1, #3
 800187c:	4401      	add	r1, r0
 800187e:	440a      	add	r2, r1
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4413      	add	r3, r2
 8001886:	460a      	mov	r2, r1
 8001888:	711a      	strb	r2, [r3, #4]
	for(loopVal = 0 ; loopVal <= 8 ; loopVal++)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3301      	adds	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b08      	cmp	r3, #8
 8001894:	d9ea      	bls.n	800186c <EEM_POP+0x14>
	}
	param->EXTENDED_ID.identifier = ringBuf->id[ ringBuf->head ].identifier;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3228      	adds	r2, #40	; 0x28
 80018a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
	ringBuf->byte_count++;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	
	ringBuf->head = (ringBuf->head + 1) % EEM_BUFFER_SIZE ;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <EEM_POP+0x9c>)
 80018c2:	fb83 1302 	smull	r1, r3, r3, r2
 80018c6:	10d9      	asrs	r1, r3, #3
 80018c8:	17d3      	asrs	r3, r2, #31
 80018ca:	1ac9      	subs	r1, r1, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	1ad1      	subs	r1, r2, r3
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	ringBuf->full = EEM_FALSE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6


}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	66666667 	.word	0x66666667

080018f8 <EEM_TX>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 		EEM_TX( EEM_CAN_Packet_st* param, EEM_U32 period )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	EEM_ERR_T result = EEM_EOK;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	uCAN_MSG txPacked;
	txPacked.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B ;
 8001906:	2302      	movs	r3, #2
 8001908:	723b      	strb	r3, [r7, #8]
	txPacked.frame.dlc	  = EEM_MAX_SIZE;
 800190a:	2308      	movs	r3, #8
 800190c:	737b      	strb	r3, [r7, #13]
	txPacked.frame.id	  = param->EXTENDED_ID.identifier;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8c7 3009 	str.w	r3, [r7, #9]

	memcpy(&txPacked.frame.data0 , &param->DATA[0] , EEM_MAX_SIZE );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1d19      	adds	r1, r3, #4
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	3306      	adds	r3, #6
 8001920:	2208      	movs	r2, #8
 8001922:	4618      	mov	r0, r3
 8001924:	f003 f95c 	bl	8004be0 <memcpy>

	CANSPI_Transmit(&txPacked);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fac3 	bl	8000eb8 <CANSPI_Transmit>
	
	



	return result;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <EEM_RX>:
#if defined(SPI2CAN_Protocol)
						uCAN_MSG*			rxPacked      ,
#endif
#endif
						EEM_U8*				rxData	  	   )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001948:	2301      	movs	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
#else

#if defined(SPI2CAN_Protocol)

	//@That library used polling method
	if( CANSPI_Receive(rxPacked) )
 800194c:	68b8      	ldr	r0, [r7, #8]
 800194e:	f7ff fb2d 	bl	8000fac <CANSPI_Receive>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d012      	beq.n	800197e <EEM_RX+0x42>
	{
		memcpy(&param->DATA[0] , &rxPacked->frame.data0 , EEM_MAX_SIZE  );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1d18      	adds	r0, r3, #4
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3306      	adds	r3, #6
 8001960:	2208      	movs	r2, #8
 8001962:	4619      	mov	r1, r3
 8001964:	f003 f93c 	bl	8004be0 <memcpy>
		param->EXTENDED_ID.identifier = rxPacked->frame.id ;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
#endif

#endif

	/* Received Data Handled Push Ring Buffer */
	EEM_PUSH( &protocol.obj.ringBuffer , param);
 8001972:	68f9      	ldr	r1, [r7, #12]
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <EEM_RX+0x4c>)
 8001976:	f7ff ff19 	bl	80017ac <EEM_PUSH>

	return result;
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	e000      	b.n	8001980 <EEM_RX+0x44>
		return EEM_ERROR;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000060 	.word	0x20000060

0800198c <EEM_PERIODIC>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
EEM_ERR_T 	EEM_PERIODIC( EEM_CAN_Packet_st*  param )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	EEM_ERR_T 	   result 	= EEM_EOK;
 8001994:	2301      	movs	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]

#if (defined(STM32F446xx) || defined(STM32F407xx) && defined(BXCAN_Protocol)) || (defined(STM32H750xx) && defined(FDCAN_Protocol))
	//bxCAN ve FDCAN IRQ Handler'da recv yapmaktadir.
#else

	uCAN_MSG rxHandle = {0};
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	819a      	strh	r2, [r3, #12]

	result = EEM_RX(param, &rxHandle, NULL);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffc4 	bl	800193c <EEM_RX>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
	if( result != EEM_EOK ) return result;
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <EEM_PERIODIC+0x3e>
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	e221      	b.n	8001e06 <EEM_PERIODIC+0x47a>

#endif

	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
	{
	   EEM_POP(&protocol.obj.ringBuffer, param);
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	48a1      	ldr	r0, [pc, #644]	; (8001c4c <EEM_PERIODIC+0x2c0>)
 80019c6:	f7ff ff47 	bl	8001858 <EEM_POP>
	while( !EEM_IS_EMPTY(&protocol.obj.ringBuffer) )
 80019ca:	48a0      	ldr	r0, [pc, #640]	; (8001c4c <EEM_PERIODIC+0x2c0>)
 80019cc:	f000 fa22 	bl	8001e14 <EEM_IS_EMPTY>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f5      	beq.n	80019c2 <EEM_PERIODIC+0x36>
		                                              param->DATA[0] );
#endif
	}

	
	switch( param->EXTENDED_ID.Pages.messageID )
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	3b01      	subs	r3, #1
 80019dc:	2b23      	cmp	r3, #35	; 0x23
 80019de:	f200 8211 	bhi.w	8001e04 <EEM_PERIODIC+0x478>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <EEM_PERIODIC+0x5c>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001a79 	.word	0x08001a79
 80019ec:	08001c55 	.word	0x08001c55
 80019f0:	08001e05 	.word	0x08001e05
 80019f4:	08001e05 	.word	0x08001e05
 80019f8:	08001e05 	.word	0x08001e05
 80019fc:	08001e05 	.word	0x08001e05
 8001a00:	08001e05 	.word	0x08001e05
 8001a04:	08001e05 	.word	0x08001e05
 8001a08:	08001e05 	.word	0x08001e05
 8001a0c:	08001e05 	.word	0x08001e05
 8001a10:	08001e05 	.word	0x08001e05
 8001a14:	08001e05 	.word	0x08001e05
 8001a18:	08001e05 	.word	0x08001e05
 8001a1c:	08001e05 	.word	0x08001e05
 8001a20:	08001e05 	.word	0x08001e05
 8001a24:	08001e05 	.word	0x08001e05
 8001a28:	08001e05 	.word	0x08001e05
 8001a2c:	08001e05 	.word	0x08001e05
 8001a30:	08001e05 	.word	0x08001e05
 8001a34:	08001e05 	.word	0x08001e05
 8001a38:	08001e05 	.word	0x08001e05
 8001a3c:	08001e05 	.word	0x08001e05
 8001a40:	08001e05 	.word	0x08001e05
 8001a44:	08001e05 	.word	0x08001e05
 8001a48:	08001e05 	.word	0x08001e05
 8001a4c:	08001e05 	.word	0x08001e05
 8001a50:	08001e05 	.word	0x08001e05
 8001a54:	08001e05 	.word	0x08001e05
 8001a58:	08001e05 	.word	0x08001e05
 8001a5c:	08001e05 	.word	0x08001e05
 8001a60:	08001e05 	.word	0x08001e05
 8001a64:	08001e05 	.word	0x08001e05
 8001a68:	08001e05 	.word	0x08001e05
 8001a6c:	08001e05 	.word	0x08001e05
 8001a70:	08001e05 	.word	0x08001e05
 8001a74:	08001e05 	.word	0x08001e05
	{
//#if defined(BCM_MODULE)

	case MESSAGE01 :

		HVAC_MSG.Message01.SPN.HVAC_led01_u1 = ( param->DATA[0] & 0x01 );
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	791b      	ldrb	r3, [r3, #4]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2d9      	uxtb	r1, r3
 8001a82:	4a73      	ldr	r2, [pc, #460]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001a84:	7913      	ldrb	r3, [r2, #4]
 8001a86:	f361 0300 	bfi	r3, r1, #0, #1
 8001a8a:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led02_u1 = (( param->DATA[0] & 0x02 ) >> 1 );
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	105b      	asrs	r3, r3, #1
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	b2d9      	uxtb	r1, r3
 8001a98:	4a6d      	ldr	r2, [pc, #436]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001a9a:	7913      	ldrb	r3, [r2, #4]
 8001a9c:	f361 0341 	bfi	r3, r1, #1, #1
 8001aa0:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led03_u1 = (( param->DATA[0] & 0x04 ) >> 2 );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	791b      	ldrb	r3, [r3, #4]
 8001aa6:	109b      	asrs	r3, r3, #2
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001ab0:	7913      	ldrb	r3, [r2, #4]
 8001ab2:	f361 0382 	bfi	r3, r1, #2, #1
 8001ab6:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led04_u1 = (( param->DATA[0] & 0x08 ) >> 3 );
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	10db      	asrs	r3, r3, #3
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	b2d9      	uxtb	r1, r3
 8001ac4:	4a62      	ldr	r2, [pc, #392]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001ac6:	7913      	ldrb	r3, [r2, #4]
 8001ac8:	f361 03c3 	bfi	r3, r1, #3, #1
 8001acc:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led05_u1 = (( param->DATA[0] & 0x10 ) >> 4 );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	111b      	asrs	r3, r3, #4
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	b2d9      	uxtb	r1, r3
 8001ada:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001adc:	7913      	ldrb	r3, [r2, #4]
 8001ade:	f361 1304 	bfi	r3, r1, #4, #1
 8001ae2:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led06_u1 = (( param->DATA[0] & 0x20 ) >> 5 );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	115b      	asrs	r3, r3, #5
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	b2d9      	uxtb	r1, r3
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001af2:	7913      	ldrb	r3, [r2, #4]
 8001af4:	f361 1345 	bfi	r3, r1, #5, #1
 8001af8:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led07_u1 = (( param->DATA[0] & 0x40 ) >> 6 );
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	119b      	asrs	r3, r3, #6
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b08:	7913      	ldrb	r3, [r2, #4]
 8001b0a:	f361 1386 	bfi	r3, r1, #6, #1
 8001b0e:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led08_u1 = (( param->DATA[0] & 0x80 ) >> 7 );
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791b      	ldrb	r3, [r3, #4]
 8001b14:	09db      	lsrs	r3, r3, #7
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	4a4c      	ldr	r2, [pc, #304]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b20:	7913      	ldrb	r3, [r2, #4]
 8001b22:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b26:	7113      	strb	r3, [r2, #4]
		HVAC_MSG.Message01.SPN.HVAC_led09_u1 = ( param->DATA[1] & 0x01 );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	795b      	ldrb	r3, [r3, #5]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b34:	7953      	ldrb	r3, [r2, #5]
 8001b36:	f361 0300 	bfi	r3, r1, #0, #1
 8001b3a:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led10_u1 = (( param->DATA[1] & 0x02 ) >> 1 );
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	795b      	ldrb	r3, [r3, #5]
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	b2d9      	uxtb	r1, r3
 8001b48:	4a41      	ldr	r2, [pc, #260]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b4a:	7953      	ldrb	r3, [r2, #5]
 8001b4c:	f361 0341 	bfi	r3, r1, #1, #1
 8001b50:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led11_u1 = (( param->DATA[1] & 0x04 ) >> 2 );
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	109b      	asrs	r3, r3, #2
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	b2d9      	uxtb	r1, r3
 8001b5e:	4a3c      	ldr	r2, [pc, #240]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b60:	7953      	ldrb	r3, [r2, #5]
 8001b62:	f361 0382 	bfi	r3, r1, #2, #1
 8001b66:	7153      	strb	r3, [r2, #5]
		HVAC_MSG.Message01.SPN.HVAC_led12_u1 = (( param->DATA[1] & 0x08 ) >> 3 );
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	795b      	ldrb	r3, [r3, #5]
 8001b6c:	10db      	asrs	r3, r3, #3
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b76:	7953      	ldrb	r3, [r2, #5]
 8001b78:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b7c:	7153      	strb	r3, [r2, #5]

		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	795b      	ldrb	r3, [r3, #5]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	b2da      	uxtb	r2, r3
												   	    				(EEM_U8)( (param->DATA[2] & 0x0F) << 4 )  );
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_pressureVal_u8 			= (EEM_U8)( (EEM_U8)( (param->DATA[1] & 0xF0) >> 4 )  |
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001b94:	719a      	strb	r2, [r3, #6]

		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	799b      	ldrb	r3, [r3, #6]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	b2da      	uxtb	r2, r3
													 					(EEM_U8)( (param->DATA[3] & 0x0F) << 4 ) );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	79db      	ldrb	r3, [r3, #7]
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorTempVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[2] & 0xF0) >> 4 ) |
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001bac:	71da      	strb	r2, [r3, #7]

		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	79db      	ldrb	r3, [r3, #7]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	b2da      	uxtb	r2, r3
				 	 	 	 	 	 	 	 	 	 	  				(EEM_U8)( (param->DATA[4] & 0x0F) << 4 ) );
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7a1b      	ldrb	r3, [r3, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	b2db      	uxtb	r3, r3
		HVAC_MSG.Message01.SPN.HVAC_indoorHumidVal_u8 		= (EEM_U8)( (EEM_U8)( (param->DATA[3] & 0xF0) >> 4 ) |
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001bc4:	721a      	strb	r2, [r3, #8]

		HVAC_MSG.Message01.SPN.HVAC_rtcCalib_u1 			= (EEM_U8)( ( param->DATA[4] & 0x10) >> 4 );
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7a1b      	ldrb	r3, [r3, #8]
 8001bca:	111b      	asrs	r3, r3, #4
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	b2d9      	uxtb	r1, r3
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001bd4:	7a53      	ldrb	r3, [r2, #9]
 8001bd6:	f361 0300 	bfi	r3, r1, #0, #1
 8001bda:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewSecond_u8 		= (EEM_U8)( ( param->DATA[4] & 0x20) >> 5 );
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7a1b      	ldrb	r3, [r3, #8]
 8001be0:	115b      	asrs	r3, r3, #5
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	b2d9      	uxtb	r1, r3
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001bea:	7a53      	ldrb	r3, [r2, #9]
 8001bec:	f361 0341 	bfi	r3, r1, #1, #1
 8001bf0:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMinutes_u8 		= (EEM_U8)( ( param->DATA[4] & 0x40) >> 6 );
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	119b      	asrs	r3, r3, #6
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001c00:	7a53      	ldrb	r3, [r2, #9]
 8001c02:	f361 0382 	bfi	r3, r1, #2, #1
 8001c06:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewHour_u8 			= (EEM_U8)( ( param->DATA[4] & 0x80) >> 7 );
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7a1b      	ldrb	r3, [r3, #8]
 8001c0c:	09db      	lsrs	r3, r3, #7
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001c18:	7a53      	ldrb	r3, [r2, #9]
 8001c1a:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c1e:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewDay_u8 			= (EEM_U8)(   param->DATA[5] & 0x01 );
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7a5b      	ldrb	r3, [r3, #9]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	b2d9      	uxtb	r1, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001c2c:	7a53      	ldrb	r3, [r2, #9]
 8001c2e:	f361 1304 	bfi	r3, r1, #4, #1
 8001c32:	7253      	strb	r3, [r2, #9]
		HVAC_MSG.Message01.SPN.HVAC_rtcNewMonth_u8 			= (EEM_U8)( ( param->DATA[5] & 0x02 ) >> 1 );
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	105b      	asrs	r3, r3, #1
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	b2d9      	uxtb	r1, r3
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <EEM_PERIODIC+0x2c4>)
 8001c42:	7a53      	ldrb	r3, [r2, #9]
 8001c44:	f361 1345 	bfi	r3, r1, #5, #1
 8001c48:	7253      	strb	r3, [r2, #9]


	break;
 8001c4a:	e0db      	b.n	8001e04 <EEM_PERIODIC+0x478>
 8001c4c:	20000060 	.word	0x20000060
 8001c50:	200002c0 	.word	0x200002c0

	case MESSAGE02 :

		HVAC_MSG.Message02.SPN.HVAC_tempVal_u8 			 = param->DATA[0] ;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791a      	ldrb	r2, [r3, #4]
 8001c58:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001c5a:	751a      	strb	r2, [r3, #20]
		HVAC_MSG.Message02.SPN.HVAC_humidityVal_u8 		 = param->DATA[1];
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	795a      	ldrb	r2, [r3, #5]
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001c62:	755a      	strb	r2, [r3, #21]
		HVAC_MSG.Message02.SPN.HVAC_smokeVal_u4 		 = (EEM_U8)( param->DATA[2] & 0x0F );
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	799b      	ldrb	r3, [r3, #6]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b2d9      	uxtb	r1, r3
 8001c6e:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001c70:	7d93      	ldrb	r3, [r2, #22]
 8001c72:	f361 0303 	bfi	r3, r1, #0, #4
 8001c76:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure1_u4 	 = (EEM_U8)(( param->DATA[2] & 0xF0 ) >> 4 );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	799b      	ldrb	r3, [r3, #6]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	b2d9      	uxtb	r1, r3
 8001c86:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001c88:	7d93      	ldrb	r3, [r2, #22]
 8001c8a:	f361 1307 	bfi	r3, r1, #4, #4
 8001c8e:	7593      	strb	r3, [r2, #22]
		HVAC_MSG.Message02.SPN.HVAC_windPressure2_u4 	 = (EEM_U8)( param->DATA[3] & 0x0F );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	79db      	ldrb	r3, [r3, #7]
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2d9      	uxtb	r1, r3
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001c9c:	7dd3      	ldrb	r3, [r2, #23]
 8001c9e:	f361 0303 	bfi	r3, r1, #0, #4
 8001ca2:	75d3      	strb	r3, [r2, #23]

		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	79db      	ldrb	r3, [r3, #7]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	b25a      	sxtb	r2, r3
																    (EEM_U8)( param->DATA[4] & 0x0F );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7a1b      	ldrb	r3, [r3, #8]
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_leftFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[3] & 0xF0 ) >> 4 ) |
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001cc2:	761a      	strb	r2, [r3, #24]

		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7a1b      	ldrb	r3, [r3, #8]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	b25a      	sxtb	r2, r3
																	 (EEM_U8)( param->DATA[5] & 0x0F );
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7a5b      	ldrb	r3, [r3, #9]
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	b25b      	sxtb	r3, r3
		HVAC_MSG.Message02.SPN.HVAC_rightFrontWheel_xy_u8 = (EEM_U8)((EEM_U8)( param->DATA[4] & 0xF0 ) >> 4 ) |
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001ce2:	765a      	strb	r2, [r3, #25]

		HVAC_MSG.Message02.SPN.HVAC_status00_u1 = (EEM_U8)(( param->DATA[5] & 0x10 ) >> 4 );
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7a5b      	ldrb	r3, [r3, #9]
 8001ce8:	111b      	asrs	r3, r3, #4
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	b2d9      	uxtb	r1, r3
 8001cf0:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001cf2:	7e93      	ldrb	r3, [r2, #26]
 8001cf4:	f361 0300 	bfi	r3, r1, #0, #1
 8001cf8:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status01_u1 = (EEM_U8)(( param->DATA[5] & 0x20 ) >> 5 );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7a5b      	ldrb	r3, [r3, #9]
 8001cfe:	115b      	asrs	r3, r3, #5
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	b2d9      	uxtb	r1, r3
 8001d06:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d08:	7e93      	ldrb	r3, [r2, #26]
 8001d0a:	f361 0341 	bfi	r3, r1, #1, #1
 8001d0e:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status02_u1 = (EEM_U8)(( param->DATA[5] & 0x40 ) >> 6 );
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7a5b      	ldrb	r3, [r3, #9]
 8001d14:	119b      	asrs	r3, r3, #6
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	b2d9      	uxtb	r1, r3
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d1e:	7e93      	ldrb	r3, [r2, #26]
 8001d20:	f361 0382 	bfi	r3, r1, #2, #1
 8001d24:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status03_u1 = (EEM_U8)(( param->DATA[5] & 0x80 ) >> 7 );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a5b      	ldrb	r3, [r3, #9]
 8001d2a:	09db      	lsrs	r3, r3, #7
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d36:	7e93      	ldrb	r3, [r2, #26]
 8001d38:	f361 03c3 	bfi	r3, r1, #3, #1
 8001d3c:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_status04_u1 = (EEM_U8)( param->DATA[6] & 0x01 );
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7a9b      	ldrb	r3, [r3, #10]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	b2d9      	uxtb	r1, r3
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d4a:	7e93      	ldrb	r3, [r2, #26]
 8001d4c:	f361 1304 	bfi	r3, r1, #4, #1
 8001d50:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status05_u1 = (EEM_U8)(( param->DATA[6] & 0x02 ) >> 1 );
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7a9b      	ldrb	r3, [r3, #10]
 8001d56:	105b      	asrs	r3, r3, #1
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d60:	7e93      	ldrb	r3, [r2, #26]
 8001d62:	f361 1345 	bfi	r3, r1, #5, #1
 8001d66:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status06_u1 = (EEM_U8)(( param->DATA[6] & 0x04 ) >> 2 );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7a9b      	ldrb	r3, [r3, #10]
 8001d6c:	109b      	asrs	r3, r3, #2
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	b2d9      	uxtb	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d76:	7e93      	ldrb	r3, [r2, #26]
 8001d78:	f361 1386 	bfi	r3, r1, #6, #1
 8001d7c:	7693      	strb	r3, [r2, #26]
		HVAC_MSG.Message02.SPN.HVAC_status07_u1 = (EEM_U8)(( param->DATA[6] & 0x08 ) >> 3 );
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7a9b      	ldrb	r3, [r3, #10]
 8001d82:	10db      	asrs	r3, r3, #3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	b2d9      	uxtb	r1, r3
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001d8c:	7e93      	ldrb	r3, [r2, #26]
 8001d8e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d92:	7693      	strb	r3, [r2, #26]

		HVAC_MSG.Message02.SPN.HVAC_Hgear_cmd_u3 = (EEM_U8)( param->DATA[6] & 0x07 );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7a9b      	ldrb	r3, [r3, #10]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	b2d9      	uxtb	r1, r3
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001da0:	7ed3      	ldrb	r3, [r2, #27]
 8001da2:	f361 0302 	bfi	r3, r1, #0, #3
 8001da6:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_Gear_cmd_u2 = (EEM_U8)(( param->DATA[6] & 0x18) >> 3 );
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	10db      	asrs	r3, r3, #3
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	b2d9      	uxtb	r1, r3
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001db6:	7ed3      	ldrb	r3, [r2, #27]
 8001db8:	f361 03c4 	bfi	r3, r1, #3, #2
 8001dbc:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit05_u1 = (EEM_U8)(( param->DATA[6] & 0x20 ) >> 5 );
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7a9b      	ldrb	r3, [r3, #10]
 8001dc2:	115b      	asrs	r3, r3, #5
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	b2d9      	uxtb	r1, r3
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001dcc:	7ed3      	ldrb	r3, [r2, #27]
 8001dce:	f361 1345 	bfi	r3, r1, #5, #1
 8001dd2:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit06_u1 = (EEM_U8)(( param->DATA[6] & 0x40 ) >> 6 );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7a9b      	ldrb	r3, [r3, #10]
 8001dd8:	119b      	asrs	r3, r3, #6
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001de2:	7ed3      	ldrb	r3, [r2, #27]
 8001de4:	f361 1386 	bfi	r3, r1, #6, #1
 8001de8:	76d3      	strb	r3, [r2, #27]
		HVAC_MSG.Message02.SPN.HVAC_cmdbit07_u1 = (EEM_U8)(( param->DATA[6] & 0x80 ) >> 7 );
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a9b      	ldrb	r3, [r3, #10]
 8001dee:	09db      	lsrs	r3, r3, #7
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	b2d9      	uxtb	r1, r3
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <EEM_PERIODIC+0x484>)
 8001dfa:	7ed3      	ldrb	r3, [r2, #27]
 8001dfc:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e00:	76d3      	strb	r3, [r2, #27]


	break;
 8001e02:	bf00      	nop


	}

	
	return result;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200002c0 	.word	0x200002c0

08001e14 <EEM_IS_EMPTY>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
EEM_BOOL_T	EEM_IS_EMPTY( const EEM_RING_Buffer_st* buffer )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	 return (buffer->head == buffer->tail && !buffer->full);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d106      	bne.n	8001e3a <EEM_IS_EMPTY+0x26>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <EEM_IS_EMPTY+0x26>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <EEM_IS_EMPTY+0x28>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <EEM_FILTER_BCM>:
	 @return  : EEM_ERR_T
	 @date	  : 7.02.2023
	 @INFO	  :	BCM Specific CANBUS Filtering Function
********************************************************************************/
EEM_ERR_T EEM_FILTER_BCM( EEM_Protocol_obj_st* param )
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	EEM_ERR_T result = EEM_EOK;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
//ERROR
#endif


#endif
	return result;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <MCP2515_Initialize+0x3c>)
 8001e70:	f001 f898 	bl	8002fa4 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001e74:	230a      	movs	r3, #10
 8001e76:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <MCP2515_Initialize+0x40>)
 8001e7a:	f002 f963 	bl	8004144 <HAL_SPI_GetState>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <MCP2515_Initialize+0x24>
      return true;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e006      	b.n	8001e96 <MCP2515_Initialize+0x32>

    loop--;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f1      	bne.n	8001e78 <MCP2515_Initialize+0x14>

  return false;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	200001b0 	.word	0x200001b0

08001ea8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	200f      	movs	r0, #15
 8001eb2:	f000 f879 	bl	8001fa8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001eba:	200e      	movs	r0, #14
 8001ebc:	f000 f830 	bl	8001f20 <MCP2515_ReadByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001ec6:	2b80      	cmp	r3, #128	; 0x80
 8001ec8:	d101      	bne.n	8001ece <MCP2515_SetConfigMode+0x26>
      return true;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e006      	b.n	8001edc <MCP2515_SetConfigMode+0x34>

    loop--;
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ef      	bne.n	8001eba <MCP2515_SetConfigMode+0x12>

  return false;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001eea:	2100      	movs	r1, #0
 8001eec:	200f      	movs	r0, #15
 8001eee:	f000 f85b 	bl	8001fa8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001ef6:	200e      	movs	r0, #14
 8001ef8:	f000 f812 	bl	8001f20 <MCP2515_ReadByte>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <MCP2515_SetNormalMode+0x26>
      return true;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e006      	b.n	8001f18 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ef      	bne.n	8001ef6 <MCP2515_SetNormalMode+0x12>

  return false;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MCP2515_ReadByte+0x40>)
 8001f30:	f001 f838 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 f901 	bl	800213c <SPI_Tx>
  SPI_Tx(address);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f8fd 	bl	800213c <SPI_Tx>
  retVal = SPI_Rx();
 8001f42:	f000 f921 	bl	8002188 <SPI_Rx>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MCP2515_ReadByte+0x40>)
 8001f50:	f001 f828 	bl	8002fa4 <HAL_GPIO_WritePin>

  return retVal;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020000 	.word	0x40020000

08001f64 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001f74:	2200      	movs	r2, #0
 8001f76:	2110      	movs	r1, #16
 8001f78:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <MCP2515_ReadRxSequence+0x40>)
 8001f7a:	f001 f813 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f8db 	bl	800213c <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6838      	ldr	r0, [r7, #0]
 8001f8c:	f000 f90c 	bl	80021a8 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8001f90:	2201      	movs	r2, #1
 8001f92:	2110      	movs	r1, #16
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MCP2515_ReadRxSequence+0x40>)
 8001f96:	f001 f805 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2110      	movs	r1, #16
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <MCP2515_WriteByte+0x44>)
 8001fbe:	f000 fff1 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f000 f8ba 	bl	800213c <SPI_Tx>
  SPI_Tx(address);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f8b6 	bl	800213c <SPI_Tx>
  SPI_Tx(data);
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f8b2 	bl	800213c <SPI_Tx>

  MCP2515_CS_HIGH();
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2110      	movs	r1, #16
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <MCP2515_WriteByte+0x44>)
 8001fde:	f000 ffe1 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020000 	.word	0x40020000

08001ff0 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	603a      	str	r2, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002000:	2200      	movs	r2, #0
 8002002:	2110      	movs	r1, #16
 8002004:	480e      	ldr	r0, [pc, #56]	; (8002040 <MCP2515_WriteByteSequence+0x50>)
 8002006:	f000 ffcd 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800200a:	2002      	movs	r0, #2
 800200c:	f000 f896 	bl	800213c <SPI_Tx>
  SPI_Tx(startAddress);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f892 	bl	800213c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8002018:	79ba      	ldrb	r2, [r7, #6]
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f000 f89a 	bl	8002160 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800202c:	2201      	movs	r2, #1
 800202e:	2110      	movs	r1, #16
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <MCP2515_WriteByteSequence+0x50>)
 8002032:	f000 ffb7 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40020000 	.word	0x40020000

08002044 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	4613      	mov	r3, r2
 8002054:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8002056:	2200      	movs	r2, #0
 8002058:	2110      	movs	r1, #16
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MCP2515_LoadTxSequence+0x50>)
 800205c:	f000 ffa2 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f86a 	bl	800213c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8002068:	2104      	movs	r1, #4
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f000 f878 	bl	8002160 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f862 	bl	800213c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f86f 	bl	8002160 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002082:	2201      	movs	r2, #1
 8002084:	2110      	movs	r1, #16
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <MCP2515_LoadTxSequence+0x50>)
 8002088:	f000 ff8c 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020000 	.word	0x40020000

08002098 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80020a2:	2200      	movs	r2, #0
 80020a4:	2110      	movs	r1, #16
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <MCP2515_RequestToSend+0x30>)
 80020a8:	f000 ff7c 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f844 	bl	800213c <SPI_Tx>

  MCP2515_CS_HIGH();
 80020b4:	2201      	movs	r2, #1
 80020b6:	2110      	movs	r1, #16
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <MCP2515_RequestToSend+0x30>)
 80020ba:	f000 ff73 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020000 	.word	0x40020000

080020cc <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80020d2:	2200      	movs	r2, #0
 80020d4:	2110      	movs	r1, #16
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <MCP2515_ReadStatus+0x34>)
 80020d8:	f000 ff64 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80020dc:	20a0      	movs	r0, #160	; 0xa0
 80020de:	f000 f82d 	bl	800213c <SPI_Tx>
  retVal = SPI_Rx();
 80020e2:	f000 f851 	bl	8002188 <SPI_Rx>
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80020ea:	2201      	movs	r2, #1
 80020ec:	2110      	movs	r1, #16
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <MCP2515_ReadStatus+0x34>)
 80020f0:	f000 ff58 	bl	8002fa4 <HAL_GPIO_WritePin>

  return retVal;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40020000 	.word	0x40020000

08002104 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800210a:	2200      	movs	r2, #0
 800210c:	2110      	movs	r1, #16
 800210e:	480a      	ldr	r0, [pc, #40]	; (8002138 <MCP2515_GetRxStatus+0x34>)
 8002110:	f000 ff48 	bl	8002fa4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8002114:	20b0      	movs	r0, #176	; 0xb0
 8002116:	f000 f811 	bl	800213c <SPI_Tx>
  retVal = SPI_Rx();
 800211a:	f000 f835 	bl	8002188 <SPI_Rx>
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8002122:	2201      	movs	r2, #1
 8002124:	2110      	movs	r1, #16
 8002126:	4804      	ldr	r0, [pc, #16]	; (8002138 <MCP2515_GetRxStatus+0x34>)
 8002128:	f000 ff3c 	bl	8002fa4 <HAL_GPIO_WritePin>

  return retVal;
 800212c:	79fb      	ldrb	r3, [r7, #7]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40020000 	.word	0x40020000

0800213c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8002146:	1df9      	adds	r1, r7, #7
 8002148:	230a      	movs	r3, #10
 800214a:	2201      	movs	r2, #1
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <SPI_Tx+0x20>)
 800214e:	f001 fc0a 	bl	8003966 <HAL_SPI_Transmit>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200001b0 	.word	0x200001b0

08002160 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	b29a      	uxth	r2, r3
 8002170:	230a      	movs	r3, #10
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <SPI_TxBuffer+0x24>)
 8002176:	f001 fbf6 	bl	8003966 <HAL_SPI_Transmit>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001b0 	.word	0x200001b0

08002188 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800218e:	1df9      	adds	r1, r7, #7
 8002190:	230a      	movs	r3, #10
 8002192:	2201      	movs	r2, #1
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <SPI_Rx+0x1c>)
 8002196:	f001 fd22 	bl	8003bde <HAL_SPI_Receive>
  return retVal;
 800219a:	79fb      	ldrb	r3, [r7, #7]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200001b0 	.word	0x200001b0

080021a8 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	230a      	movs	r3, #10
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <SPI_RxBuffer+0x24>)
 80021be:	f001 fd0e 	bl	8003bde <HAL_SPI_Receive>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001b0 	.word	0x200001b0

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 fd0d 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	200f      	movs	r0, #15
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7fe fc64 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd25 	bl	8002c82 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 fced 	bl	8002c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000000 	.word	0x20000000
 800226c:	20000008 	.word	0x20000008
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	20000390 	.word	0x20000390

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000390 	.word	0x20000390

080022b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e033      	b.n	8002332 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fc24 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022fa:	f023 0302 	bic.w	r3, r3, #2
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 faba 	bl	8002880 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
 8002322:	e001      	b.n	8002328 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Start+0x1a>
 8002352:	2302      	movs	r3, #2
 8002354:	e097      	b.n	8002486 <HAL_ADC_Start+0x14a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d018      	beq.n	800239e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <HAL_ADC_Start+0x158>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_ADC_Start+0x15c>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9a      	lsrs	r2, r3, #18
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002390:	e002      	b.n	8002398 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3b01      	subs	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f9      	bne.n	8002392 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d15f      	bne.n	800246c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	d106      	bne.n	80023fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f023 0206 	bic.w	r2, r3, #6
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
 80023f8:	e002      	b.n	8002400 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_ADC_Start+0x160>)
 800240a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002414:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d129      	bne.n	8002484 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e020      	b.n	8002484 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <HAL_ADC_Start+0x164>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d11b      	bne.n	8002484 <HAL_ADC_Start+0x148>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d114      	bne.n	8002484 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	e00b      	b.n	8002484 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 0210 	orr.w	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000
 8002498:	431bde83 	.word	0x431bde83
 800249c:	40012300 	.word	0x40012300
 80024a0:	40012000 	.word	0x40012000

080024a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Stop+0x16>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e021      	b.n	80024fe <HAL_ADC_Stop+0x5a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d113      	bne.n	8002550 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d10b      	bne.n	8002550 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e063      	b.n	8002618 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002550:	f7ff fea4 	bl	800229c <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002556:	e021      	b.n	800259c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d01d      	beq.n	800259c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_ADC_PollForConversion+0x6c>
 8002566:	f7ff fe99 	bl	800229c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d212      	bcs.n	800259c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d00b      	beq.n	800259c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03d      	b.n	8002618 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d1d6      	bne.n	8002558 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0212 	mvn.w	r2, #18
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d123      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11f      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1c>
 8002654:	2302      	movs	r3, #2
 8002656:	e105      	b.n	8002864 <HAL_ADC_ConfigChannel+0x228>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d925      	bls.n	80026b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1e      	subs	r3, #30
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4403      	add	r3, r0
 80026a6:	3b1e      	subs	r3, #30
 80026a8:	409a      	lsls	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	e022      	b.n	80026fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	2207      	movs	r2, #7
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	400a      	ands	r2, r1
 80026d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4403      	add	r3, r0
 80026f0:	409a      	lsls	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d824      	bhi.n	800274c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b05      	subs	r3, #5
 8002714:	221f      	movs	r2, #31
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	400a      	ands	r2, r1
 8002722:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b05      	subs	r3, #5
 800273e:	fa00 f203 	lsl.w	r2, r0, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	e04c      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d824      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b23      	subs	r3, #35	; 0x23
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b23      	subs	r3, #35	; 0x23
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
 800279c:	e023      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b41      	subs	r3, #65	; 0x41
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b41      	subs	r3, #65	; 0x41
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_ADC_ConfigChannel+0x234>)
 80027e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_ADC_ConfigChannel+0x238>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1cc>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d105      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_ADC_ConfigChannel+0x238>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d123      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b10      	cmp	r3, #16
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x1e6>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b11      	cmp	r3, #17
 8002820:	d11b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d111      	bne.n	800285a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_ADC_ConfigChannel+0x23c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_ADC_ConfigChannel+0x240>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9a      	lsrs	r2, r3, #18
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	40012000 	.word	0x40012000
 8002878:	20000000 	.word	0x20000000
 800287c:	431bde83 	.word	0x431bde83

08002880 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002888:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <ADC_Init+0x1f0>)
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <ADC_Init+0x1f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e00f      	b.n	800297e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800296c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0202 	bic.w	r2, r2, #2
 800298c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7e1b      	ldrb	r3, [r3, #24]
 8002998:	005a      	lsls	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	3b01      	subs	r3, #1
 80029d8:	035a      	lsls	r2, r3, #13
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e007      	b.n	80029f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	051a      	lsls	r2, r3, #20
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a36:	025a      	lsls	r2, r3, #9
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	029a      	lsls	r2, r3, #10
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40012300 	.word	0x40012300
 8002a74:	0f000001 	.word	0x0f000001

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4907      	ldr	r1, [pc, #28]	; (8002b14 <__NVIC_EnableIRQ+0x38>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	; (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	; (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f7ff ff8e 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff29 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff3e 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff8e 	bl	8002b6c <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5d 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff31 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	e159      	b.n	8002f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8148 	bne.w	8002f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d005      	beq.n	8002cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d130      	bne.n	8002d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 0201 	and.w	r2, r3, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d017      	beq.n	8002d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d123      	bne.n	8002de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	220f      	movs	r2, #15
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0203 	and.w	r2, r3, #3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a2 	beq.w	8002f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a56      	ldr	r2, [pc, #344]	; (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3e:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_GPIO_Init+0x2ec>)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a49      	ldr	r2, [pc, #292]	; (8002f8c <HAL_GPIO_Init+0x2f0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_Init+0x202>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_GPIO_Init+0x2f4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_Init+0x1fe>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_GPIO_Init+0x2f8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_Init+0x1fa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a46      	ldr	r2, [pc, #280]	; (8002f98 <HAL_GPIO_Init+0x2fc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_Init+0x1f6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <HAL_GPIO_Init+0x300>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_Init+0x1f2>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	; (8002f88 <HAL_GPIO_Init+0x2ec>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b23      	ldr	r3, [pc, #140]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f aea2 	bls.w	8002cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc0:	e003      	b.n	8002fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	041a      	lsls	r2, r3, #16
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7ff f8ea 	bl	800229c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f8e6 	bl	800229c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff f8d6 	bl	800229c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff f8d2 	bl	800229c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7ff f88b 	bl	800229c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7ff f887 	bl	800229c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7ff f86a 	bl	800229c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7ff f866 	bl	800229c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7ff f84a 	bl	800229c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7ff f846 	bl	800229c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7ff f833 	bl	800229c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7ff f82f 	bl	800229c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe ffef 	bl	800229c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe ffeb 	bl	800229c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe ffb0 	bl	800229c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe ffac 	bl	800229c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe ff9a 	bl	800229c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe ff96 	bl	800229c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe ff6a 	bl	800229c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe ff66 	bl	800229c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe ff3f 	bl	800229c <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe ff3b 	bl	800229c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe ff28 	bl	800229c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe ff24 	bl	800229c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fe56 	bl	800229c <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fe52 	bl	800229c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fdb6 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08004c2c 	.word	0x08004c2c
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b090      	sub	sp, #64	; 0x40
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80a1 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003700:	e09b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003706:	e098      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	; 0x24
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003748:	460a      	mov	r2, r1
 800374a:	62ba      	str	r2, [r7, #40]	; 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2200      	movs	r2, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003762:	f7fc fd37 	bl	80001d4 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376e:	e053      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	617a      	str	r2, [r7, #20]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003782:	f04f 0b00 	mov.w	fp, #0
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 080a 	subs.w	r8, r2, sl
 80037a2:	eb63 090b 	sbc.w	r9, r3, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	00eb      	lsls	r3, r5, #3
 80037cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	eb14 030a 	adds.w	r3, r4, sl
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	eb45 030b 	adc.w	r3, r5, fp
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ee:	4629      	mov	r1, r5
 80037f0:	028b      	lsls	r3, r1, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f8:	4621      	mov	r1, r4
 80037fa:	028a      	lsls	r2, r1, #10
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	2200      	movs	r2, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f7fc fce2 	bl	80001d4 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800383c:	4618      	mov	r0, r3
 800383e:	3740      	adds	r7, #64	; 0x40
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e07b      	b.n	800395e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b00      	cmp	r3, #0
 800386c:	d108      	bne.n	8003880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d009      	beq.n	800388c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
 800387e:	e005      	b.n	800388c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd f97e 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	ea42 0103 	orr.w	r1, r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0104 	and.w	r1, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0210 	and.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_SPI_Transmit+0x22>
 8003984:	2302      	movs	r3, #2
 8003986:	e126      	b.n	8003bd6 <HAL_SPI_Transmit+0x270>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003990:	f7fe fc84 	bl	800229c <HAL_GetTick>
 8003994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
 80039a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039aa:	e10b      	b.n	8003bc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_SPI_Transmit+0x52>
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039bc:	e102      	b.n	8003bc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2203      	movs	r2, #3
 80039c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a04:	d10f      	bne.n	8003a26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d007      	beq.n	8003a44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4c:	d14b      	bne.n	8003ae6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Transmit+0xf6>
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d13e      	bne.n	8003ada <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a80:	e02b      	b.n	8003ada <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d112      	bne.n	8003ab6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ab4:	e011      	b.n	8003ada <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab6:	f7fe fbf1 	bl	800229c <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d803      	bhi.n	8003ace <HAL_SPI_Transmit+0x168>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Transmit+0x16e>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ad8:	e074      	b.n	8003bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ce      	bne.n	8003a82 <HAL_SPI_Transmit+0x11c>
 8003ae4:	e04c      	b.n	8003b80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_Transmit+0x18e>
 8003aee:	8afb      	ldrh	r3, [r7, #22]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d140      	bne.n	8003b76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b1a:	e02c      	b.n	8003b76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d113      	bne.n	8003b52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b50:	e011      	b.n	8003b76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fe fba3 	bl	800229c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x204>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x20a>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b74:	e026      	b.n	8003bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cd      	bne.n	8003b1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	6839      	ldr	r1, [r7, #0]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fbd9 	bl	800433c <SPI_EndRxTxTransaction>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e000      	b.n	8003bc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b088      	sub	sp, #32
 8003be2:	af02      	add	r7, sp, #8
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfa:	d112      	bne.n	8003c22 <HAL_SPI_Receive+0x44>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2204      	movs	r2, #4
 8003c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f8f1 	bl	8003e00 <HAL_SPI_TransmitReceive>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	e0ea      	b.n	8003df8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_SPI_Receive+0x52>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0e3      	b.n	8003df8 <HAL_SPI_Receive+0x21a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c38:	f7fe fb30 	bl	800229c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c4e:	e0ca      	b.n	8003de6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Receive+0x7e>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c60:	e0c1      	b.n	8003de6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2204      	movs	r2, #4
 8003c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	d10f      	bne.n	8003cca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d007      	beq.n	8003ce8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d162      	bne.n	8003db6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cf0:	e02e      	b.n	8003d50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d115      	bne.n	8003d2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f103 020c 	add.w	r2, r3, #12
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2a:	e011      	b.n	8003d50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2c:	f7fe fab6 	bl	800229c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d803      	bhi.n	8003d44 <HAL_SPI_Receive+0x166>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d102      	bne.n	8003d4a <HAL_SPI_Receive+0x16c>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d4e:	e04a      	b.n	8003de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cb      	bne.n	8003cf2 <HAL_SPI_Receive+0x114>
 8003d5a:	e031      	b.n	8003dc0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d113      	bne.n	8003d92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	b292      	uxth	r2, r2
 8003d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d90:	e011      	b.n	8003db6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d92:	f7fe fa83 	bl	800229c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d803      	bhi.n	8003daa <HAL_SPI_Receive+0x1cc>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d102      	bne.n	8003db0 <HAL_SPI_Receive+0x1d2>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003db4:	e017      	b.n	8003de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1cd      	bne.n	8003d5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	6839      	ldr	r1, [r7, #0]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fa53 	bl	8004270 <SPI_EndRxTransaction>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
 8003de2:	e000      	b.n	8003de6 <HAL_SPI_Receive+0x208>
  }

error :
 8003de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x26>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e18a      	b.n	800413c <HAL_SPI_TransmitReceive+0x33c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7fe fa35 	bl	800229c <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d00f      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x70>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e56:	d107      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d103      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x68>
 8003e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d003      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e6e:	e15b      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x82>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x82>
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e88:	e14e      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2205      	movs	r2, #5
 8003e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d007      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d178      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x10a>
 8003f04:	8b7b      	ldrh	r3, [r7, #26]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d166      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	881a      	ldrh	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f2e:	e053      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d11b      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x176>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x176>
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d113      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	1c9a      	adds	r2, r3, #2
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d119      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x1b8>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d014      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fb8:	f7fe f970 	bl	800229c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d807      	bhi.n	8003fd8 <HAL_SPI_TransmitReceive+0x1d8>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d003      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fd6:	e0a7      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1a6      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x130>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1a1      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x130>
 8003fec:	e07c      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x1fc>
 8003ff6:	8b7b      	ldrh	r3, [r7, #26]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d16b      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004022:	e057      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11c      	bne.n	800406c <HAL_SPI_TransmitReceive+0x26c>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <HAL_SPI_TransmitReceive+0x26c>
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d114      	bne.n	800406c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d119      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x2ae>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d014      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040aa:	2301      	movs	r3, #1
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ae:	f7fe f8f5 	bl	800229c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d803      	bhi.n	80040c6 <HAL_SPI_TransmitReceive+0x2c6>
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x2cc>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040d2:	e029      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1a2      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x224>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d19d      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f925 	bl	800433c <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004104:	e010      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	e000      	b.n	8004128 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800413c:	4618      	mov	r0, r3
 800413e:	3730      	adds	r7, #48	; 0x30
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004170:	f7fe f894 	bl	800229c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004180:	f7fe f88c 	bl	800229c <HAL_GetTick>
 8004184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	0d1b      	lsrs	r3, r3, #20
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004196:	e054      	b.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d050      	beq.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a0:	f7fe f87c 	bl	800229c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d902      	bls.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d13d      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d111      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	d004      	beq.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d107      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fc:	d10f      	bne.n	800421e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e017      	b.n	8004262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3b01      	subs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	429a      	cmp	r2, r3
 800425e:	d19b      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000000 	.word	0x20000000

08004270 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004284:	d111      	bne.n	80042aa <SPI_EndRxTransaction+0x3a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428e:	d004      	beq.n	800429a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d107      	bne.n	80042aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d12a      	bne.n	800430a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d012      	beq.n	80042e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff ff49 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02d      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e026      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2101      	movs	r1, #1
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff ff36 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01a      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e013      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	2101      	movs	r1, #1
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff23 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e000      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <SPI_EndRxTxTransaction+0x7c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <SPI_EndRxTxTransaction+0x80>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0d5b      	lsrs	r3, r3, #21
 8004354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004366:	d112      	bne.n	800438e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fef4 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e00f      	b.n	80043ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d0f2      	beq.n	800438e <SPI_EndRxTxTransaction+0x52>
 80043a8:	e000      	b.n	80043ac <SPI_EndRxTxTransaction+0x70>
        break;
 80043aa:	bf00      	nop
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000000 	.word	0x20000000
 80043bc:	165e9f81 	.word	0x165e9f81

080043c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e041      	b.n	8004456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc fc26 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 fa2e 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d122      	bne.n	80044ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d11b      	bne.n	80044ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0202 	mvn.w	r2, #2
 800448a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9bf 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80044a6:	e005      	b.n	80044b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f9b1 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9c2 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d122      	bne.n	800450e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0204 	mvn.w	r2, #4
 80044de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f995 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80044fa:	e005      	b.n	8004508 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f987 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f998 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b08      	cmp	r3, #8
 800451a:	d122      	bne.n	8004562 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0208 	mvn.w	r2, #8
 8004532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2204      	movs	r2, #4
 8004538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f96b 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 800454e:	e005      	b.n	800455c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f95d 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f96e 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0210 	mvn.w	r2, #16
 8004586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2208      	movs	r2, #8
 800458c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f941 	bl	8004824 <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f933 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f944 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10e      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0201 	mvn.w	r2, #1
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f90d 	bl	80047fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b80      	cmp	r3, #128	; 0x80
 80045ee:	d10e      	bne.n	800460e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d107      	bne.n	800460e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fabb 	bl	8004b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d10e      	bne.n	800463a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d107      	bne.n	800463a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f909 	bl	800484c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b20      	cmp	r3, #32
 8004646:	d10e      	bne.n	8004666 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b20      	cmp	r3, #32
 8004654:	d107      	bne.n	8004666 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f06f 0220 	mvn.w	r2, #32
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa85 	bl	8004b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_TIM_ConfigClockSource+0x1c>
 8004686:	2302      	movs	r3, #2
 8004688:	e0b4      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x186>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d03e      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0xd4>
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	f200 8087 	bhi.w	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	f000 8086 	beq.w	80047e0 <HAL_TIM_ConfigClockSource+0x172>
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d8:	d87f      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046da:	2b70      	cmp	r3, #112	; 0x70
 80046dc:	d01a      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0xa6>
 80046de:	2b70      	cmp	r3, #112	; 0x70
 80046e0:	d87b      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046e2:	2b60      	cmp	r3, #96	; 0x60
 80046e4:	d050      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0x11a>
 80046e6:	2b60      	cmp	r3, #96	; 0x60
 80046e8:	d877      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046ea:	2b50      	cmp	r3, #80	; 0x50
 80046ec:	d03c      	beq.n	8004768 <HAL_TIM_ConfigClockSource+0xfa>
 80046ee:	2b50      	cmp	r3, #80	; 0x50
 80046f0:	d873      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d058      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0x13a>
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d86f      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 80046fa:	2b30      	cmp	r3, #48	; 0x30
 80046fc:	d064      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x15a>
 80046fe:	2b30      	cmp	r3, #48	; 0x30
 8004700:	d86b      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 8004702:	2b20      	cmp	r3, #32
 8004704:	d060      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x15a>
 8004706:	2b20      	cmp	r3, #32
 8004708:	d867      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d05c      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x15a>
 800470e:	2b10      	cmp	r3, #16
 8004710:	d05a      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x15a>
 8004712:	e062      	b.n	80047da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f000 f996 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004736:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]
      break;
 8004740:	e04f      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f000 f97f 	bl	8004a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004764:	609a      	str	r2, [r3, #8]
      break;
 8004766:	e03c      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	461a      	mov	r2, r3
 8004776:	f000 f8f3 	bl	8004960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2150      	movs	r1, #80	; 0x50
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f94c 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004786:	e02c      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	461a      	mov	r2, r3
 8004796:	f000 f912 	bl	80049be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2160      	movs	r1, #96	; 0x60
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f93c 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047a6:	e01c      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f000 f8d3 	bl	8004960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f92c 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047c6:	e00c      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 f923 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047d8:	e003      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
      break;
 80047de:	e000      	b.n	80047e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a31      	ldr	r2, [pc, #196]	; (8004948 <TIM_Base_SetConfig+0xe8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a30      	ldr	r2, [pc, #192]	; (800494c <TIM_Base_SetConfig+0xec>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <TIM_Base_SetConfig+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a22      	ldr	r2, [pc, #136]	; (8004948 <TIM_Base_SetConfig+0xe8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <TIM_Base_SetConfig+0xec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <TIM_Base_SetConfig+0xf0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <TIM_Base_SetConfig+0xf4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <TIM_Base_SetConfig+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <TIM_Base_SetConfig+0xfc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <TIM_Base_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0201 	bic.w	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 030a 	bic.w	r3, r3, #10
 800499c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049be:	b480      	push	{r7}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0210 	bic.w	r2, r3, #16
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	031b      	lsls	r3, r3, #12
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021a      	lsls	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e050      	b.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d013      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10c      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40014000 	.word	0x40014000

08004b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <__libc_init_array>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	4d0d      	ldr	r5, [pc, #52]	; (8004bd0 <__libc_init_array+0x38>)
 8004b9c:	4c0d      	ldr	r4, [pc, #52]	; (8004bd4 <__libc_init_array+0x3c>)
 8004b9e:	1b64      	subs	r4, r4, r5
 8004ba0:	10a4      	asrs	r4, r4, #2
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	42a6      	cmp	r6, r4
 8004ba6:	d109      	bne.n	8004bbc <__libc_init_array+0x24>
 8004ba8:	4d0b      	ldr	r5, [pc, #44]	; (8004bd8 <__libc_init_array+0x40>)
 8004baa:	4c0c      	ldr	r4, [pc, #48]	; (8004bdc <__libc_init_array+0x44>)
 8004bac:	f000 f82e 	bl	8004c0c <_init>
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	42a6      	cmp	r6, r4
 8004bb8:	d105      	bne.n	8004bc6 <__libc_init_array+0x2e>
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc0:	4798      	blx	r3
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7ee      	b.n	8004ba4 <__libc_init_array+0xc>
 8004bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bca:	4798      	blx	r3
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e7f2      	b.n	8004bb6 <__libc_init_array+0x1e>
 8004bd0:	08004c50 	.word	0x08004c50
 8004bd4:	08004c50 	.word	0x08004c50
 8004bd8:	08004c50 	.word	0x08004c50
 8004bdc:	08004c54 	.word	0x08004c54

08004be0 <memcpy>:
 8004be0:	440a      	add	r2, r1
 8004be2:	4291      	cmp	r1, r2
 8004be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004be8:	d100      	bne.n	8004bec <memcpy+0xc>
 8004bea:	4770      	bx	lr
 8004bec:	b510      	push	{r4, lr}
 8004bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	d1f9      	bne.n	8004bee <memcpy+0xe>
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
